// @generated by protobuf-ts 2.9.5 with parameter force_optimize_speed,long_type_string
// @generated from protobuf file "deprecation-explicit.proto" (package "spec", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * The entire message is deprecated
 *
 * @deprecated
 * @generated from protobuf message spec.DeprecatedMessage
 */
export interface DeprecatedMessage {
    /**
     * @generated from protobuf field: string field = 1;
     */
    field: string;
}
/**
 * A single field of this message is deprecated
 *
 * @generated from protobuf message spec.DeprecatedFieldMessage
 */
export interface DeprecatedFieldMessage {
    /**
     * This field is deprecated
     *
     * @deprecated
     * @generated from protobuf field: string deprecated_field = 1 [deprecated = true];
     */
    deprecatedField: string;
    /**
     * This field is not deprecated
     *
     * @generated from protobuf field: string current_field = 2;
     */
    currentField: string;
}
/**
 * The entire enum is deprecated
 *
 * @deprecated
 * @generated from protobuf enum spec.DeprecatedEnum
 */
export enum DeprecatedEnum {
    /**
     * @generated from protobuf enum value: DEPRECATED_ENUM_A = 0;
     */
    DEPRECATED_ENUM_A = 0,
    /**
     * @generated from protobuf enum value: DEPRECATED_ENUM_B = 1;
     */
    DEPRECATED_ENUM_B = 1
}
/**
 * Only a single enum value is deprecated
 *
 * @generated from protobuf enum spec.DeprecatedValueEnum
 */
export enum DeprecatedValueEnum {
    /**
     * @generated from protobuf enum value: DEPRECATED_VALUE_ENUM_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @deprecated
     * @generated from protobuf enum value: DEPRECATED_VALUE_ENUM_DEPRECATED_VALUE = 1 [deprecated = true];
     */
    DEPRECATED_VALUE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class DeprecatedMessage$Type extends MessageType<DeprecatedMessage> {
    constructor() {
        super("spec.DeprecatedMessage", [
            { no: 1, name: "field", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeprecatedMessage>): DeprecatedMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.field = "";
        if (value !== undefined)
            reflectionMergePartial<DeprecatedMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeprecatedMessage): DeprecatedMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string field */ 1:
                    message.field = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeprecatedMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string field = 1; */
        if (message.field !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.field);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @deprecated
 * @generated MessageType for protobuf message spec.DeprecatedMessage
 */
export const DeprecatedMessage = new DeprecatedMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeprecatedFieldMessage$Type extends MessageType<DeprecatedFieldMessage> {
    constructor() {
        super("spec.DeprecatedFieldMessage", [
            { no: 1, name: "deprecated_field", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "current_field", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeprecatedFieldMessage>): DeprecatedFieldMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.deprecatedField = "";
        message.currentField = "";
        if (value !== undefined)
            reflectionMergePartial<DeprecatedFieldMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeprecatedFieldMessage): DeprecatedFieldMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string deprecated_field = 1 [deprecated = true];*/ 1:
                    message.deprecatedField = reader.string();
                    break;
                case /* string current_field */ 2:
                    message.currentField = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeprecatedFieldMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string deprecated_field = 1 [deprecated = true]; */
        if (message.deprecatedField !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.deprecatedField);
        /* string current_field = 2; */
        if (message.currentField !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.currentField);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.DeprecatedFieldMessage
 */
export const DeprecatedFieldMessage = new DeprecatedFieldMessage$Type();
