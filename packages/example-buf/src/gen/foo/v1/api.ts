// @generated by protobuf-ts 2.9.6 with parameter long_type_string
// @generated from protobuf file "foo/v1/api.proto" (package "foo.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Money } from "../../google/type/money";
import { Timestamp } from "../../google/protobuf/timestamp";
import { CommonMessage } from "../../common/v1/common";
/**
 * @generated from protobuf message foo.v1.GetRequest
 */
export interface GetRequest {
    /**
     * @generated from protobuf field: int32 a = 1
     */
    a: number;
}
/**
 * @generated from protobuf message foo.v1.GetResponse
 */
export interface GetResponse {
    /**
     * @generated from protobuf field: common.v1.CommonMessage a = 1
     */
    a?: CommonMessage;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp b = 2
     */
    b?: Timestamp;
    /**
     * @generated from protobuf field: google.type.Money c = 3
     */
    c?: Money;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetRequest$Type extends MessageType<GetRequest> {
    constructor() {
        super("foo.v1.GetRequest", [
            { no: 1, name: "a", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetRequest>): GetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.a = 0;
        if (value !== undefined)
            reflectionMergePartial<GetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRequest): GetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 a */ 1:
                    message.a = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 a = 1; */
        if (message.a !== 0)
            writer.tag(1, WireType.Varint).int32(message.a);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foo.v1.GetRequest
 */
export const GetRequest = new GetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetResponse$Type extends MessageType<GetResponse> {
    constructor() {
        super("foo.v1.GetResponse", [
            { no: 1, name: "a", kind: "message", T: () => CommonMessage },
            { no: 2, name: "b", kind: "message", T: () => Timestamp },
            { no: 3, name: "c", kind: "message", T: () => Money }
        ]);
    }
    create(value?: PartialMessage<GetResponse>): GetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetResponse): GetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.v1.CommonMessage a */ 1:
                    message.a = CommonMessage.internalBinaryRead(reader, reader.uint32(), options, message.a);
                    break;
                case /* google.protobuf.Timestamp b */ 2:
                    message.b = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.b);
                    break;
                case /* google.type.Money c */ 3:
                    message.c = Money.internalBinaryRead(reader, reader.uint32(), options, message.c);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.v1.CommonMessage a = 1; */
        if (message.a)
            CommonMessage.internalBinaryWrite(message.a, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp b = 2; */
        if (message.b)
            Timestamp.internalBinaryWrite(message.b, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.type.Money c = 3; */
        if (message.c)
            Money.internalBinaryWrite(message.c, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foo.v1.GetResponse
 */
export const GetResponse = new GetResponse$Type();
/**
 * @generated ServiceType for protobuf service foo.v1.FooService
 */
export const FooService = new ServiceType("foo.v1.FooService", [
    { name: "Get", options: {}, I: GetRequest, O: GetResponse }
]);
