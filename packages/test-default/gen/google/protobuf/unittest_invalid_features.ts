// @generated by protobuf-ts 2.9.5
// @generated from protobuf file "google/protobuf/unittest_invalid_features.proto" (package "pb", syntax proto2)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2023 Google Inc.  All rights reserved.
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message pb.TestInvalidFeatures
 */
export interface TestInvalidFeatures {
    /**
     * @generated from protobuf field: repeated int32 repeated_feature = 1;
     */
    repeatedFeature: number[];
}
// @generated message type with reflection information, may provide speed optimized methods
class TestInvalidFeatures$Type extends MessageType<TestInvalidFeatures> {
    constructor() {
        super("pb.TestInvalidFeatures", [
            { no: 1, name: "repeated_feature", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestInvalidFeatures>): TestInvalidFeatures {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.repeatedFeature = [];
        if (value !== undefined)
            reflectionMergePartial<TestInvalidFeatures>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestInvalidFeatures): TestInvalidFeatures {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 repeated_feature */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFeature.push(reader.int32());
                    else
                        message.repeatedFeature.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestInvalidFeatures, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 repeated_feature = 1; */
        for (let i = 0; i < message.repeatedFeature.length; i++)
            writer.tag(1, WireType.Varint).int32(message.repeatedFeature[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.TestInvalidFeatures
 */
export const TestInvalidFeatures = new TestInvalidFeatures$Type();
