// @generated by protobuf-ts 2.9.5
// @generated from protobuf file "google/type/color.proto" (package "google.type", syntax proto3)
// tslint:disable
//
// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FloatValue } from "../protobuf/wrappers";
/**
 * Represents a color in the RGBA color space. This representation is designed
 * for simplicity of conversion to/from color representations in various
 * languages over compactness; for example, the fields of this representation
 * can be trivially provided to the constructor of "java.awt.Color" in Java; it
 * can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
 * method in iOS; and, with just a little work, it can be easily formatted into
 * a CSS "rgba()" string in JavaScript, as well.
 *
 * Note: this proto does not carry information about the absolute color space
 * that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,
 * DCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color
 * space.
 *
 * Example (Java):
 *
 *      import com.google.type.Color;
 *
 *      // ...
 *      public static java.awt.Color fromProto(Color protocolor) {
 *        float alpha = protocolor.hasAlpha()
 *            ? protocolor.getAlpha().getValue()
 *            : 1.0;
 *
 *        return new java.awt.Color(
 *            protocolor.getRed(),
 *            protocolor.getGreen(),
 *            protocolor.getBlue(),
 *            alpha);
 *      }
 *
 *      public static Color toProto(java.awt.Color color) {
 *        float red = (float) color.getRed();
 *        float green = (float) color.getGreen();
 *        float blue = (float) color.getBlue();
 *        float denominator = 255.0;
 *        Color.Builder resultBuilder =
 *            Color
 *                .newBuilder()
 *                .setRed(red / denominator)
 *                .setGreen(green / denominator)
 *                .setBlue(blue / denominator);
 *        int alpha = color.getAlpha();
 *        if (alpha != 255) {
 *          result.setAlpha(
 *              FloatValue
 *                  .newBuilder()
 *                  .setValue(((float) alpha) / denominator)
 *                  .build());
 *        }
 *        return resultBuilder.build();
 *      }
 *      // ...
 *
 * Example (iOS / Obj-C):
 *
 *      // ...
 *      static UIColor* fromProto(Color* protocolor) {
 *         float red = [protocolor red];
 *         float green = [protocolor green];
 *         float blue = [protocolor blue];
 *         FloatValue* alpha_wrapper = [protocolor alpha];
 *         float alpha = 1.0;
 *         if (alpha_wrapper != nil) {
 *           alpha = [alpha_wrapper value];
 *         }
 *         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
 *      }
 *
 *      static Color* toProto(UIColor* color) {
 *          CGFloat red, green, blue, alpha;
 *          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
 *            return nil;
 *          }
 *          Color* result = [[Color alloc] init];
 *          [result setRed:red];
 *          [result setGreen:green];
 *          [result setBlue:blue];
 *          if (alpha <= 0.9999) {
 *            [result setAlpha:floatWrapperWithValue(alpha)];
 *          }
 *          [result autorelease];
 *          return result;
 *     }
 *     // ...
 *
 *  Example (JavaScript):
 *
 *     // ...
 *
 *     var protoToCssColor = function(rgb_color) {
 *        var redFrac = rgb_color.red || 0.0;
 *        var greenFrac = rgb_color.green || 0.0;
 *        var blueFrac = rgb_color.blue || 0.0;
 *        var red = Math.floor(redFrac * 255);
 *        var green = Math.floor(greenFrac * 255);
 *        var blue = Math.floor(blueFrac * 255);
 *
 *        if (!('alpha' in rgb_color)) {
 *           return rgbToCssColor_(red, green, blue);
 *        }
 *
 *        var alphaFrac = rgb_color.alpha.value || 0.0;
 *        var rgbParams = [red, green, blue].join(',');
 *        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
 *     };
 *
 *     var rgbToCssColor_ = function(red, green, blue) {
 *       var rgbNumber = new Number((red << 16) | (green << 8) | blue);
 *       var hexString = rgbNumber.toString(16);
 *       var missingZeros = 6 - hexString.length;
 *       var resultBuilder = ['#'];
 *       for (var i = 0; i < missingZeros; i++) {
 *          resultBuilder.push('0');
 *       }
 *       resultBuilder.push(hexString);
 *       return resultBuilder.join('');
 *     };
 *
 *     // ...
 *
 * @generated from protobuf message google.type.Color
 */
export interface Color {
    /**
     * The amount of red in the color as a value in the interval [0, 1].
     *
     * @generated from protobuf field: float red = 1;
     */
    red: number;
    /**
     * The amount of green in the color as a value in the interval [0, 1].
     *
     * @generated from protobuf field: float green = 2;
     */
    green: number;
    /**
     * The amount of blue in the color as a value in the interval [0, 1].
     *
     * @generated from protobuf field: float blue = 3;
     */
    blue: number;
    /**
     * The fraction of this color that should be applied to the pixel. That is,
     * the final pixel color is defined by the equation:
     *
     *   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
     *
     * This means that a value of 1.0 corresponds to a solid color, whereas
     * a value of 0.0 corresponds to a completely transparent color. This
     * uses a wrapper message rather than a simple float scalar so that it is
     * possible to distinguish between a default value and the value being unset.
     * If omitted, this color object is to be rendered as a solid color
     * (as if the alpha value had been explicitly given with a value of 1.0).
     *
     * @generated from protobuf field: google.protobuf.FloatValue alpha = 4;
     */
    alpha?: FloatValue;
}
// @generated message type with reflection information, may provide speed optimized methods
class Color$Type extends MessageType<Color> {
    constructor() {
        super("google.type.Color", [
            { no: 1, name: "red", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "green", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "blue", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "alpha", kind: "message", T: () => FloatValue }
        ]);
    }
    /**
     * Returns hexadecimal notation of the color: #RRGGBB[AA]
     *
     * R (red), G (green), B (blue), and A (alpha) are hexadecimal characters
     * (0–9, A–F). A is optional. For example, #ff0000 is equivalent to
     * #ff0000ff.
     *
     * See https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#RGB_colors
     */
    toHex(message: Color): string {
        let hex = [
            message.red.toString(16), message.green.toString(16), message.blue.toString(16),
        ];
        if (message.alpha) {
            let alpha = Math.max(Math.min(message.alpha.value, 1), 0);
            hex.push(Math.round(alpha * 255).toString(16));
        }
        return "#" + hex.map(i => i.length < 2 ? "0" + i : i).join("");
    }
    /**
     * Parses a hexadecimal color notation.
     *
     * Recognizes the following forms:
     * - three-digit  (#RGB)
     * - six-digit (#RRGGBB)
     * - four-digit  (#RGBA)
     * - eight-digit (#RRGGBBAA)
     */
    fromHex(hex: string): Color {
        if (/^#(?:[0-9a-fA-F]{3}){1}$/.test(hex)) {
            return {
                red: parseInt(hex.substring(1, 2) + hex.substring(1, 2), 16), green: parseInt(hex.substring(2, 3) + hex.substring(2, 3), 16), blue: parseInt(hex.substring(3, 4) + hex.substring(3, 4), 16),
            };
        }
        else if (/^#(?:[0-9a-fA-F]{3}){2}$/.test(hex)) {
            return {
                red: parseInt(hex.substring(1, 3), 16), green: parseInt(hex.substring(3, 5), 16), blue: parseInt(hex.substring(5, 7), 16),
            };
        }
        else if (/^#(?:[0-9a-fA-F]{4}){1}$/.test(hex)) {
            return {
                red: parseInt(hex.substring(1, 2) + hex.substring(1, 2), 16), green: parseInt(hex.substring(2, 3) + hex.substring(2, 3), 16), blue: parseInt(hex.substring(3, 4) + hex.substring(3, 4), 16), alpha: {
                    value: parseInt(hex.substring(4, 5) + hex.substring(4, 5), 16) / 255,
                }
            };
        }
        else if (/^#(?:[0-9a-fA-F]{4}){2}$/.test(hex)) {
            return {
                red: parseInt(hex.substring(1, 3), 16), green: parseInt(hex.substring(3, 5), 16), blue: parseInt(hex.substring(5, 7), 16), alpha: {
                    value: parseInt(hex.substring(7, 9), 16) / 255,
                }
            };
        }
        throw new Error("invalid hex color");
    }
    create(value?: PartialMessage<Color>): Color {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.red = 0;
        message.green = 0;
        message.blue = 0;
        if (value !== undefined)
            reflectionMergePartial<Color>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Color): Color {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float red */ 1:
                    message.red = reader.float();
                    break;
                case /* float green */ 2:
                    message.green = reader.float();
                    break;
                case /* float blue */ 3:
                    message.blue = reader.float();
                    break;
                case /* google.protobuf.FloatValue alpha */ 4:
                    message.alpha = FloatValue.internalBinaryRead(reader, reader.uint32(), options, message.alpha);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Color, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float red = 1; */
        if (message.red !== 0)
            writer.tag(1, WireType.Bit32).float(message.red);
        /* float green = 2; */
        if (message.green !== 0)
            writer.tag(2, WireType.Bit32).float(message.green);
        /* float blue = 3; */
        if (message.blue !== 0)
            writer.tag(3, WireType.Bit32).float(message.blue);
        /* google.protobuf.FloatValue alpha = 4; */
        if (message.alpha)
            FloatValue.internalBinaryWrite(message.alpha, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.type.Color
 */
export const Color = new Color$Type();
