// @generated by protobuf-ts 2.9.5
// @generated from protobuf file "service-style-all.proto" (package "spec", syntax proto3)
// tslint:disable
import { AllStyleService } from "./service-style-all";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { Int32Value } from "./google/protobuf/wrappers";
import type { StringValue } from "./google/protobuf/wrappers";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service spec.AllStyleService
 */
export interface IAllStyleServiceClient {
    /**
     * @generated from protobuf rpc: Unary(google.protobuf.StringValue) returns (google.protobuf.Int32Value);
     */
    unary(input: StringValue, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Int32Value) => void): grpc.ClientUnaryCall;
    unary(input: StringValue, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Int32Value) => void): grpc.ClientUnaryCall;
    unary(input: StringValue, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Int32Value) => void): grpc.ClientUnaryCall;
    unary(input: StringValue, callback: (err: grpc.ServiceError | null, value?: Int32Value) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: ServerStream(google.protobuf.StringValue) returns (stream google.protobuf.Int32Value);
     */
    serverStream(input: StringValue, metadata?: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientReadableStream<Int32Value>;
    serverStream(input: StringValue, options?: grpc.CallOptions): grpc.ClientReadableStream<Int32Value>;
    /**
     * @generated from protobuf rpc: ClientStream(stream google.protobuf.StringValue) returns (google.protobuf.Int32Value);
     */
    clientStream(metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Int32Value) => void): grpc.ClientWritableStream<StringValue>;
    clientStream(metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Int32Value) => void): grpc.ClientWritableStream<StringValue>;
    clientStream(options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Int32Value) => void): grpc.ClientWritableStream<StringValue>;
    clientStream(callback: (err: grpc.ServiceError | null, value?: Int32Value) => void): grpc.ClientWritableStream<StringValue>;
    /**
     * @generated from protobuf rpc: Bidi(stream google.protobuf.StringValue) returns (stream google.protobuf.Int32Value);
     */
    bidi(metadata: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientDuplexStream<StringValue, Int32Value>;
    bidi(options?: grpc.CallOptions): grpc.ClientDuplexStream<StringValue, Int32Value>;
}
/**
 * @generated from protobuf service spec.AllStyleService
 */
export class AllStyleServiceClient extends grpc.Client implements IAllStyleServiceClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: Unary(google.protobuf.StringValue) returns (google.protobuf.Int32Value);
     */
    unary(input: StringValue, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Int32Value) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Int32Value) => void), callback?: ((err: grpc.ServiceError | null, value?: Int32Value) => void)): grpc.ClientUnaryCall {
        const method = AllStyleService.methods[0];
        return this.makeUnaryRequest<StringValue, Int32Value>(`/${AllStyleService.typeName}/${method.name}`, (value: StringValue): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Int32Value => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: ServerStream(google.protobuf.StringValue) returns (stream google.protobuf.Int32Value);
     */
    serverStream(input: StringValue, metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientReadableStream<Int32Value> {
        const method = AllStyleService.methods[1];
        return this.makeServerStreamRequest<StringValue, Int32Value>(`/${AllStyleService.typeName}/${method.name}`, (value: StringValue): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Int32Value => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), options);
    }
    /**
     * @generated from protobuf rpc: ClientStream(stream google.protobuf.StringValue) returns (google.protobuf.Int32Value);
     */
    clientStream(metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Int32Value) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Int32Value) => void), callback?: ((err: grpc.ServiceError | null, value?: Int32Value) => void)): grpc.ClientWritableStream<StringValue> {
        const method = AllStyleService.methods[2];
        return this.makeClientStreamRequest<StringValue, Int32Value>(`/${AllStyleService.typeName}/${method.name}`, (value: StringValue): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Int32Value => method.O.fromBinary(value, this._binaryOptions), (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: Bidi(stream google.protobuf.StringValue) returns (stream google.protobuf.Int32Value);
     */
    bidi(metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientDuplexStream<StringValue, Int32Value> {
        const method = AllStyleService.methods[3];
        return this.makeBidiStreamRequest<StringValue, Int32Value>(`/${AllStyleService.typeName}/${method.name}`, (value: StringValue): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Int32Value => method.O.fromBinary(value, this._binaryOptions), (metadata as any), options);
    }
}
