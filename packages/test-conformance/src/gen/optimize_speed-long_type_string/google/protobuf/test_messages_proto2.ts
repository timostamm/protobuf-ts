// @generated by protobuf-ts 2.9.0 with parameter long_type_string,optimize_speed,generate_dependencies
// @generated from protobuf file "google/protobuf/test_messages_proto2.proto" (package "protobuf_test_messages.proto2", syntax proto2)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Test schema for proto2 messages.  This test schema is used by:
//
// - conformance tests
//
//
//
// LINT: ALLOW_GROUPS
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * This proto includes every type of field in both singular and repeated
 * forms.
 *
 * Also, crucially, all messages and enums in this file are eventually
 * submessages of this message.  So for example, a fuzz test of TestAllTypes
 * could trigger bugs that occur in any message type in this file.  We verify
 * this stays true in a unit test.
 *
 * @generated from protobuf message protobuf_test_messages.proto2.TestAllTypesProto2
 */
export interface TestAllTypesProto2 {
    /**
     * Singular
     *
     * @generated from protobuf field: optional int32 optional_int32 = 1;
     */
    optionalInt32?: number;
    /**
     * @generated from protobuf field: optional int64 optional_int64 = 2;
     */
    optionalInt64?: string;
    /**
     * @generated from protobuf field: optional uint32 optional_uint32 = 3;
     */
    optionalUint32?: number;
    /**
     * @generated from protobuf field: optional uint64 optional_uint64 = 4;
     */
    optionalUint64?: string;
    /**
     * @generated from protobuf field: optional sint32 optional_sint32 = 5;
     */
    optionalSint32?: number;
    /**
     * @generated from protobuf field: optional sint64 optional_sint64 = 6;
     */
    optionalSint64?: string;
    /**
     * @generated from protobuf field: optional fixed32 optional_fixed32 = 7;
     */
    optionalFixed32?: number;
    /**
     * @generated from protobuf field: optional fixed64 optional_fixed64 = 8;
     */
    optionalFixed64?: string;
    /**
     * @generated from protobuf field: optional sfixed32 optional_sfixed32 = 9;
     */
    optionalSfixed32?: number;
    /**
     * @generated from protobuf field: optional sfixed64 optional_sfixed64 = 10;
     */
    optionalSfixed64?: string;
    /**
     * @generated from protobuf field: optional float optional_float = 11;
     */
    optionalFloat?: number;
    /**
     * @generated from protobuf field: optional double optional_double = 12;
     */
    optionalDouble?: number;
    /**
     * @generated from protobuf field: optional bool optional_bool = 13;
     */
    optionalBool?: boolean;
    /**
     * @generated from protobuf field: optional string optional_string = 14;
     */
    optionalString?: string;
    /**
     * @generated from protobuf field: optional bytes optional_bytes = 15;
     */
    optionalBytes?: Uint8Array;
    /**
     * @generated from protobuf field: optional protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage optional_nested_message = 18;
     */
    optionalNestedMessage?: TestAllTypesProto2_NestedMessage;
    /**
     * @generated from protobuf field: optional protobuf_test_messages.proto2.ForeignMessageProto2 optional_foreign_message = 19;
     */
    optionalForeignMessage?: ForeignMessageProto2;
    /**
     * @generated from protobuf field: optional protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum optional_nested_enum = 21;
     */
    optionalNestedEnum?: TestAllTypesProto2_NestedEnum;
    /**
     * @generated from protobuf field: optional protobuf_test_messages.proto2.ForeignEnumProto2 optional_foreign_enum = 22;
     */
    optionalForeignEnum?: ForeignEnumProto2;
    /**
     * @generated from protobuf field: optional string optional_string_piece = 24;
     */
    optionalStringPiece?: string;
    /**
     * @generated from protobuf field: optional string optional_cord = 25;
     */
    optionalCord?: string;
    /**
     * @generated from protobuf field: optional protobuf_test_messages.proto2.TestAllTypesProto2 recursive_message = 27;
     */
    recursiveMessage?: TestAllTypesProto2;
    /**
     * Repeated
     *
     * @generated from protobuf field: repeated int32 repeated_int32 = 31;
     */
    repeatedInt32: number[];
    /**
     * @generated from protobuf field: repeated int64 repeated_int64 = 32;
     */
    repeatedInt64: string[];
    /**
     * @generated from protobuf field: repeated uint32 repeated_uint32 = 33;
     */
    repeatedUint32: number[];
    /**
     * @generated from protobuf field: repeated uint64 repeated_uint64 = 34;
     */
    repeatedUint64: string[];
    /**
     * @generated from protobuf field: repeated sint32 repeated_sint32 = 35;
     */
    repeatedSint32: number[];
    /**
     * @generated from protobuf field: repeated sint64 repeated_sint64 = 36;
     */
    repeatedSint64: string[];
    /**
     * @generated from protobuf field: repeated fixed32 repeated_fixed32 = 37;
     */
    repeatedFixed32: number[];
    /**
     * @generated from protobuf field: repeated fixed64 repeated_fixed64 = 38;
     */
    repeatedFixed64: string[];
    /**
     * @generated from protobuf field: repeated sfixed32 repeated_sfixed32 = 39;
     */
    repeatedSfixed32: number[];
    /**
     * @generated from protobuf field: repeated sfixed64 repeated_sfixed64 = 40;
     */
    repeatedSfixed64: string[];
    /**
     * @generated from protobuf field: repeated float repeated_float = 41;
     */
    repeatedFloat: number[];
    /**
     * @generated from protobuf field: repeated double repeated_double = 42;
     */
    repeatedDouble: number[];
    /**
     * @generated from protobuf field: repeated bool repeated_bool = 43;
     */
    repeatedBool: boolean[];
    /**
     * @generated from protobuf field: repeated string repeated_string = 44;
     */
    repeatedString: string[];
    /**
     * @generated from protobuf field: repeated bytes repeated_bytes = 45;
     */
    repeatedBytes: Uint8Array[];
    /**
     * @generated from protobuf field: repeated protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage repeated_nested_message = 48;
     */
    repeatedNestedMessage: TestAllTypesProto2_NestedMessage[];
    /**
     * @generated from protobuf field: repeated protobuf_test_messages.proto2.ForeignMessageProto2 repeated_foreign_message = 49;
     */
    repeatedForeignMessage: ForeignMessageProto2[];
    /**
     * @generated from protobuf field: repeated protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum repeated_nested_enum = 51;
     */
    repeatedNestedEnum: TestAllTypesProto2_NestedEnum[];
    /**
     * @generated from protobuf field: repeated protobuf_test_messages.proto2.ForeignEnumProto2 repeated_foreign_enum = 52;
     */
    repeatedForeignEnum: ForeignEnumProto2[];
    /**
     * @generated from protobuf field: repeated string repeated_string_piece = 54;
     */
    repeatedStringPiece: string[];
    /**
     * @generated from protobuf field: repeated string repeated_cord = 55;
     */
    repeatedCord: string[];
    /**
     * Packed
     *
     * @generated from protobuf field: repeated int32 packed_int32 = 75 [packed = true];
     */
    packedInt32: number[];
    /**
     * @generated from protobuf field: repeated int64 packed_int64 = 76 [packed = true];
     */
    packedInt64: string[];
    /**
     * @generated from protobuf field: repeated uint32 packed_uint32 = 77 [packed = true];
     */
    packedUint32: number[];
    /**
     * @generated from protobuf field: repeated uint64 packed_uint64 = 78 [packed = true];
     */
    packedUint64: string[];
    /**
     * @generated from protobuf field: repeated sint32 packed_sint32 = 79 [packed = true];
     */
    packedSint32: number[];
    /**
     * @generated from protobuf field: repeated sint64 packed_sint64 = 80 [packed = true];
     */
    packedSint64: string[];
    /**
     * @generated from protobuf field: repeated fixed32 packed_fixed32 = 81 [packed = true];
     */
    packedFixed32: number[];
    /**
     * @generated from protobuf field: repeated fixed64 packed_fixed64 = 82 [packed = true];
     */
    packedFixed64: string[];
    /**
     * @generated from protobuf field: repeated sfixed32 packed_sfixed32 = 83 [packed = true];
     */
    packedSfixed32: number[];
    /**
     * @generated from protobuf field: repeated sfixed64 packed_sfixed64 = 84 [packed = true];
     */
    packedSfixed64: string[];
    /**
     * @generated from protobuf field: repeated float packed_float = 85 [packed = true];
     */
    packedFloat: number[];
    /**
     * @generated from protobuf field: repeated double packed_double = 86 [packed = true];
     */
    packedDouble: number[];
    /**
     * @generated from protobuf field: repeated bool packed_bool = 87 [packed = true];
     */
    packedBool: boolean[];
    /**
     * @generated from protobuf field: repeated protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum packed_nested_enum = 88 [packed = true];
     */
    packedNestedEnum: TestAllTypesProto2_NestedEnum[];
    /**
     * Unpacked
     *
     * @generated from protobuf field: repeated int32 unpacked_int32 = 89 [packed = false];
     */
    unpackedInt32: number[];
    /**
     * @generated from protobuf field: repeated int64 unpacked_int64 = 90 [packed = false];
     */
    unpackedInt64: string[];
    /**
     * @generated from protobuf field: repeated uint32 unpacked_uint32 = 91 [packed = false];
     */
    unpackedUint32: number[];
    /**
     * @generated from protobuf field: repeated uint64 unpacked_uint64 = 92 [packed = false];
     */
    unpackedUint64: string[];
    /**
     * @generated from protobuf field: repeated sint32 unpacked_sint32 = 93 [packed = false];
     */
    unpackedSint32: number[];
    /**
     * @generated from protobuf field: repeated sint64 unpacked_sint64 = 94 [packed = false];
     */
    unpackedSint64: string[];
    /**
     * @generated from protobuf field: repeated fixed32 unpacked_fixed32 = 95 [packed = false];
     */
    unpackedFixed32: number[];
    /**
     * @generated from protobuf field: repeated fixed64 unpacked_fixed64 = 96 [packed = false];
     */
    unpackedFixed64: string[];
    /**
     * @generated from protobuf field: repeated sfixed32 unpacked_sfixed32 = 97 [packed = false];
     */
    unpackedSfixed32: number[];
    /**
     * @generated from protobuf field: repeated sfixed64 unpacked_sfixed64 = 98 [packed = false];
     */
    unpackedSfixed64: string[];
    /**
     * @generated from protobuf field: repeated float unpacked_float = 99 [packed = false];
     */
    unpackedFloat: number[];
    /**
     * @generated from protobuf field: repeated double unpacked_double = 100 [packed = false];
     */
    unpackedDouble: number[];
    /**
     * @generated from protobuf field: repeated bool unpacked_bool = 101 [packed = false];
     */
    unpackedBool: boolean[];
    /**
     * @generated from protobuf field: repeated protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum unpacked_nested_enum = 102 [packed = false];
     */
    unpackedNestedEnum: TestAllTypesProto2_NestedEnum[];
    /**
     * Map
     *
     * @generated from protobuf field: map<int32, int32> map_int32_int32 = 56;
     */
    mapInt32Int32: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<int64, int64> map_int64_int64 = 57;
     */
    mapInt64Int64: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<uint32, uint32> map_uint32_uint32 = 58;
     */
    mapUint32Uint32: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<uint64, uint64> map_uint64_uint64 = 59;
     */
    mapUint64Uint64: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<sint32, sint32> map_sint32_sint32 = 60;
     */
    mapSint32Sint32: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<sint64, sint64> map_sint64_sint64 = 61;
     */
    mapSint64Sint64: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<fixed32, fixed32> map_fixed32_fixed32 = 62;
     */
    mapFixed32Fixed32: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<fixed64, fixed64> map_fixed64_fixed64 = 63;
     */
    mapFixed64Fixed64: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 64;
     */
    mapSfixed32Sfixed32: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 65;
     */
    mapSfixed64Sfixed64: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<int32, float> map_int32_float = 66;
     */
    mapInt32Float: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<int32, double> map_int32_double = 67;
     */
    mapInt32Double: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<bool, bool> map_bool_bool = 68;
     */
    mapBoolBool: {
        [key: string]: boolean;
    };
    /**
     * @generated from protobuf field: map<string, string> map_string_string = 69;
     */
    mapStringString: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<string, bytes> map_string_bytes = 70;
     */
    mapStringBytes: {
        [key: string]: Uint8Array;
    };
    /**
     * @generated from protobuf field: map<string, protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage> map_string_nested_message = 71;
     */
    mapStringNestedMessage: {
        [key: string]: TestAllTypesProto2_NestedMessage;
    };
    /**
     * @generated from protobuf field: map<string, protobuf_test_messages.proto2.ForeignMessageProto2> map_string_foreign_message = 72;
     */
    mapStringForeignMessage: {
        [key: string]: ForeignMessageProto2;
    };
    /**
     * @generated from protobuf field: map<string, protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum> map_string_nested_enum = 73;
     */
    mapStringNestedEnum: {
        [key: string]: TestAllTypesProto2_NestedEnum;
    };
    /**
     * @generated from protobuf field: map<string, protobuf_test_messages.proto2.ForeignEnumProto2> map_string_foreign_enum = 74;
     */
    mapStringForeignEnum: {
        [key: string]: ForeignEnumProto2;
    };
    /**
     * @generated from protobuf oneof: oneof_field
     */
    oneofField: {
        oneofKind: "oneofUint32";
        /**
         * @generated from protobuf field: uint32 oneof_uint32 = 111;
         */
        oneofUint32: number;
    } | {
        oneofKind: "oneofNestedMessage";
        /**
         * @generated from protobuf field: protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage oneof_nested_message = 112;
         */
        oneofNestedMessage: TestAllTypesProto2_NestedMessage;
    } | {
        oneofKind: "oneofString";
        /**
         * @generated from protobuf field: string oneof_string = 113;
         */
        oneofString: string;
    } | {
        oneofKind: "oneofBytes";
        /**
         * @generated from protobuf field: bytes oneof_bytes = 114;
         */
        oneofBytes: Uint8Array;
    } | {
        oneofKind: "oneofBool";
        /**
         * @generated from protobuf field: bool oneof_bool = 115;
         */
        oneofBool: boolean;
    } | {
        oneofKind: "oneofUint64";
        /**
         * @generated from protobuf field: uint64 oneof_uint64 = 116;
         */
        oneofUint64: string;
    } | {
        oneofKind: "oneofFloat";
        /**
         * @generated from protobuf field: float oneof_float = 117;
         */
        oneofFloat: number;
    } | {
        oneofKind: "oneofDouble";
        /**
         * @generated from protobuf field: double oneof_double = 118;
         */
        oneofDouble: number;
    } | {
        oneofKind: "oneofEnum";
        /**
         * @generated from protobuf field: protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum oneof_enum = 119;
         */
        oneofEnum: TestAllTypesProto2_NestedEnum;
    } | {
        oneofKind: undefined;
    };
    /**
     * default values
     *
     * @generated from protobuf field: optional int32 default_int32 = 241;
     */
    defaultInt32?: number;
    /**
     * @generated from protobuf field: optional int64 default_int64 = 242;
     */
    defaultInt64?: string;
    /**
     * @generated from protobuf field: optional uint32 default_uint32 = 243;
     */
    defaultUint32?: number;
    /**
     * @generated from protobuf field: optional uint64 default_uint64 = 244;
     */
    defaultUint64?: string;
    /**
     * @generated from protobuf field: optional sint32 default_sint32 = 245;
     */
    defaultSint32?: number;
    /**
     * @generated from protobuf field: optional sint64 default_sint64 = 246;
     */
    defaultSint64?: string;
    /**
     * @generated from protobuf field: optional fixed32 default_fixed32 = 247;
     */
    defaultFixed32?: number;
    /**
     * @generated from protobuf field: optional fixed64 default_fixed64 = 248;
     */
    defaultFixed64?: string;
    /**
     * @generated from protobuf field: optional sfixed32 default_sfixed32 = 249;
     */
    defaultSfixed32?: number;
    /**
     * @generated from protobuf field: optional sfixed64 default_sfixed64 = 250;
     */
    defaultSfixed64?: string;
    /**
     * @generated from protobuf field: optional float default_float = 251;
     */
    defaultFloat?: number;
    /**
     * @generated from protobuf field: optional double default_double = 252;
     */
    defaultDouble?: number;
    /**
     * @generated from protobuf field: optional bool default_bool = 253;
     */
    defaultBool?: boolean;
    /**
     * @generated from protobuf field: optional string default_string = 254;
     */
    defaultString?: string;
    /**
     * @generated from protobuf field: optional bytes default_bytes = 255;
     */
    defaultBytes?: Uint8Array;
    /**
     * Test field-name-to-JSON-name convention.
     * (protobuf says names can be any valid C/C++ identifier.)
     *
     * @generated from protobuf field: optional int32 fieldname1 = 401;
     */
    fieldname1?: number;
    /**
     * @generated from protobuf field: optional int32 field_name2 = 402;
     */
    fieldName2?: number;
    /**
     * @generated from protobuf field: optional int32 _field_name3 = 403;
     */
    FieldName3?: number;
    /**
     * @generated from protobuf field: optional int32 field__name4_ = 404;
     */
    fieldName4?: number;
    /**
     * @generated from protobuf field: optional int32 field0name5 = 405 [json_name = "field0name5"];
     */
    field0Name5?: number;
    /**
     * @generated from protobuf field: optional int32 field_0_name6 = 406;
     */
    field0Name6?: number;
    /**
     * @generated from protobuf field: optional int32 fieldName7 = 407;
     */
    fieldName7?: number;
    /**
     * @generated from protobuf field: optional int32 FieldName8 = 408 [json_name = "FieldName8"];
     */
    fieldName8?: number;
    /**
     * @generated from protobuf field: optional int32 field_Name9 = 409;
     */
    fieldName9?: number;
    /**
     * @generated from protobuf field: optional int32 Field_Name10 = 410 [json_name = "FieldName10"];
     */
    fieldName10?: number;
    /**
     * @generated from protobuf field: optional int32 FIELD_NAME11 = 411 [json_name = "FIELDNAME11"];
     */
    fIELDNAME11?: number;
    /**
     * @generated from protobuf field: optional int32 FIELD_name12 = 412 [json_name = "FIELDName12"];
     */
    fIELDName12?: number;
    /**
     * @generated from protobuf field: optional int32 __field_name13 = 413;
     */
    FieldName13?: number;
    /**
     * @generated from protobuf field: optional int32 __Field_name14 = 414;
     */
    FieldName14?: number;
    /**
     * @generated from protobuf field: optional int32 field__name15 = 415;
     */
    fieldName15?: number;
    /**
     * @generated from protobuf field: optional int32 field__Name16 = 416;
     */
    fieldName16?: number;
    /**
     * @generated from protobuf field: optional int32 field_name17__ = 417;
     */
    fieldName17?: number;
    /**
     * @generated from protobuf field: optional int32 Field_name18__ = 418 [json_name = "FieldName18"];
     */
    fieldName18?: number;
}
/**
 * @generated from protobuf message protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage
 */
export interface TestAllTypesProto2_NestedMessage {
    /**
     * @generated from protobuf field: optional int32 a = 1;
     */
    a?: number;
    /**
     * @generated from protobuf field: optional protobuf_test_messages.proto2.TestAllTypesProto2 corecursive = 2;
     */
    corecursive?: TestAllTypesProto2;
}
/**
 * groups
 *
 * @generated from protobuf message protobuf_test_messages.proto2.TestAllTypesProto2.Data
 */
export interface TestAllTypesProto2_Data {
    /**
     * @generated from protobuf field: optional int32 group_int32 = 202;
     */
    groupInt32?: number;
    /**
     * @generated from protobuf field: optional uint32 group_uint32 = 203;
     */
    groupUint32?: number;
}
/**
 * message_set test case.
 *
 * @generated from protobuf message protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect
 */
export interface TestAllTypesProto2_MessageSetCorrect {
}
/**
 * @generated from protobuf message protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1
 */
export interface TestAllTypesProto2_MessageSetCorrectExtension1 {
    /**
     * @generated from protobuf field: optional string str = 25;
     */
    str?: string;
}
/**
 * @generated from protobuf message protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2
 */
export interface TestAllTypesProto2_MessageSetCorrectExtension2 {
    /**
     * @generated from protobuf field: optional int32 i = 9;
     */
    i?: number;
}
/**
 * @generated from protobuf enum protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum
 */
export enum TestAllTypesProto2_NestedEnum {
    /**
     * @generated from protobuf enum value: FOO = 0;
     */
    FOO = 0,
    /**
     * @generated from protobuf enum value: BAR = 1;
     */
    BAR = 1,
    /**
     * @generated from protobuf enum value: BAZ = 2;
     */
    BAZ = 2,
    /**
     * Intentionally negative.
     *
     * @generated from protobuf enum value: NEG = -1;
     */
    NEG = -1
}
/**
 * @generated from protobuf message protobuf_test_messages.proto2.ForeignMessageProto2
 */
export interface ForeignMessageProto2 {
    /**
     * @generated from protobuf field: optional int32 c = 1;
     */
    c?: number;
}
/**
 * @generated from protobuf message protobuf_test_messages.proto2.UnknownToTestAllTypes
 */
export interface UnknownToTestAllTypes {
    /**
     * @generated from protobuf field: optional int32 optional_int32 = 1001;
     */
    optionalInt32?: number;
    /**
     * @generated from protobuf field: optional string optional_string = 1002;
     */
    optionalString?: string;
    /**
     * @generated from protobuf field: optional protobuf_test_messages.proto2.ForeignMessageProto2 nested_message = 1003;
     */
    nestedMessage?: ForeignMessageProto2;
    /**
     * @generated from protobuf field: optional bool optional_bool = 1006;
     */
    optionalBool?: boolean;
    /**
     * @generated from protobuf field: repeated int32 repeated_int32 = 1011;
     */
    repeatedInt32: number[];
}
/**
 * @generated from protobuf message protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup
 */
export interface UnknownToTestAllTypes_OptionalGroup {
    /**
     * @generated from protobuf field: optional int32 a = 1;
     */
    a?: number;
}
/**
 * @generated from protobuf message protobuf_test_messages.proto2.NullHypothesisProto2
 */
export interface NullHypothesisProto2 {
}
/**
 * @generated from protobuf message protobuf_test_messages.proto2.EnumOnlyProto2
 */
export interface EnumOnlyProto2 {
}
/**
 * @generated from protobuf enum protobuf_test_messages.proto2.EnumOnlyProto2.Bool
 */
export enum EnumOnlyProto2_Bool {
    /**
     * @generated from protobuf enum value: kFalse = 0;
     */
    kFalse = 0,
    /**
     * @generated from protobuf enum value: kTrue = 1;
     */
    kTrue = 1
}
/**
 * @generated from protobuf message protobuf_test_messages.proto2.OneStringProto2
 */
export interface OneStringProto2 {
    /**
     * @generated from protobuf field: optional string data = 1;
     */
    data?: string;
}
/**
 * @generated from protobuf message protobuf_test_messages.proto2.ProtoWithKeywords
 */
export interface ProtoWithKeywords {
    /**
     * @generated from protobuf field: optional int32 inline = 1;
     */
    inline?: number;
    /**
     * @generated from protobuf field: optional string concept = 2;
     */
    concept?: string;
    /**
     * @generated from protobuf field: repeated string requires = 3;
     */
    requires: string[];
}
/**
 * @generated from protobuf enum protobuf_test_messages.proto2.ForeignEnumProto2
 */
export enum ForeignEnumProto2 {
    /**
     * @generated from protobuf enum value: FOREIGN_FOO = 0;
     */
    FOREIGN_FOO = 0,
    /**
     * @generated from protobuf enum value: FOREIGN_BAR = 1;
     */
    FOREIGN_BAR = 1,
    /**
     * @generated from protobuf enum value: FOREIGN_BAZ = 2;
     */
    FOREIGN_BAZ = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class TestAllTypesProto2$Type extends MessageType<TestAllTypesProto2> {
    constructor() {
        super("protobuf_test_messages.proto2.TestAllTypesProto2", [
            { no: 1, name: "optional_int32", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "optional_int64", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/ },
            { no: 3, name: "optional_uint32", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "optional_uint64", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "optional_sint32", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 6, name: "optional_sint64", kind: "scalar", opt: true, T: 18 /*ScalarType.SINT64*/ },
            { no: 7, name: "optional_fixed32", kind: "scalar", opt: true, T: 7 /*ScalarType.FIXED32*/ },
            { no: 8, name: "optional_fixed64", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/ },
            { no: 9, name: "optional_sfixed32", kind: "scalar", opt: true, T: 15 /*ScalarType.SFIXED32*/ },
            { no: 10, name: "optional_sfixed64", kind: "scalar", opt: true, T: 16 /*ScalarType.SFIXED64*/ },
            { no: 11, name: "optional_float", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "optional_double", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "optional_bool", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "optional_string", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "optional_bytes", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 18, name: "optional_nested_message", kind: "message", T: () => TestAllTypesProto2_NestedMessage },
            { no: 19, name: "optional_foreign_message", kind: "message", T: () => ForeignMessageProto2 },
            { no: 21, name: "optional_nested_enum", kind: "enum", opt: true, T: () => ["protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum", TestAllTypesProto2_NestedEnum] },
            { no: 22, name: "optional_foreign_enum", kind: "enum", opt: true, T: () => ["protobuf_test_messages.proto2.ForeignEnumProto2", ForeignEnumProto2] },
            { no: 24, name: "optional_string_piece", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "optional_cord", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 27, name: "recursive_message", kind: "message", T: () => TestAllTypesProto2 },
            { no: 31, name: "repeated_int32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 32, name: "repeated_int64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 3 /*ScalarType.INT64*/ },
            { no: 33, name: "repeated_uint32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 34, name: "repeated_uint64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/ },
            { no: 35, name: "repeated_sint32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 17 /*ScalarType.SINT32*/ },
            { no: 36, name: "repeated_sint64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 18 /*ScalarType.SINT64*/ },
            { no: 37, name: "repeated_fixed32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 7 /*ScalarType.FIXED32*/ },
            { no: 38, name: "repeated_fixed64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 6 /*ScalarType.FIXED64*/ },
            { no: 39, name: "repeated_sfixed32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 15 /*ScalarType.SFIXED32*/ },
            { no: 40, name: "repeated_sfixed64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 16 /*ScalarType.SFIXED64*/ },
            { no: 41, name: "repeated_float", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 42, name: "repeated_double", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 43, name: "repeated_bool", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 44, name: "repeated_string", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 45, name: "repeated_bytes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },
            { no: 48, name: "repeated_nested_message", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestAllTypesProto2_NestedMessage },
            { no: 49, name: "repeated_foreign_message", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ForeignMessageProto2 },
            { no: 51, name: "repeated_nested_enum", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum", TestAllTypesProto2_NestedEnum] },
            { no: 52, name: "repeated_foreign_enum", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["protobuf_test_messages.proto2.ForeignEnumProto2", ForeignEnumProto2] },
            { no: 54, name: "repeated_string_piece", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 55, name: "repeated_cord", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 75, name: "packed_int32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 76, name: "packed_int64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/ },
            { no: 77, name: "packed_uint32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 78, name: "packed_uint64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ },
            { no: 79, name: "packed_sint32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 17 /*ScalarType.SINT32*/ },
            { no: 80, name: "packed_sint64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 18 /*ScalarType.SINT64*/ },
            { no: 81, name: "packed_fixed32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 7 /*ScalarType.FIXED32*/ },
            { no: 82, name: "packed_fixed64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 6 /*ScalarType.FIXED64*/ },
            { no: 83, name: "packed_sfixed32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 15 /*ScalarType.SFIXED32*/ },
            { no: 84, name: "packed_sfixed64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 16 /*ScalarType.SFIXED64*/ },
            { no: 85, name: "packed_float", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 86, name: "packed_double", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 87, name: "packed_bool", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 88, name: "packed_nested_enum", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum", TestAllTypesProto2_NestedEnum] },
            { no: 89, name: "unpacked_int32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 90, name: "unpacked_int64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 3 /*ScalarType.INT64*/ },
            { no: 91, name: "unpacked_uint32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 92, name: "unpacked_uint64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/ },
            { no: 93, name: "unpacked_sint32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 17 /*ScalarType.SINT32*/ },
            { no: 94, name: "unpacked_sint64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 18 /*ScalarType.SINT64*/ },
            { no: 95, name: "unpacked_fixed32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 7 /*ScalarType.FIXED32*/ },
            { no: 96, name: "unpacked_fixed64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 6 /*ScalarType.FIXED64*/ },
            { no: 97, name: "unpacked_sfixed32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 15 /*ScalarType.SFIXED32*/ },
            { no: 98, name: "unpacked_sfixed64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 16 /*ScalarType.SFIXED64*/ },
            { no: 99, name: "unpacked_float", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 100, name: "unpacked_double", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 101, name: "unpacked_bool", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 102, name: "unpacked_nested_enum", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum", TestAllTypesProto2_NestedEnum] },
            { no: 56, name: "map_int32_int32", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } },
            { no: 57, name: "map_int64_int64", kind: "map", K: 3 /*ScalarType.INT64*/, V: { kind: "scalar", T: 3 /*ScalarType.INT64*/ } },
            { no: 58, name: "map_uint32_uint32", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 59, name: "map_uint64_uint64", kind: "map", K: 4 /*ScalarType.UINT64*/, V: { kind: "scalar", T: 4 /*ScalarType.UINT64*/ } },
            { no: 60, name: "map_sint32_sint32", kind: "map", K: 17 /*ScalarType.SINT32*/, V: { kind: "scalar", T: 17 /*ScalarType.SINT32*/ } },
            { no: 61, name: "map_sint64_sint64", kind: "map", K: 18 /*ScalarType.SINT64*/, V: { kind: "scalar", T: 18 /*ScalarType.SINT64*/ } },
            { no: 62, name: "map_fixed32_fixed32", kind: "map", K: 7 /*ScalarType.FIXED32*/, V: { kind: "scalar", T: 7 /*ScalarType.FIXED32*/ } },
            { no: 63, name: "map_fixed64_fixed64", kind: "map", K: 6 /*ScalarType.FIXED64*/, V: { kind: "scalar", T: 6 /*ScalarType.FIXED64*/ } },
            { no: 64, name: "map_sfixed32_sfixed32", kind: "map", K: 15 /*ScalarType.SFIXED32*/, V: { kind: "scalar", T: 15 /*ScalarType.SFIXED32*/ } },
            { no: 65, name: "map_sfixed64_sfixed64", kind: "map", K: 16 /*ScalarType.SFIXED64*/, V: { kind: "scalar", T: 16 /*ScalarType.SFIXED64*/ } },
            { no: 66, name: "map_int32_float", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 2 /*ScalarType.FLOAT*/ } },
            { no: 67, name: "map_int32_double", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ } },
            { no: 68, name: "map_bool_bool", kind: "map", K: 8 /*ScalarType.BOOL*/, V: { kind: "scalar", T: 8 /*ScalarType.BOOL*/ } },
            { no: 69, name: "map_string_string", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 70, name: "map_string_bytes", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 12 /*ScalarType.BYTES*/ } },
            { no: 71, name: "map_string_nested_message", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => TestAllTypesProto2_NestedMessage } },
            { no: 72, name: "map_string_foreign_message", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ForeignMessageProto2 } },
            { no: 73, name: "map_string_nested_enum", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "enum", T: () => ["protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum", TestAllTypesProto2_NestedEnum] } },
            { no: 74, name: "map_string_foreign_enum", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "enum", T: () => ["protobuf_test_messages.proto2.ForeignEnumProto2", ForeignEnumProto2] } },
            { no: 111, name: "oneof_uint32", kind: "scalar", oneof: "oneofField", T: 13 /*ScalarType.UINT32*/ },
            { no: 112, name: "oneof_nested_message", kind: "message", oneof: "oneofField", T: () => TestAllTypesProto2_NestedMessage },
            { no: 113, name: "oneof_string", kind: "scalar", oneof: "oneofField", T: 9 /*ScalarType.STRING*/ },
            { no: 114, name: "oneof_bytes", kind: "scalar", oneof: "oneofField", T: 12 /*ScalarType.BYTES*/ },
            { no: 115, name: "oneof_bool", kind: "scalar", oneof: "oneofField", T: 8 /*ScalarType.BOOL*/ },
            { no: 116, name: "oneof_uint64", kind: "scalar", oneof: "oneofField", T: 4 /*ScalarType.UINT64*/ },
            { no: 117, name: "oneof_float", kind: "scalar", oneof: "oneofField", T: 2 /*ScalarType.FLOAT*/ },
            { no: 118, name: "oneof_double", kind: "scalar", oneof: "oneofField", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 119, name: "oneof_enum", kind: "enum", oneof: "oneofField", T: () => ["protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum", TestAllTypesProto2_NestedEnum] },
            { no: 241, name: "default_int32", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 242, name: "default_int64", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/ },
            { no: 243, name: "default_uint32", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 244, name: "default_uint64", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 245, name: "default_sint32", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 246, name: "default_sint64", kind: "scalar", opt: true, T: 18 /*ScalarType.SINT64*/ },
            { no: 247, name: "default_fixed32", kind: "scalar", opt: true, T: 7 /*ScalarType.FIXED32*/ },
            { no: 248, name: "default_fixed64", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/ },
            { no: 249, name: "default_sfixed32", kind: "scalar", opt: true, T: 15 /*ScalarType.SFIXED32*/ },
            { no: 250, name: "default_sfixed64", kind: "scalar", opt: true, T: 16 /*ScalarType.SFIXED64*/ },
            { no: 251, name: "default_float", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 252, name: "default_double", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 253, name: "default_bool", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 254, name: "default_string", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 255, name: "default_bytes", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 401, name: "fieldname1", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 402, name: "field_name2", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 403, name: "_field_name3", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 404, name: "field__name4_", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 405, name: "field0name5", kind: "scalar", jsonName: "field0name5", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 406, name: "field_0_name6", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 407, name: "fieldName7", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 408, name: "FieldName8", kind: "scalar", jsonName: "FieldName8", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 409, name: "field_Name9", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 410, name: "Field_Name10", kind: "scalar", jsonName: "FieldName10", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 411, name: "FIELD_NAME11", kind: "scalar", jsonName: "FIELDNAME11", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 412, name: "FIELD_name12", kind: "scalar", jsonName: "FIELDName12", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 413, name: "__field_name13", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 414, name: "__Field_name14", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 415, name: "field__name15", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 416, name: "field__Name16", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 417, name: "field_name17__", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 418, name: "Field_name18__", kind: "scalar", jsonName: "FieldName18", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestAllTypesProto2>): TestAllTypesProto2 {
        const message = { repeatedInt32: [], repeatedInt64: [], repeatedUint32: [], repeatedUint64: [], repeatedSint32: [], repeatedSint64: [], repeatedFixed32: [], repeatedFixed64: [], repeatedSfixed32: [], repeatedSfixed64: [], repeatedFloat: [], repeatedDouble: [], repeatedBool: [], repeatedString: [], repeatedBytes: [], repeatedNestedMessage: [], repeatedForeignMessage: [], repeatedNestedEnum: [], repeatedForeignEnum: [], repeatedStringPiece: [], repeatedCord: [], packedInt32: [], packedInt64: [], packedUint32: [], packedUint64: [], packedSint32: [], packedSint64: [], packedFixed32: [], packedFixed64: [], packedSfixed32: [], packedSfixed64: [], packedFloat: [], packedDouble: [], packedBool: [], packedNestedEnum: [], unpackedInt32: [], unpackedInt64: [], unpackedUint32: [], unpackedUint64: [], unpackedSint32: [], unpackedSint64: [], unpackedFixed32: [], unpackedFixed64: [], unpackedSfixed32: [], unpackedSfixed64: [], unpackedFloat: [], unpackedDouble: [], unpackedBool: [], unpackedNestedEnum: [], mapInt32Int32: {}, mapInt64Int64: {}, mapUint32Uint32: {}, mapUint64Uint64: {}, mapSint32Sint32: {}, mapSint64Sint64: {}, mapFixed32Fixed32: {}, mapFixed64Fixed64: {}, mapSfixed32Sfixed32: {}, mapSfixed64Sfixed64: {}, mapInt32Float: {}, mapInt32Double: {}, mapBoolBool: {}, mapStringString: {}, mapStringBytes: {}, mapStringNestedMessage: {}, mapStringForeignMessage: {}, mapStringNestedEnum: {}, mapStringForeignEnum: {}, oneofField: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TestAllTypesProto2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestAllTypesProto2): TestAllTypesProto2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 optional_int32 */ 1:
                    message.optionalInt32 = reader.int32();
                    break;
                case /* optional int64 optional_int64 */ 2:
                    message.optionalInt64 = reader.int64().toString();
                    break;
                case /* optional uint32 optional_uint32 */ 3:
                    message.optionalUint32 = reader.uint32();
                    break;
                case /* optional uint64 optional_uint64 */ 4:
                    message.optionalUint64 = reader.uint64().toString();
                    break;
                case /* optional sint32 optional_sint32 */ 5:
                    message.optionalSint32 = reader.sint32();
                    break;
                case /* optional sint64 optional_sint64 */ 6:
                    message.optionalSint64 = reader.sint64().toString();
                    break;
                case /* optional fixed32 optional_fixed32 */ 7:
                    message.optionalFixed32 = reader.fixed32();
                    break;
                case /* optional fixed64 optional_fixed64 */ 8:
                    message.optionalFixed64 = reader.fixed64().toString();
                    break;
                case /* optional sfixed32 optional_sfixed32 */ 9:
                    message.optionalSfixed32 = reader.sfixed32();
                    break;
                case /* optional sfixed64 optional_sfixed64 */ 10:
                    message.optionalSfixed64 = reader.sfixed64().toString();
                    break;
                case /* optional float optional_float */ 11:
                    message.optionalFloat = reader.float();
                    break;
                case /* optional double optional_double */ 12:
                    message.optionalDouble = reader.double();
                    break;
                case /* optional bool optional_bool */ 13:
                    message.optionalBool = reader.bool();
                    break;
                case /* optional string optional_string */ 14:
                    message.optionalString = reader.string();
                    break;
                case /* optional bytes optional_bytes */ 15:
                    message.optionalBytes = reader.bytes();
                    break;
                case /* optional protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage optional_nested_message */ 18:
                    message.optionalNestedMessage = TestAllTypesProto2_NestedMessage.internalBinaryRead(reader, reader.uint32(), options, message.optionalNestedMessage);
                    break;
                case /* optional protobuf_test_messages.proto2.ForeignMessageProto2 optional_foreign_message */ 19:
                    message.optionalForeignMessage = ForeignMessageProto2.internalBinaryRead(reader, reader.uint32(), options, message.optionalForeignMessage);
                    break;
                case /* optional protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum optional_nested_enum */ 21:
                    message.optionalNestedEnum = reader.int32();
                    break;
                case /* optional protobuf_test_messages.proto2.ForeignEnumProto2 optional_foreign_enum */ 22:
                    message.optionalForeignEnum = reader.int32();
                    break;
                case /* optional string optional_string_piece */ 24:
                    message.optionalStringPiece = reader.string();
                    break;
                case /* optional string optional_cord */ 25:
                    message.optionalCord = reader.string();
                    break;
                case /* optional protobuf_test_messages.proto2.TestAllTypesProto2 recursive_message */ 27:
                    message.recursiveMessage = TestAllTypesProto2.internalBinaryRead(reader, reader.uint32(), options, message.recursiveMessage);
                    break;
                case /* repeated int32 repeated_int32 */ 31:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedInt32.push(reader.int32());
                    else
                        message.repeatedInt32.push(reader.int32());
                    break;
                case /* repeated int64 repeated_int64 */ 32:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedInt64.push(reader.int64().toString());
                    else
                        message.repeatedInt64.push(reader.int64().toString());
                    break;
                case /* repeated uint32 repeated_uint32 */ 33:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedUint32.push(reader.uint32());
                    else
                        message.repeatedUint32.push(reader.uint32());
                    break;
                case /* repeated uint64 repeated_uint64 */ 34:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedUint64.push(reader.uint64().toString());
                    else
                        message.repeatedUint64.push(reader.uint64().toString());
                    break;
                case /* repeated sint32 repeated_sint32 */ 35:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSint32.push(reader.sint32());
                    else
                        message.repeatedSint32.push(reader.sint32());
                    break;
                case /* repeated sint64 repeated_sint64 */ 36:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSint64.push(reader.sint64().toString());
                    else
                        message.repeatedSint64.push(reader.sint64().toString());
                    break;
                case /* repeated fixed32 repeated_fixed32 */ 37:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFixed32.push(reader.fixed32());
                    else
                        message.repeatedFixed32.push(reader.fixed32());
                    break;
                case /* repeated fixed64 repeated_fixed64 */ 38:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFixed64.push(reader.fixed64().toString());
                    else
                        message.repeatedFixed64.push(reader.fixed64().toString());
                    break;
                case /* repeated sfixed32 repeated_sfixed32 */ 39:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSfixed32.push(reader.sfixed32());
                    else
                        message.repeatedSfixed32.push(reader.sfixed32());
                    break;
                case /* repeated sfixed64 repeated_sfixed64 */ 40:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSfixed64.push(reader.sfixed64().toString());
                    else
                        message.repeatedSfixed64.push(reader.sfixed64().toString());
                    break;
                case /* repeated float repeated_float */ 41:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFloat.push(reader.float());
                    else
                        message.repeatedFloat.push(reader.float());
                    break;
                case /* repeated double repeated_double */ 42:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedDouble.push(reader.double());
                    else
                        message.repeatedDouble.push(reader.double());
                    break;
                case /* repeated bool repeated_bool */ 43:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedBool.push(reader.bool());
                    else
                        message.repeatedBool.push(reader.bool());
                    break;
                case /* repeated string repeated_string */ 44:
                    message.repeatedString.push(reader.string());
                    break;
                case /* repeated bytes repeated_bytes */ 45:
                    message.repeatedBytes.push(reader.bytes());
                    break;
                case /* repeated protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage repeated_nested_message */ 48:
                    message.repeatedNestedMessage.push(TestAllTypesProto2_NestedMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated protobuf_test_messages.proto2.ForeignMessageProto2 repeated_foreign_message */ 49:
                    message.repeatedForeignMessage.push(ForeignMessageProto2.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum repeated_nested_enum */ 51:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedNestedEnum.push(reader.int32());
                    else
                        message.repeatedNestedEnum.push(reader.int32());
                    break;
                case /* repeated protobuf_test_messages.proto2.ForeignEnumProto2 repeated_foreign_enum */ 52:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedForeignEnum.push(reader.int32());
                    else
                        message.repeatedForeignEnum.push(reader.int32());
                    break;
                case /* repeated string repeated_string_piece */ 54:
                    message.repeatedStringPiece.push(reader.string());
                    break;
                case /* repeated string repeated_cord */ 55:
                    message.repeatedCord.push(reader.string());
                    break;
                case /* repeated int32 packed_int32 = 75 [packed = true];*/ 75:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedInt32.push(reader.int32());
                    else
                        message.packedInt32.push(reader.int32());
                    break;
                case /* repeated int64 packed_int64 = 76 [packed = true];*/ 76:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedInt64.push(reader.int64().toString());
                    else
                        message.packedInt64.push(reader.int64().toString());
                    break;
                case /* repeated uint32 packed_uint32 = 77 [packed = true];*/ 77:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedUint32.push(reader.uint32());
                    else
                        message.packedUint32.push(reader.uint32());
                    break;
                case /* repeated uint64 packed_uint64 = 78 [packed = true];*/ 78:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedUint64.push(reader.uint64().toString());
                    else
                        message.packedUint64.push(reader.uint64().toString());
                    break;
                case /* repeated sint32 packed_sint32 = 79 [packed = true];*/ 79:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedSint32.push(reader.sint32());
                    else
                        message.packedSint32.push(reader.sint32());
                    break;
                case /* repeated sint64 packed_sint64 = 80 [packed = true];*/ 80:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedSint64.push(reader.sint64().toString());
                    else
                        message.packedSint64.push(reader.sint64().toString());
                    break;
                case /* repeated fixed32 packed_fixed32 = 81 [packed = true];*/ 81:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedFixed32.push(reader.fixed32());
                    else
                        message.packedFixed32.push(reader.fixed32());
                    break;
                case /* repeated fixed64 packed_fixed64 = 82 [packed = true];*/ 82:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedFixed64.push(reader.fixed64().toString());
                    else
                        message.packedFixed64.push(reader.fixed64().toString());
                    break;
                case /* repeated sfixed32 packed_sfixed32 = 83 [packed = true];*/ 83:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedSfixed32.push(reader.sfixed32());
                    else
                        message.packedSfixed32.push(reader.sfixed32());
                    break;
                case /* repeated sfixed64 packed_sfixed64 = 84 [packed = true];*/ 84:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedSfixed64.push(reader.sfixed64().toString());
                    else
                        message.packedSfixed64.push(reader.sfixed64().toString());
                    break;
                case /* repeated float packed_float = 85 [packed = true];*/ 85:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedFloat.push(reader.float());
                    else
                        message.packedFloat.push(reader.float());
                    break;
                case /* repeated double packed_double = 86 [packed = true];*/ 86:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedDouble.push(reader.double());
                    else
                        message.packedDouble.push(reader.double());
                    break;
                case /* repeated bool packed_bool = 87 [packed = true];*/ 87:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedBool.push(reader.bool());
                    else
                        message.packedBool.push(reader.bool());
                    break;
                case /* repeated protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum packed_nested_enum = 88 [packed = true];*/ 88:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedNestedEnum.push(reader.int32());
                    else
                        message.packedNestedEnum.push(reader.int32());
                    break;
                case /* repeated int32 unpacked_int32 = 89 [packed = false];*/ 89:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unpackedInt32.push(reader.int32());
                    else
                        message.unpackedInt32.push(reader.int32());
                    break;
                case /* repeated int64 unpacked_int64 = 90 [packed = false];*/ 90:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unpackedInt64.push(reader.int64().toString());
                    else
                        message.unpackedInt64.push(reader.int64().toString());
                    break;
                case /* repeated uint32 unpacked_uint32 = 91 [packed = false];*/ 91:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unpackedUint32.push(reader.uint32());
                    else
                        message.unpackedUint32.push(reader.uint32());
                    break;
                case /* repeated uint64 unpacked_uint64 = 92 [packed = false];*/ 92:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unpackedUint64.push(reader.uint64().toString());
                    else
                        message.unpackedUint64.push(reader.uint64().toString());
                    break;
                case /* repeated sint32 unpacked_sint32 = 93 [packed = false];*/ 93:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unpackedSint32.push(reader.sint32());
                    else
                        message.unpackedSint32.push(reader.sint32());
                    break;
                case /* repeated sint64 unpacked_sint64 = 94 [packed = false];*/ 94:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unpackedSint64.push(reader.sint64().toString());
                    else
                        message.unpackedSint64.push(reader.sint64().toString());
                    break;
                case /* repeated fixed32 unpacked_fixed32 = 95 [packed = false];*/ 95:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unpackedFixed32.push(reader.fixed32());
                    else
                        message.unpackedFixed32.push(reader.fixed32());
                    break;
                case /* repeated fixed64 unpacked_fixed64 = 96 [packed = false];*/ 96:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unpackedFixed64.push(reader.fixed64().toString());
                    else
                        message.unpackedFixed64.push(reader.fixed64().toString());
                    break;
                case /* repeated sfixed32 unpacked_sfixed32 = 97 [packed = false];*/ 97:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unpackedSfixed32.push(reader.sfixed32());
                    else
                        message.unpackedSfixed32.push(reader.sfixed32());
                    break;
                case /* repeated sfixed64 unpacked_sfixed64 = 98 [packed = false];*/ 98:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unpackedSfixed64.push(reader.sfixed64().toString());
                    else
                        message.unpackedSfixed64.push(reader.sfixed64().toString());
                    break;
                case /* repeated float unpacked_float = 99 [packed = false];*/ 99:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unpackedFloat.push(reader.float());
                    else
                        message.unpackedFloat.push(reader.float());
                    break;
                case /* repeated double unpacked_double = 100 [packed = false];*/ 100:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unpackedDouble.push(reader.double());
                    else
                        message.unpackedDouble.push(reader.double());
                    break;
                case /* repeated bool unpacked_bool = 101 [packed = false];*/ 101:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unpackedBool.push(reader.bool());
                    else
                        message.unpackedBool.push(reader.bool());
                    break;
                case /* repeated protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum unpacked_nested_enum = 102 [packed = false];*/ 102:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unpackedNestedEnum.push(reader.int32());
                    else
                        message.unpackedNestedEnum.push(reader.int32());
                    break;
                case /* map<int32, int32> map_int32_int32 */ 56:
                    this.binaryReadMap56(message.mapInt32Int32, reader, options);
                    break;
                case /* map<int64, int64> map_int64_int64 */ 57:
                    this.binaryReadMap57(message.mapInt64Int64, reader, options);
                    break;
                case /* map<uint32, uint32> map_uint32_uint32 */ 58:
                    this.binaryReadMap58(message.mapUint32Uint32, reader, options);
                    break;
                case /* map<uint64, uint64> map_uint64_uint64 */ 59:
                    this.binaryReadMap59(message.mapUint64Uint64, reader, options);
                    break;
                case /* map<sint32, sint32> map_sint32_sint32 */ 60:
                    this.binaryReadMap60(message.mapSint32Sint32, reader, options);
                    break;
                case /* map<sint64, sint64> map_sint64_sint64 */ 61:
                    this.binaryReadMap61(message.mapSint64Sint64, reader, options);
                    break;
                case /* map<fixed32, fixed32> map_fixed32_fixed32 */ 62:
                    this.binaryReadMap62(message.mapFixed32Fixed32, reader, options);
                    break;
                case /* map<fixed64, fixed64> map_fixed64_fixed64 */ 63:
                    this.binaryReadMap63(message.mapFixed64Fixed64, reader, options);
                    break;
                case /* map<sfixed32, sfixed32> map_sfixed32_sfixed32 */ 64:
                    this.binaryReadMap64(message.mapSfixed32Sfixed32, reader, options);
                    break;
                case /* map<sfixed64, sfixed64> map_sfixed64_sfixed64 */ 65:
                    this.binaryReadMap65(message.mapSfixed64Sfixed64, reader, options);
                    break;
                case /* map<int32, float> map_int32_float */ 66:
                    this.binaryReadMap66(message.mapInt32Float, reader, options);
                    break;
                case /* map<int32, double> map_int32_double */ 67:
                    this.binaryReadMap67(message.mapInt32Double, reader, options);
                    break;
                case /* map<bool, bool> map_bool_bool */ 68:
                    this.binaryReadMap68(message.mapBoolBool, reader, options);
                    break;
                case /* map<string, string> map_string_string */ 69:
                    this.binaryReadMap69(message.mapStringString, reader, options);
                    break;
                case /* map<string, bytes> map_string_bytes */ 70:
                    this.binaryReadMap70(message.mapStringBytes, reader, options);
                    break;
                case /* map<string, protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage> map_string_nested_message */ 71:
                    this.binaryReadMap71(message.mapStringNestedMessage, reader, options);
                    break;
                case /* map<string, protobuf_test_messages.proto2.ForeignMessageProto2> map_string_foreign_message */ 72:
                    this.binaryReadMap72(message.mapStringForeignMessage, reader, options);
                    break;
                case /* map<string, protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum> map_string_nested_enum */ 73:
                    this.binaryReadMap73(message.mapStringNestedEnum, reader, options);
                    break;
                case /* map<string, protobuf_test_messages.proto2.ForeignEnumProto2> map_string_foreign_enum */ 74:
                    this.binaryReadMap74(message.mapStringForeignEnum, reader, options);
                    break;
                case /* uint32 oneof_uint32 */ 111:
                    message.oneofField = {
                        oneofKind: "oneofUint32",
                        oneofUint32: reader.uint32()
                    };
                    break;
                case /* protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage oneof_nested_message */ 112:
                    message.oneofField = {
                        oneofKind: "oneofNestedMessage",
                        oneofNestedMessage: TestAllTypesProto2_NestedMessage.internalBinaryRead(reader, reader.uint32(), options, (message.oneofField as any).oneofNestedMessage)
                    };
                    break;
                case /* string oneof_string */ 113:
                    message.oneofField = {
                        oneofKind: "oneofString",
                        oneofString: reader.string()
                    };
                    break;
                case /* bytes oneof_bytes */ 114:
                    message.oneofField = {
                        oneofKind: "oneofBytes",
                        oneofBytes: reader.bytes()
                    };
                    break;
                case /* bool oneof_bool */ 115:
                    message.oneofField = {
                        oneofKind: "oneofBool",
                        oneofBool: reader.bool()
                    };
                    break;
                case /* uint64 oneof_uint64 */ 116:
                    message.oneofField = {
                        oneofKind: "oneofUint64",
                        oneofUint64: reader.uint64().toString()
                    };
                    break;
                case /* float oneof_float */ 117:
                    message.oneofField = {
                        oneofKind: "oneofFloat",
                        oneofFloat: reader.float()
                    };
                    break;
                case /* double oneof_double */ 118:
                    message.oneofField = {
                        oneofKind: "oneofDouble",
                        oneofDouble: reader.double()
                    };
                    break;
                case /* protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum oneof_enum */ 119:
                    message.oneofField = {
                        oneofKind: "oneofEnum",
                        oneofEnum: reader.int32()
                    };
                    break;
                case /* optional int32 default_int32 */ 241:
                    message.defaultInt32 = reader.int32();
                    break;
                case /* optional int64 default_int64 */ 242:
                    message.defaultInt64 = reader.int64().toString();
                    break;
                case /* optional uint32 default_uint32 */ 243:
                    message.defaultUint32 = reader.uint32();
                    break;
                case /* optional uint64 default_uint64 */ 244:
                    message.defaultUint64 = reader.uint64().toString();
                    break;
                case /* optional sint32 default_sint32 */ 245:
                    message.defaultSint32 = reader.sint32();
                    break;
                case /* optional sint64 default_sint64 */ 246:
                    message.defaultSint64 = reader.sint64().toString();
                    break;
                case /* optional fixed32 default_fixed32 */ 247:
                    message.defaultFixed32 = reader.fixed32();
                    break;
                case /* optional fixed64 default_fixed64 */ 248:
                    message.defaultFixed64 = reader.fixed64().toString();
                    break;
                case /* optional sfixed32 default_sfixed32 */ 249:
                    message.defaultSfixed32 = reader.sfixed32();
                    break;
                case /* optional sfixed64 default_sfixed64 */ 250:
                    message.defaultSfixed64 = reader.sfixed64().toString();
                    break;
                case /* optional float default_float */ 251:
                    message.defaultFloat = reader.float();
                    break;
                case /* optional double default_double */ 252:
                    message.defaultDouble = reader.double();
                    break;
                case /* optional bool default_bool */ 253:
                    message.defaultBool = reader.bool();
                    break;
                case /* optional string default_string */ 254:
                    message.defaultString = reader.string();
                    break;
                case /* optional bytes default_bytes */ 255:
                    message.defaultBytes = reader.bytes();
                    break;
                case /* optional int32 fieldname1 */ 401:
                    message.fieldname1 = reader.int32();
                    break;
                case /* optional int32 field_name2 */ 402:
                    message.fieldName2 = reader.int32();
                    break;
                case /* optional int32 _field_name3 */ 403:
                    message.FieldName3 = reader.int32();
                    break;
                case /* optional int32 field__name4_ */ 404:
                    message.fieldName4 = reader.int32();
                    break;
                case /* optional int32 field0name5 = 405 [json_name = "field0name5"];*/ 405:
                    message.field0Name5 = reader.int32();
                    break;
                case /* optional int32 field_0_name6 */ 406:
                    message.field0Name6 = reader.int32();
                    break;
                case /* optional int32 fieldName7 */ 407:
                    message.fieldName7 = reader.int32();
                    break;
                case /* optional int32 FieldName8 = 408 [json_name = "FieldName8"];*/ 408:
                    message.fieldName8 = reader.int32();
                    break;
                case /* optional int32 field_Name9 */ 409:
                    message.fieldName9 = reader.int32();
                    break;
                case /* optional int32 Field_Name10 = 410 [json_name = "FieldName10"];*/ 410:
                    message.fieldName10 = reader.int32();
                    break;
                case /* optional int32 FIELD_NAME11 = 411 [json_name = "FIELDNAME11"];*/ 411:
                    message.fIELDNAME11 = reader.int32();
                    break;
                case /* optional int32 FIELD_name12 = 412 [json_name = "FIELDName12"];*/ 412:
                    message.fIELDName12 = reader.int32();
                    break;
                case /* optional int32 __field_name13 */ 413:
                    message.FieldName13 = reader.int32();
                    break;
                case /* optional int32 __Field_name14 */ 414:
                    message.FieldName14 = reader.int32();
                    break;
                case /* optional int32 field__name15 */ 415:
                    message.fieldName15 = reader.int32();
                    break;
                case /* optional int32 field__Name16 */ 416:
                    message.fieldName16 = reader.int32();
                    break;
                case /* optional int32 field_name17__ */ 417:
                    message.fieldName17 = reader.int32();
                    break;
                case /* optional int32 Field_name18__ = 418 [json_name = "FieldName18"];*/ 418:
                    message.fieldName18 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap56(map: TestAllTypesProto2["mapInt32Int32"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapInt32Int32"] | undefined, val: TestAllTypesProto2["mapInt32Int32"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_int32_int32");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap57(map: TestAllTypesProto2["mapInt64Int64"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapInt64Int64"] | undefined, val: TestAllTypesProto2["mapInt64Int64"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int64().toString();
                    break;
                case 2:
                    val = reader.int64().toString();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_int64_int64");
            }
        }
        map[key ?? "0"] = val ?? "0";
    }
    private binaryReadMap58(map: TestAllTypesProto2["mapUint32Uint32"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapUint32Uint32"] | undefined, val: TestAllTypesProto2["mapUint32Uint32"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_uint32_uint32");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap59(map: TestAllTypesProto2["mapUint64Uint64"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapUint64Uint64"] | undefined, val: TestAllTypesProto2["mapUint64Uint64"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint64().toString();
                    break;
                case 2:
                    val = reader.uint64().toString();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_uint64_uint64");
            }
        }
        map[key ?? "0"] = val ?? "0";
    }
    private binaryReadMap60(map: TestAllTypesProto2["mapSint32Sint32"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapSint32Sint32"] | undefined, val: TestAllTypesProto2["mapSint32Sint32"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.sint32();
                    break;
                case 2:
                    val = reader.sint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_sint32_sint32");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap61(map: TestAllTypesProto2["mapSint64Sint64"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapSint64Sint64"] | undefined, val: TestAllTypesProto2["mapSint64Sint64"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.sint64().toString();
                    break;
                case 2:
                    val = reader.sint64().toString();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_sint64_sint64");
            }
        }
        map[key ?? "0"] = val ?? "0";
    }
    private binaryReadMap62(map: TestAllTypesProto2["mapFixed32Fixed32"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapFixed32Fixed32"] | undefined, val: TestAllTypesProto2["mapFixed32Fixed32"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.fixed32();
                    break;
                case 2:
                    val = reader.fixed32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_fixed32_fixed32");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap63(map: TestAllTypesProto2["mapFixed64Fixed64"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapFixed64Fixed64"] | undefined, val: TestAllTypesProto2["mapFixed64Fixed64"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.fixed64().toString();
                    break;
                case 2:
                    val = reader.fixed64().toString();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_fixed64_fixed64");
            }
        }
        map[key ?? "0"] = val ?? "0";
    }
    private binaryReadMap64(map: TestAllTypesProto2["mapSfixed32Sfixed32"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapSfixed32Sfixed32"] | undefined, val: TestAllTypesProto2["mapSfixed32Sfixed32"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.sfixed32();
                    break;
                case 2:
                    val = reader.sfixed32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_sfixed32_sfixed32");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap65(map: TestAllTypesProto2["mapSfixed64Sfixed64"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapSfixed64Sfixed64"] | undefined, val: TestAllTypesProto2["mapSfixed64Sfixed64"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.sfixed64().toString();
                    break;
                case 2:
                    val = reader.sfixed64().toString();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_sfixed64_sfixed64");
            }
        }
        map[key ?? "0"] = val ?? "0";
    }
    private binaryReadMap66(map: TestAllTypesProto2["mapInt32Float"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapInt32Float"] | undefined, val: TestAllTypesProto2["mapInt32Float"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = reader.float();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_int32_float");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap67(map: TestAllTypesProto2["mapInt32Double"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapInt32Double"] | undefined, val: TestAllTypesProto2["mapInt32Double"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = reader.double();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_int32_double");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap68(map: TestAllTypesProto2["mapBoolBool"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapBoolBool"] | undefined, val: TestAllTypesProto2["mapBoolBool"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.bool().toString();
                    break;
                case 2:
                    val = reader.bool();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_bool_bool");
            }
        }
        map[key ?? "false"] = val ?? false;
    }
    private binaryReadMap69(map: TestAllTypesProto2["mapStringString"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapStringString"] | undefined, val: TestAllTypesProto2["mapStringString"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_string_string");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    private binaryReadMap70(map: TestAllTypesProto2["mapStringBytes"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapStringBytes"] | undefined, val: TestAllTypesProto2["mapStringBytes"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.bytes();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_string_bytes");
            }
        }
        map[key ?? ""] = val ?? new Uint8Array(0);
    }
    private binaryReadMap71(map: TestAllTypesProto2["mapStringNestedMessage"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapStringNestedMessage"] | undefined, val: TestAllTypesProto2["mapStringNestedMessage"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = TestAllTypesProto2_NestedMessage.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_string_nested_message");
            }
        }
        map[key ?? ""] = val ?? TestAllTypesProto2_NestedMessage.create();
    }
    private binaryReadMap72(map: TestAllTypesProto2["mapStringForeignMessage"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapStringForeignMessage"] | undefined, val: TestAllTypesProto2["mapStringForeignMessage"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = ForeignMessageProto2.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_string_foreign_message");
            }
        }
        map[key ?? ""] = val ?? ForeignMessageProto2.create();
    }
    private binaryReadMap73(map: TestAllTypesProto2["mapStringNestedEnum"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapStringNestedEnum"] | undefined, val: TestAllTypesProto2["mapStringNestedEnum"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_string_nested_enum");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    private binaryReadMap74(map: TestAllTypesProto2["mapStringForeignEnum"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestAllTypesProto2["mapStringForeignEnum"] | undefined, val: TestAllTypesProto2["mapStringForeignEnum"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_test_messages.proto2.TestAllTypesProto2.map_string_foreign_enum");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: TestAllTypesProto2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 optional_int32 = 1; */
        if (message.optionalInt32 !== undefined)
            writer.tag(1, WireType.Varint).int32(message.optionalInt32);
        /* optional int64 optional_int64 = 2; */
        if (message.optionalInt64 !== undefined)
            writer.tag(2, WireType.Varint).int64(message.optionalInt64);
        /* optional uint32 optional_uint32 = 3; */
        if (message.optionalUint32 !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.optionalUint32);
        /* optional uint64 optional_uint64 = 4; */
        if (message.optionalUint64 !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.optionalUint64);
        /* optional sint32 optional_sint32 = 5; */
        if (message.optionalSint32 !== undefined)
            writer.tag(5, WireType.Varint).sint32(message.optionalSint32);
        /* optional sint64 optional_sint64 = 6; */
        if (message.optionalSint64 !== undefined)
            writer.tag(6, WireType.Varint).sint64(message.optionalSint64);
        /* optional fixed32 optional_fixed32 = 7; */
        if (message.optionalFixed32 !== undefined)
            writer.tag(7, WireType.Bit32).fixed32(message.optionalFixed32);
        /* optional fixed64 optional_fixed64 = 8; */
        if (message.optionalFixed64 !== undefined)
            writer.tag(8, WireType.Bit64).fixed64(message.optionalFixed64);
        /* optional sfixed32 optional_sfixed32 = 9; */
        if (message.optionalSfixed32 !== undefined)
            writer.tag(9, WireType.Bit32).sfixed32(message.optionalSfixed32);
        /* optional sfixed64 optional_sfixed64 = 10; */
        if (message.optionalSfixed64 !== undefined)
            writer.tag(10, WireType.Bit64).sfixed64(message.optionalSfixed64);
        /* optional float optional_float = 11; */
        if (message.optionalFloat !== undefined)
            writer.tag(11, WireType.Bit32).float(message.optionalFloat);
        /* optional double optional_double = 12; */
        if (message.optionalDouble !== undefined)
            writer.tag(12, WireType.Bit64).double(message.optionalDouble);
        /* optional bool optional_bool = 13; */
        if (message.optionalBool !== undefined)
            writer.tag(13, WireType.Varint).bool(message.optionalBool);
        /* optional string optional_string = 14; */
        if (message.optionalString !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.optionalString);
        /* optional bytes optional_bytes = 15; */
        if (message.optionalBytes !== undefined)
            writer.tag(15, WireType.LengthDelimited).bytes(message.optionalBytes);
        /* optional protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage optional_nested_message = 18; */
        if (message.optionalNestedMessage)
            TestAllTypesProto2_NestedMessage.internalBinaryWrite(message.optionalNestedMessage, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* optional protobuf_test_messages.proto2.ForeignMessageProto2 optional_foreign_message = 19; */
        if (message.optionalForeignMessage)
            ForeignMessageProto2.internalBinaryWrite(message.optionalForeignMessage, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* optional protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum optional_nested_enum = 21; */
        if (message.optionalNestedEnum !== undefined)
            writer.tag(21, WireType.Varint).int32(message.optionalNestedEnum);
        /* optional protobuf_test_messages.proto2.ForeignEnumProto2 optional_foreign_enum = 22; */
        if (message.optionalForeignEnum !== undefined)
            writer.tag(22, WireType.Varint).int32(message.optionalForeignEnum);
        /* optional string optional_string_piece = 24; */
        if (message.optionalStringPiece !== undefined)
            writer.tag(24, WireType.LengthDelimited).string(message.optionalStringPiece);
        /* optional string optional_cord = 25; */
        if (message.optionalCord !== undefined)
            writer.tag(25, WireType.LengthDelimited).string(message.optionalCord);
        /* optional protobuf_test_messages.proto2.TestAllTypesProto2 recursive_message = 27; */
        if (message.recursiveMessage)
            TestAllTypesProto2.internalBinaryWrite(message.recursiveMessage, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 repeated_int32 = 31; */
        for (let i = 0; i < message.repeatedInt32.length; i++)
            writer.tag(31, WireType.Varint).int32(message.repeatedInt32[i]);
        /* repeated int64 repeated_int64 = 32; */
        for (let i = 0; i < message.repeatedInt64.length; i++)
            writer.tag(32, WireType.Varint).int64(message.repeatedInt64[i]);
        /* repeated uint32 repeated_uint32 = 33; */
        for (let i = 0; i < message.repeatedUint32.length; i++)
            writer.tag(33, WireType.Varint).uint32(message.repeatedUint32[i]);
        /* repeated uint64 repeated_uint64 = 34; */
        for (let i = 0; i < message.repeatedUint64.length; i++)
            writer.tag(34, WireType.Varint).uint64(message.repeatedUint64[i]);
        /* repeated sint32 repeated_sint32 = 35; */
        for (let i = 0; i < message.repeatedSint32.length; i++)
            writer.tag(35, WireType.Varint).sint32(message.repeatedSint32[i]);
        /* repeated sint64 repeated_sint64 = 36; */
        for (let i = 0; i < message.repeatedSint64.length; i++)
            writer.tag(36, WireType.Varint).sint64(message.repeatedSint64[i]);
        /* repeated fixed32 repeated_fixed32 = 37; */
        for (let i = 0; i < message.repeatedFixed32.length; i++)
            writer.tag(37, WireType.Bit32).fixed32(message.repeatedFixed32[i]);
        /* repeated fixed64 repeated_fixed64 = 38; */
        for (let i = 0; i < message.repeatedFixed64.length; i++)
            writer.tag(38, WireType.Bit64).fixed64(message.repeatedFixed64[i]);
        /* repeated sfixed32 repeated_sfixed32 = 39; */
        for (let i = 0; i < message.repeatedSfixed32.length; i++)
            writer.tag(39, WireType.Bit32).sfixed32(message.repeatedSfixed32[i]);
        /* repeated sfixed64 repeated_sfixed64 = 40; */
        for (let i = 0; i < message.repeatedSfixed64.length; i++)
            writer.tag(40, WireType.Bit64).sfixed64(message.repeatedSfixed64[i]);
        /* repeated float repeated_float = 41; */
        for (let i = 0; i < message.repeatedFloat.length; i++)
            writer.tag(41, WireType.Bit32).float(message.repeatedFloat[i]);
        /* repeated double repeated_double = 42; */
        for (let i = 0; i < message.repeatedDouble.length; i++)
            writer.tag(42, WireType.Bit64).double(message.repeatedDouble[i]);
        /* repeated bool repeated_bool = 43; */
        for (let i = 0; i < message.repeatedBool.length; i++)
            writer.tag(43, WireType.Varint).bool(message.repeatedBool[i]);
        /* repeated string repeated_string = 44; */
        for (let i = 0; i < message.repeatedString.length; i++)
            writer.tag(44, WireType.LengthDelimited).string(message.repeatedString[i]);
        /* repeated bytes repeated_bytes = 45; */
        for (let i = 0; i < message.repeatedBytes.length; i++)
            writer.tag(45, WireType.LengthDelimited).bytes(message.repeatedBytes[i]);
        /* repeated protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage repeated_nested_message = 48; */
        for (let i = 0; i < message.repeatedNestedMessage.length; i++)
            TestAllTypesProto2_NestedMessage.internalBinaryWrite(message.repeatedNestedMessage[i], writer.tag(48, WireType.LengthDelimited).fork(), options).join();
        /* repeated protobuf_test_messages.proto2.ForeignMessageProto2 repeated_foreign_message = 49; */
        for (let i = 0; i < message.repeatedForeignMessage.length; i++)
            ForeignMessageProto2.internalBinaryWrite(message.repeatedForeignMessage[i], writer.tag(49, WireType.LengthDelimited).fork(), options).join();
        /* repeated protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum repeated_nested_enum = 51; */
        for (let i = 0; i < message.repeatedNestedEnum.length; i++)
            writer.tag(51, WireType.Varint).int32(message.repeatedNestedEnum[i]);
        /* repeated protobuf_test_messages.proto2.ForeignEnumProto2 repeated_foreign_enum = 52; */
        for (let i = 0; i < message.repeatedForeignEnum.length; i++)
            writer.tag(52, WireType.Varint).int32(message.repeatedForeignEnum[i]);
        /* repeated string repeated_string_piece = 54; */
        for (let i = 0; i < message.repeatedStringPiece.length; i++)
            writer.tag(54, WireType.LengthDelimited).string(message.repeatedStringPiece[i]);
        /* repeated string repeated_cord = 55; */
        for (let i = 0; i < message.repeatedCord.length; i++)
            writer.tag(55, WireType.LengthDelimited).string(message.repeatedCord[i]);
        /* repeated int32 packed_int32 = 75 [packed = true]; */
        if (message.packedInt32.length) {
            writer.tag(75, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedInt32.length; i++)
                writer.int32(message.packedInt32[i]);
            writer.join();
        }
        /* repeated int64 packed_int64 = 76 [packed = true]; */
        if (message.packedInt64.length) {
            writer.tag(76, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedInt64.length; i++)
                writer.int64(message.packedInt64[i]);
            writer.join();
        }
        /* repeated uint32 packed_uint32 = 77 [packed = true]; */
        if (message.packedUint32.length) {
            writer.tag(77, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedUint32.length; i++)
                writer.uint32(message.packedUint32[i]);
            writer.join();
        }
        /* repeated uint64 packed_uint64 = 78 [packed = true]; */
        if (message.packedUint64.length) {
            writer.tag(78, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedUint64.length; i++)
                writer.uint64(message.packedUint64[i]);
            writer.join();
        }
        /* repeated sint32 packed_sint32 = 79 [packed = true]; */
        if (message.packedSint32.length) {
            writer.tag(79, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedSint32.length; i++)
                writer.sint32(message.packedSint32[i]);
            writer.join();
        }
        /* repeated sint64 packed_sint64 = 80 [packed = true]; */
        if (message.packedSint64.length) {
            writer.tag(80, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedSint64.length; i++)
                writer.sint64(message.packedSint64[i]);
            writer.join();
        }
        /* repeated fixed32 packed_fixed32 = 81 [packed = true]; */
        if (message.packedFixed32.length) {
            writer.tag(81, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedFixed32.length; i++)
                writer.fixed32(message.packedFixed32[i]);
            writer.join();
        }
        /* repeated fixed64 packed_fixed64 = 82 [packed = true]; */
        if (message.packedFixed64.length) {
            writer.tag(82, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedFixed64.length; i++)
                writer.fixed64(message.packedFixed64[i]);
            writer.join();
        }
        /* repeated sfixed32 packed_sfixed32 = 83 [packed = true]; */
        if (message.packedSfixed32.length) {
            writer.tag(83, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedSfixed32.length; i++)
                writer.sfixed32(message.packedSfixed32[i]);
            writer.join();
        }
        /* repeated sfixed64 packed_sfixed64 = 84 [packed = true]; */
        if (message.packedSfixed64.length) {
            writer.tag(84, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedSfixed64.length; i++)
                writer.sfixed64(message.packedSfixed64[i]);
            writer.join();
        }
        /* repeated float packed_float = 85 [packed = true]; */
        if (message.packedFloat.length) {
            writer.tag(85, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedFloat.length; i++)
                writer.float(message.packedFloat[i]);
            writer.join();
        }
        /* repeated double packed_double = 86 [packed = true]; */
        if (message.packedDouble.length) {
            writer.tag(86, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedDouble.length; i++)
                writer.double(message.packedDouble[i]);
            writer.join();
        }
        /* repeated bool packed_bool = 87 [packed = true]; */
        if (message.packedBool.length) {
            writer.tag(87, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedBool.length; i++)
                writer.bool(message.packedBool[i]);
            writer.join();
        }
        /* repeated protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum packed_nested_enum = 88 [packed = true]; */
        if (message.packedNestedEnum.length) {
            writer.tag(88, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedNestedEnum.length; i++)
                writer.int32(message.packedNestedEnum[i]);
            writer.join();
        }
        /* repeated int32 unpacked_int32 = 89 [packed = false]; */
        for (let i = 0; i < message.unpackedInt32.length; i++)
            writer.tag(89, WireType.Varint).int32(message.unpackedInt32[i]);
        /* repeated int64 unpacked_int64 = 90 [packed = false]; */
        for (let i = 0; i < message.unpackedInt64.length; i++)
            writer.tag(90, WireType.Varint).int64(message.unpackedInt64[i]);
        /* repeated uint32 unpacked_uint32 = 91 [packed = false]; */
        for (let i = 0; i < message.unpackedUint32.length; i++)
            writer.tag(91, WireType.Varint).uint32(message.unpackedUint32[i]);
        /* repeated uint64 unpacked_uint64 = 92 [packed = false]; */
        for (let i = 0; i < message.unpackedUint64.length; i++)
            writer.tag(92, WireType.Varint).uint64(message.unpackedUint64[i]);
        /* repeated sint32 unpacked_sint32 = 93 [packed = false]; */
        for (let i = 0; i < message.unpackedSint32.length; i++)
            writer.tag(93, WireType.Varint).sint32(message.unpackedSint32[i]);
        /* repeated sint64 unpacked_sint64 = 94 [packed = false]; */
        for (let i = 0; i < message.unpackedSint64.length; i++)
            writer.tag(94, WireType.Varint).sint64(message.unpackedSint64[i]);
        /* repeated fixed32 unpacked_fixed32 = 95 [packed = false]; */
        for (let i = 0; i < message.unpackedFixed32.length; i++)
            writer.tag(95, WireType.Bit32).fixed32(message.unpackedFixed32[i]);
        /* repeated fixed64 unpacked_fixed64 = 96 [packed = false]; */
        for (let i = 0; i < message.unpackedFixed64.length; i++)
            writer.tag(96, WireType.Bit64).fixed64(message.unpackedFixed64[i]);
        /* repeated sfixed32 unpacked_sfixed32 = 97 [packed = false]; */
        for (let i = 0; i < message.unpackedSfixed32.length; i++)
            writer.tag(97, WireType.Bit32).sfixed32(message.unpackedSfixed32[i]);
        /* repeated sfixed64 unpacked_sfixed64 = 98 [packed = false]; */
        for (let i = 0; i < message.unpackedSfixed64.length; i++)
            writer.tag(98, WireType.Bit64).sfixed64(message.unpackedSfixed64[i]);
        /* repeated float unpacked_float = 99 [packed = false]; */
        for (let i = 0; i < message.unpackedFloat.length; i++)
            writer.tag(99, WireType.Bit32).float(message.unpackedFloat[i]);
        /* repeated double unpacked_double = 100 [packed = false]; */
        for (let i = 0; i < message.unpackedDouble.length; i++)
            writer.tag(100, WireType.Bit64).double(message.unpackedDouble[i]);
        /* repeated bool unpacked_bool = 101 [packed = false]; */
        for (let i = 0; i < message.unpackedBool.length; i++)
            writer.tag(101, WireType.Varint).bool(message.unpackedBool[i]);
        /* repeated protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum unpacked_nested_enum = 102 [packed = false]; */
        for (let i = 0; i < message.unpackedNestedEnum.length; i++)
            writer.tag(102, WireType.Varint).int32(message.unpackedNestedEnum[i]);
        /* map<int32, int32> map_int32_int32 = 56; */
        for (let k of Object.keys(message.mapInt32Int32))
            writer.tag(56, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k)).tag(2, WireType.Varint).int32(message.mapInt32Int32[k as any]).join();
        /* map<int64, int64> map_int64_int64 = 57; */
        for (let k of Object.keys(message.mapInt64Int64))
            writer.tag(57, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int64(k).tag(2, WireType.Varint).int64(message.mapInt64Int64[k]).join();
        /* map<uint32, uint32> map_uint32_uint32 = 58; */
        for (let k of Object.keys(message.mapUint32Uint32))
            writer.tag(58, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.mapUint32Uint32[k as any]).join();
        /* map<uint64, uint64> map_uint64_uint64 = 59; */
        for (let k of Object.keys(message.mapUint64Uint64))
            writer.tag(59, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint64(k).tag(2, WireType.Varint).uint64(message.mapUint64Uint64[k]).join();
        /* map<sint32, sint32> map_sint32_sint32 = 60; */
        for (let k of Object.keys(message.mapSint32Sint32))
            writer.tag(60, WireType.LengthDelimited).fork().tag(1, WireType.Varint).sint32(parseInt(k)).tag(2, WireType.Varint).sint32(message.mapSint32Sint32[k as any]).join();
        /* map<sint64, sint64> map_sint64_sint64 = 61; */
        for (let k of Object.keys(message.mapSint64Sint64))
            writer.tag(61, WireType.LengthDelimited).fork().tag(1, WireType.Varint).sint64(k).tag(2, WireType.Varint).sint64(message.mapSint64Sint64[k]).join();
        /* map<fixed32, fixed32> map_fixed32_fixed32 = 62; */
        for (let k of Object.keys(message.mapFixed32Fixed32))
            writer.tag(62, WireType.LengthDelimited).fork().tag(1, WireType.Bit32).fixed32(parseInt(k)).tag(2, WireType.Bit32).fixed32(message.mapFixed32Fixed32[k as any]).join();
        /* map<fixed64, fixed64> map_fixed64_fixed64 = 63; */
        for (let k of Object.keys(message.mapFixed64Fixed64))
            writer.tag(63, WireType.LengthDelimited).fork().tag(1, WireType.Bit64).fixed64(k).tag(2, WireType.Bit64).fixed64(message.mapFixed64Fixed64[k]).join();
        /* map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 64; */
        for (let k of Object.keys(message.mapSfixed32Sfixed32))
            writer.tag(64, WireType.LengthDelimited).fork().tag(1, WireType.Bit32).sfixed32(parseInt(k)).tag(2, WireType.Bit32).sfixed32(message.mapSfixed32Sfixed32[k as any]).join();
        /* map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 65; */
        for (let k of Object.keys(message.mapSfixed64Sfixed64))
            writer.tag(65, WireType.LengthDelimited).fork().tag(1, WireType.Bit64).sfixed64(k).tag(2, WireType.Bit64).sfixed64(message.mapSfixed64Sfixed64[k]).join();
        /* map<int32, float> map_int32_float = 66; */
        for (let k of Object.keys(message.mapInt32Float))
            writer.tag(66, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k)).tag(2, WireType.Bit32).float(message.mapInt32Float[k as any]).join();
        /* map<int32, double> map_int32_double = 67; */
        for (let k of Object.keys(message.mapInt32Double))
            writer.tag(67, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k)).tag(2, WireType.Bit64).double(message.mapInt32Double[k as any]).join();
        /* map<bool, bool> map_bool_bool = 68; */
        for (let k of Object.keys(message.mapBoolBool))
            writer.tag(68, WireType.LengthDelimited).fork().tag(1, WireType.Varint).bool(k === "true").tag(2, WireType.Varint).bool(message.mapBoolBool[k]).join();
        /* map<string, string> map_string_string = 69; */
        for (let k of Object.keys(message.mapStringString))
            writer.tag(69, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.mapStringString[k]).join();
        /* map<string, bytes> map_string_bytes = 70; */
        for (let k of Object.keys(message.mapStringBytes))
            writer.tag(70, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).bytes(message.mapStringBytes[k]).join();
        /* map<string, protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage> map_string_nested_message = 71; */
        for (let k of Object.keys(message.mapStringNestedMessage)) {
            writer.tag(71, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            TestAllTypesProto2_NestedMessage.internalBinaryWrite(message.mapStringNestedMessage[k], writer, options);
            writer.join().join();
        }
        /* map<string, protobuf_test_messages.proto2.ForeignMessageProto2> map_string_foreign_message = 72; */
        for (let k of Object.keys(message.mapStringForeignMessage)) {
            writer.tag(72, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            ForeignMessageProto2.internalBinaryWrite(message.mapStringForeignMessage[k], writer, options);
            writer.join().join();
        }
        /* map<string, protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum> map_string_nested_enum = 73; */
        for (let k of Object.keys(message.mapStringNestedEnum))
            writer.tag(73, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).int32(message.mapStringNestedEnum[k]).join();
        /* map<string, protobuf_test_messages.proto2.ForeignEnumProto2> map_string_foreign_enum = 74; */
        for (let k of Object.keys(message.mapStringForeignEnum))
            writer.tag(74, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).int32(message.mapStringForeignEnum[k]).join();
        /* uint32 oneof_uint32 = 111; */
        if (message.oneofField.oneofKind === "oneofUint32")
            writer.tag(111, WireType.Varint).uint32(message.oneofField.oneofUint32);
        /* protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage oneof_nested_message = 112; */
        if (message.oneofField.oneofKind === "oneofNestedMessage")
            TestAllTypesProto2_NestedMessage.internalBinaryWrite(message.oneofField.oneofNestedMessage, writer.tag(112, WireType.LengthDelimited).fork(), options).join();
        /* string oneof_string = 113; */
        if (message.oneofField.oneofKind === "oneofString")
            writer.tag(113, WireType.LengthDelimited).string(message.oneofField.oneofString);
        /* bytes oneof_bytes = 114; */
        if (message.oneofField.oneofKind === "oneofBytes")
            writer.tag(114, WireType.LengthDelimited).bytes(message.oneofField.oneofBytes);
        /* bool oneof_bool = 115; */
        if (message.oneofField.oneofKind === "oneofBool")
            writer.tag(115, WireType.Varint).bool(message.oneofField.oneofBool);
        /* uint64 oneof_uint64 = 116; */
        if (message.oneofField.oneofKind === "oneofUint64")
            writer.tag(116, WireType.Varint).uint64(message.oneofField.oneofUint64);
        /* float oneof_float = 117; */
        if (message.oneofField.oneofKind === "oneofFloat")
            writer.tag(117, WireType.Bit32).float(message.oneofField.oneofFloat);
        /* double oneof_double = 118; */
        if (message.oneofField.oneofKind === "oneofDouble")
            writer.tag(118, WireType.Bit64).double(message.oneofField.oneofDouble);
        /* protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum oneof_enum = 119; */
        if (message.oneofField.oneofKind === "oneofEnum")
            writer.tag(119, WireType.Varint).int32(message.oneofField.oneofEnum);
        /* optional int32 default_int32 = 241; */
        if (message.defaultInt32 !== undefined)
            writer.tag(241, WireType.Varint).int32(message.defaultInt32);
        /* optional int64 default_int64 = 242; */
        if (message.defaultInt64 !== undefined)
            writer.tag(242, WireType.Varint).int64(message.defaultInt64);
        /* optional uint32 default_uint32 = 243; */
        if (message.defaultUint32 !== undefined)
            writer.tag(243, WireType.Varint).uint32(message.defaultUint32);
        /* optional uint64 default_uint64 = 244; */
        if (message.defaultUint64 !== undefined)
            writer.tag(244, WireType.Varint).uint64(message.defaultUint64);
        /* optional sint32 default_sint32 = 245; */
        if (message.defaultSint32 !== undefined)
            writer.tag(245, WireType.Varint).sint32(message.defaultSint32);
        /* optional sint64 default_sint64 = 246; */
        if (message.defaultSint64 !== undefined)
            writer.tag(246, WireType.Varint).sint64(message.defaultSint64);
        /* optional fixed32 default_fixed32 = 247; */
        if (message.defaultFixed32 !== undefined)
            writer.tag(247, WireType.Bit32).fixed32(message.defaultFixed32);
        /* optional fixed64 default_fixed64 = 248; */
        if (message.defaultFixed64 !== undefined)
            writer.tag(248, WireType.Bit64).fixed64(message.defaultFixed64);
        /* optional sfixed32 default_sfixed32 = 249; */
        if (message.defaultSfixed32 !== undefined)
            writer.tag(249, WireType.Bit32).sfixed32(message.defaultSfixed32);
        /* optional sfixed64 default_sfixed64 = 250; */
        if (message.defaultSfixed64 !== undefined)
            writer.tag(250, WireType.Bit64).sfixed64(message.defaultSfixed64);
        /* optional float default_float = 251; */
        if (message.defaultFloat !== undefined)
            writer.tag(251, WireType.Bit32).float(message.defaultFloat);
        /* optional double default_double = 252; */
        if (message.defaultDouble !== undefined)
            writer.tag(252, WireType.Bit64).double(message.defaultDouble);
        /* optional bool default_bool = 253; */
        if (message.defaultBool !== undefined)
            writer.tag(253, WireType.Varint).bool(message.defaultBool);
        /* optional string default_string = 254; */
        if (message.defaultString !== undefined)
            writer.tag(254, WireType.LengthDelimited).string(message.defaultString);
        /* optional bytes default_bytes = 255; */
        if (message.defaultBytes !== undefined)
            writer.tag(255, WireType.LengthDelimited).bytes(message.defaultBytes);
        /* optional int32 fieldname1 = 401; */
        if (message.fieldname1 !== undefined)
            writer.tag(401, WireType.Varint).int32(message.fieldname1);
        /* optional int32 field_name2 = 402; */
        if (message.fieldName2 !== undefined)
            writer.tag(402, WireType.Varint).int32(message.fieldName2);
        /* optional int32 _field_name3 = 403; */
        if (message.FieldName3 !== undefined)
            writer.tag(403, WireType.Varint).int32(message.FieldName3);
        /* optional int32 field__name4_ = 404; */
        if (message.fieldName4 !== undefined)
            writer.tag(404, WireType.Varint).int32(message.fieldName4);
        /* optional int32 field0name5 = 405 [json_name = "field0name5"]; */
        if (message.field0Name5 !== undefined)
            writer.tag(405, WireType.Varint).int32(message.field0Name5);
        /* optional int32 field_0_name6 = 406; */
        if (message.field0Name6 !== undefined)
            writer.tag(406, WireType.Varint).int32(message.field0Name6);
        /* optional int32 fieldName7 = 407; */
        if (message.fieldName7 !== undefined)
            writer.tag(407, WireType.Varint).int32(message.fieldName7);
        /* optional int32 FieldName8 = 408 [json_name = "FieldName8"]; */
        if (message.fieldName8 !== undefined)
            writer.tag(408, WireType.Varint).int32(message.fieldName8);
        /* optional int32 field_Name9 = 409; */
        if (message.fieldName9 !== undefined)
            writer.tag(409, WireType.Varint).int32(message.fieldName9);
        /* optional int32 Field_Name10 = 410 [json_name = "FieldName10"]; */
        if (message.fieldName10 !== undefined)
            writer.tag(410, WireType.Varint).int32(message.fieldName10);
        /* optional int32 FIELD_NAME11 = 411 [json_name = "FIELDNAME11"]; */
        if (message.fIELDNAME11 !== undefined)
            writer.tag(411, WireType.Varint).int32(message.fIELDNAME11);
        /* optional int32 FIELD_name12 = 412 [json_name = "FIELDName12"]; */
        if (message.fIELDName12 !== undefined)
            writer.tag(412, WireType.Varint).int32(message.fIELDName12);
        /* optional int32 __field_name13 = 413; */
        if (message.FieldName13 !== undefined)
            writer.tag(413, WireType.Varint).int32(message.FieldName13);
        /* optional int32 __Field_name14 = 414; */
        if (message.FieldName14 !== undefined)
            writer.tag(414, WireType.Varint).int32(message.FieldName14);
        /* optional int32 field__name15 = 415; */
        if (message.fieldName15 !== undefined)
            writer.tag(415, WireType.Varint).int32(message.fieldName15);
        /* optional int32 field__Name16 = 416; */
        if (message.fieldName16 !== undefined)
            writer.tag(416, WireType.Varint).int32(message.fieldName16);
        /* optional int32 field_name17__ = 417; */
        if (message.fieldName17 !== undefined)
            writer.tag(417, WireType.Varint).int32(message.fieldName17);
        /* optional int32 Field_name18__ = 418 [json_name = "FieldName18"]; */
        if (message.fieldName18 !== undefined)
            writer.tag(418, WireType.Varint).int32(message.fieldName18);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_test_messages.proto2.TestAllTypesProto2
 */
export const TestAllTypesProto2 = new TestAllTypesProto2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestAllTypesProto2_NestedMessage$Type extends MessageType<TestAllTypesProto2_NestedMessage> {
    constructor() {
        super("protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage", [
            { no: 1, name: "a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "corecursive", kind: "message", T: () => TestAllTypesProto2 }
        ]);
    }
    create(value?: PartialMessage<TestAllTypesProto2_NestedMessage>): TestAllTypesProto2_NestedMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TestAllTypesProto2_NestedMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestAllTypesProto2_NestedMessage): TestAllTypesProto2_NestedMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 a */ 1:
                    message.a = reader.int32();
                    break;
                case /* optional protobuf_test_messages.proto2.TestAllTypesProto2 corecursive */ 2:
                    message.corecursive = TestAllTypesProto2.internalBinaryRead(reader, reader.uint32(), options, message.corecursive);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestAllTypesProto2_NestedMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 a = 1; */
        if (message.a !== undefined)
            writer.tag(1, WireType.Varint).int32(message.a);
        /* optional protobuf_test_messages.proto2.TestAllTypesProto2 corecursive = 2; */
        if (message.corecursive)
            TestAllTypesProto2.internalBinaryWrite(message.corecursive, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage
 */
export const TestAllTypesProto2_NestedMessage = new TestAllTypesProto2_NestedMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestAllTypesProto2_Data$Type extends MessageType<TestAllTypesProto2_Data> {
    constructor() {
        super("protobuf_test_messages.proto2.TestAllTypesProto2.Data", [
            { no: 202, name: "group_int32", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 203, name: "group_uint32", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestAllTypesProto2_Data>): TestAllTypesProto2_Data {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TestAllTypesProto2_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestAllTypesProto2_Data): TestAllTypesProto2_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 group_int32 */ 202:
                    message.groupInt32 = reader.int32();
                    break;
                case /* optional uint32 group_uint32 */ 203:
                    message.groupUint32 = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestAllTypesProto2_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 group_int32 = 202; */
        if (message.groupInt32 !== undefined)
            writer.tag(202, WireType.Varint).int32(message.groupInt32);
        /* optional uint32 group_uint32 = 203; */
        if (message.groupUint32 !== undefined)
            writer.tag(203, WireType.Varint).uint32(message.groupUint32);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_test_messages.proto2.TestAllTypesProto2.Data
 */
export const TestAllTypesProto2_Data = new TestAllTypesProto2_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestAllTypesProto2_MessageSetCorrect$Type extends MessageType<TestAllTypesProto2_MessageSetCorrect> {
    constructor() {
        super("protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect", []);
    }
    create(value?: PartialMessage<TestAllTypesProto2_MessageSetCorrect>): TestAllTypesProto2_MessageSetCorrect {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TestAllTypesProto2_MessageSetCorrect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestAllTypesProto2_MessageSetCorrect): TestAllTypesProto2_MessageSetCorrect {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TestAllTypesProto2_MessageSetCorrect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect
 */
export const TestAllTypesProto2_MessageSetCorrect = new TestAllTypesProto2_MessageSetCorrect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestAllTypesProto2_MessageSetCorrectExtension1$Type extends MessageType<TestAllTypesProto2_MessageSetCorrectExtension1> {
    constructor() {
        super("protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1", [
            { no: 25, name: "str", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TestAllTypesProto2_MessageSetCorrectExtension1>): TestAllTypesProto2_MessageSetCorrectExtension1 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TestAllTypesProto2_MessageSetCorrectExtension1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestAllTypesProto2_MessageSetCorrectExtension1): TestAllTypesProto2_MessageSetCorrectExtension1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string str */ 25:
                    message.str = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestAllTypesProto2_MessageSetCorrectExtension1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string str = 25; */
        if (message.str !== undefined)
            writer.tag(25, WireType.LengthDelimited).string(message.str);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1
 */
export const TestAllTypesProto2_MessageSetCorrectExtension1 = new TestAllTypesProto2_MessageSetCorrectExtension1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestAllTypesProto2_MessageSetCorrectExtension2$Type extends MessageType<TestAllTypesProto2_MessageSetCorrectExtension2> {
    constructor() {
        super("protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2", [
            { no: 9, name: "i", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestAllTypesProto2_MessageSetCorrectExtension2>): TestAllTypesProto2_MessageSetCorrectExtension2 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TestAllTypesProto2_MessageSetCorrectExtension2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestAllTypesProto2_MessageSetCorrectExtension2): TestAllTypesProto2_MessageSetCorrectExtension2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 i */ 9:
                    message.i = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestAllTypesProto2_MessageSetCorrectExtension2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 i = 9; */
        if (message.i !== undefined)
            writer.tag(9, WireType.Varint).int32(message.i);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2
 */
export const TestAllTypesProto2_MessageSetCorrectExtension2 = new TestAllTypesProto2_MessageSetCorrectExtension2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForeignMessageProto2$Type extends MessageType<ForeignMessageProto2> {
    constructor() {
        super("protobuf_test_messages.proto2.ForeignMessageProto2", [
            { no: 1, name: "c", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ForeignMessageProto2>): ForeignMessageProto2 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ForeignMessageProto2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForeignMessageProto2): ForeignMessageProto2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 c */ 1:
                    message.c = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForeignMessageProto2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 c = 1; */
        if (message.c !== undefined)
            writer.tag(1, WireType.Varint).int32(message.c);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_test_messages.proto2.ForeignMessageProto2
 */
export const ForeignMessageProto2 = new ForeignMessageProto2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnknownToTestAllTypes$Type extends MessageType<UnknownToTestAllTypes> {
    constructor() {
        super("protobuf_test_messages.proto2.UnknownToTestAllTypes", [
            { no: 1001, name: "optional_int32", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1002, name: "optional_string", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1003, name: "nested_message", kind: "message", T: () => ForeignMessageProto2 },
            { no: 1006, name: "optional_bool", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1011, name: "repeated_int32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UnknownToTestAllTypes>): UnknownToTestAllTypes {
        const message = { repeatedInt32: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnknownToTestAllTypes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnknownToTestAllTypes): UnknownToTestAllTypes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 optional_int32 */ 1001:
                    message.optionalInt32 = reader.int32();
                    break;
                case /* optional string optional_string */ 1002:
                    message.optionalString = reader.string();
                    break;
                case /* optional protobuf_test_messages.proto2.ForeignMessageProto2 nested_message */ 1003:
                    message.nestedMessage = ForeignMessageProto2.internalBinaryRead(reader, reader.uint32(), options, message.nestedMessage);
                    break;
                case /* optional bool optional_bool */ 1006:
                    message.optionalBool = reader.bool();
                    break;
                case /* repeated int32 repeated_int32 */ 1011:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedInt32.push(reader.int32());
                    else
                        message.repeatedInt32.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnknownToTestAllTypes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 optional_int32 = 1001; */
        if (message.optionalInt32 !== undefined)
            writer.tag(1001, WireType.Varint).int32(message.optionalInt32);
        /* optional string optional_string = 1002; */
        if (message.optionalString !== undefined)
            writer.tag(1002, WireType.LengthDelimited).string(message.optionalString);
        /* optional protobuf_test_messages.proto2.ForeignMessageProto2 nested_message = 1003; */
        if (message.nestedMessage)
            ForeignMessageProto2.internalBinaryWrite(message.nestedMessage, writer.tag(1003, WireType.LengthDelimited).fork(), options).join();
        /* optional bool optional_bool = 1006; */
        if (message.optionalBool !== undefined)
            writer.tag(1006, WireType.Varint).bool(message.optionalBool);
        /* repeated int32 repeated_int32 = 1011; */
        for (let i = 0; i < message.repeatedInt32.length; i++)
            writer.tag(1011, WireType.Varint).int32(message.repeatedInt32[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_test_messages.proto2.UnknownToTestAllTypes
 */
export const UnknownToTestAllTypes = new UnknownToTestAllTypes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnknownToTestAllTypes_OptionalGroup$Type extends MessageType<UnknownToTestAllTypes_OptionalGroup> {
    constructor() {
        super("protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup", [
            { no: 1, name: "a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UnknownToTestAllTypes_OptionalGroup>): UnknownToTestAllTypes_OptionalGroup {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnknownToTestAllTypes_OptionalGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnknownToTestAllTypes_OptionalGroup): UnknownToTestAllTypes_OptionalGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 a */ 1:
                    message.a = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnknownToTestAllTypes_OptionalGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 a = 1; */
        if (message.a !== undefined)
            writer.tag(1, WireType.Varint).int32(message.a);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup
 */
export const UnknownToTestAllTypes_OptionalGroup = new UnknownToTestAllTypes_OptionalGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NullHypothesisProto2$Type extends MessageType<NullHypothesisProto2> {
    constructor() {
        super("protobuf_test_messages.proto2.NullHypothesisProto2", []);
    }
    create(value?: PartialMessage<NullHypothesisProto2>): NullHypothesisProto2 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NullHypothesisProto2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NullHypothesisProto2): NullHypothesisProto2 {
        return target ?? this.create();
    }
    internalBinaryWrite(message: NullHypothesisProto2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_test_messages.proto2.NullHypothesisProto2
 */
export const NullHypothesisProto2 = new NullHypothesisProto2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnumOnlyProto2$Type extends MessageType<EnumOnlyProto2> {
    constructor() {
        super("protobuf_test_messages.proto2.EnumOnlyProto2", []);
    }
    create(value?: PartialMessage<EnumOnlyProto2>): EnumOnlyProto2 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnumOnlyProto2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnumOnlyProto2): EnumOnlyProto2 {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EnumOnlyProto2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_test_messages.proto2.EnumOnlyProto2
 */
export const EnumOnlyProto2 = new EnumOnlyProto2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OneStringProto2$Type extends MessageType<OneStringProto2> {
    constructor() {
        super("protobuf_test_messages.proto2.OneStringProto2", [
            { no: 1, name: "data", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OneStringProto2>): OneStringProto2 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OneStringProto2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OneStringProto2): OneStringProto2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string data */ 1:
                    message.data = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OneStringProto2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string data = 1; */
        if (message.data !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_test_messages.proto2.OneStringProto2
 */
export const OneStringProto2 = new OneStringProto2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProtoWithKeywords$Type extends MessageType<ProtoWithKeywords> {
    constructor() {
        super("protobuf_test_messages.proto2.ProtoWithKeywords", [
            { no: 1, name: "inline", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "concept", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "requires", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProtoWithKeywords>): ProtoWithKeywords {
        const message = { requires: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProtoWithKeywords>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtoWithKeywords): ProtoWithKeywords {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 inline */ 1:
                    message.inline = reader.int32();
                    break;
                case /* optional string concept */ 2:
                    message.concept = reader.string();
                    break;
                case /* repeated string requires */ 3:
                    message.requires.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProtoWithKeywords, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 inline = 1; */
        if (message.inline !== undefined)
            writer.tag(1, WireType.Varint).int32(message.inline);
        /* optional string concept = 2; */
        if (message.concept !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.concept);
        /* repeated string requires = 3; */
        for (let i = 0; i < message.requires.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.requires[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_test_messages.proto2.ProtoWithKeywords
 */
export const ProtoWithKeywords = new ProtoWithKeywords$Type();
