// @generated by protobuf-ts 2.9.5 with parameter force_optimize_speed,long_type_string
// @generated from protobuf file "google/protobuf/unittest_proto3.proto" (package "proto3_unittest", syntax proto3)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PublicImportMessage } from "./unittest_import_public";
import { ImportMessage } from "./unittest_import";
/**
 * This proto includes every type of field in both singular and repeated
 * forms.
 *
 * @generated from protobuf message proto3_unittest.TestAllTypes
 */
export interface TestAllTypes {
    /**
     * Singular
     *
     * @generated from protobuf field: int32 optional_int32 = 1;
     */
    optionalInt32: number;
    /**
     * @generated from protobuf field: int64 optional_int64 = 2;
     */
    optionalInt64: string;
    /**
     * @generated from protobuf field: uint32 optional_uint32 = 3;
     */
    optionalUint32: number;
    /**
     * @generated from protobuf field: uint64 optional_uint64 = 4;
     */
    optionalUint64: string;
    /**
     * @generated from protobuf field: sint32 optional_sint32 = 5;
     */
    optionalSint32: number;
    /**
     * @generated from protobuf field: sint64 optional_sint64 = 6;
     */
    optionalSint64: string;
    /**
     * @generated from protobuf field: fixed32 optional_fixed32 = 7;
     */
    optionalFixed32: number;
    /**
     * @generated from protobuf field: fixed64 optional_fixed64 = 8;
     */
    optionalFixed64: string;
    /**
     * @generated from protobuf field: sfixed32 optional_sfixed32 = 9;
     */
    optionalSfixed32: number;
    /**
     * @generated from protobuf field: sfixed64 optional_sfixed64 = 10;
     */
    optionalSfixed64: string;
    /**
     * @generated from protobuf field: float optional_float = 11;
     */
    optionalFloat: number;
    /**
     * @generated from protobuf field: double optional_double = 12;
     */
    optionalDouble: number;
    /**
     * @generated from protobuf field: bool optional_bool = 13;
     */
    optionalBool: boolean;
    /**
     * @generated from protobuf field: string optional_string = 14;
     */
    optionalString: string;
    /**
     * @generated from protobuf field: bytes optional_bytes = 15;
     */
    optionalBytes: Uint8Array;
    // Groups are not allowed in proto3.
    // optional group OptionalGroup = 16 {
    //   optional int32 a = 17;
    // }

    /**
     * @generated from protobuf field: optional proto3_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
     */
    optionalNestedMessage?: TestAllTypes_NestedMessage;
    /**
     * @generated from protobuf field: proto3_unittest.ForeignMessage optional_foreign_message = 19;
     */
    optionalForeignMessage?: ForeignMessage;
    /**
     * @generated from protobuf field: protobuf_unittest_import.ImportMessage optional_import_message = 20;
     */
    optionalImportMessage?: ImportMessage;
    /**
     * @generated from protobuf field: proto3_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
     */
    optionalNestedEnum: TestAllTypes_NestedEnum;
    /**
     * @generated from protobuf field: proto3_unittest.ForeignEnum optional_foreign_enum = 22;
     */
    optionalForeignEnum: ForeignEnum;
    // Omitted (compared to unittest.proto) because proto2 enums are not allowed
    // inside proto2 messages.
    // 
    // optional protobuf_unittest_import.ImportEnum    optional_import_enum  = 23;

    /**
     * @generated from protobuf field: string optional_string_piece = 24;
     */
    optionalStringPiece: string;
    /**
     * @generated from protobuf field: string optional_cord = 25;
     */
    optionalCord: string;
    /**
     * Defined in unittest_import_public.proto
     *
     * @generated from protobuf field: protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
     */
    optionalPublicImportMessage?: PublicImportMessage;
    /**
     * @generated from protobuf field: proto3_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27;
     */
    optionalLazyMessage?: TestAllTypes_NestedMessage;
    /**
     * @generated from protobuf field: proto3_unittest.TestAllTypes.NestedMessage optional_unverified_lazy_message = 28;
     */
    optionalUnverifiedLazyMessage?: TestAllTypes_NestedMessage;
    /**
     * @generated from protobuf field: protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115;
     */
    optionalLazyImportMessage?: ImportMessage;
    /**
     * Repeated
     *
     * @generated from protobuf field: repeated int32 repeated_int32 = 31;
     */
    repeatedInt32: number[];
    /**
     * @generated from protobuf field: repeated int64 repeated_int64 = 32;
     */
    repeatedInt64: string[];
    /**
     * @generated from protobuf field: repeated uint32 repeated_uint32 = 33;
     */
    repeatedUint32: number[];
    /**
     * @generated from protobuf field: repeated uint64 repeated_uint64 = 34;
     */
    repeatedUint64: string[];
    /**
     * @generated from protobuf field: repeated sint32 repeated_sint32 = 35;
     */
    repeatedSint32: number[];
    /**
     * @generated from protobuf field: repeated sint64 repeated_sint64 = 36;
     */
    repeatedSint64: string[];
    /**
     * @generated from protobuf field: repeated fixed32 repeated_fixed32 = 37;
     */
    repeatedFixed32: number[];
    /**
     * @generated from protobuf field: repeated fixed64 repeated_fixed64 = 38;
     */
    repeatedFixed64: string[];
    /**
     * @generated from protobuf field: repeated sfixed32 repeated_sfixed32 = 39;
     */
    repeatedSfixed32: number[];
    /**
     * @generated from protobuf field: repeated sfixed64 repeated_sfixed64 = 40;
     */
    repeatedSfixed64: string[];
    /**
     * @generated from protobuf field: repeated float repeated_float = 41;
     */
    repeatedFloat: number[];
    /**
     * @generated from protobuf field: repeated double repeated_double = 42;
     */
    repeatedDouble: number[];
    /**
     * @generated from protobuf field: repeated bool repeated_bool = 43;
     */
    repeatedBool: boolean[];
    /**
     * @generated from protobuf field: repeated string repeated_string = 44;
     */
    repeatedString: string[];
    /**
     * @generated from protobuf field: repeated bytes repeated_bytes = 45;
     */
    repeatedBytes: Uint8Array[];
    // Groups are not allowed in proto3.
    // repeated group RepeatedGroup = 46 {
    //   optional int32 a = 47;
    // }

    /**
     * @generated from protobuf field: repeated proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
     */
    repeatedNestedMessage: TestAllTypes_NestedMessage[];
    /**
     * @generated from protobuf field: repeated proto3_unittest.ForeignMessage repeated_foreign_message = 49;
     */
    repeatedForeignMessage: ForeignMessage[];
    /**
     * @generated from protobuf field: repeated protobuf_unittest_import.ImportMessage repeated_import_message = 50;
     */
    repeatedImportMessage: ImportMessage[];
    /**
     * @generated from protobuf field: repeated proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
     */
    repeatedNestedEnum: TestAllTypes_NestedEnum[];
    /**
     * @generated from protobuf field: repeated proto3_unittest.ForeignEnum repeated_foreign_enum = 52;
     */
    repeatedForeignEnum: ForeignEnum[];
    // Omitted (compared to unittest.proto) because proto2 enums are not allowed
    // inside proto2 messages.
    // 
    // repeated protobuf_unittest_import.ImportEnum    repeated_import_enum  = 53;

    /**
     * @generated from protobuf field: repeated string repeated_string_piece = 54;
     */
    repeatedStringPiece: string[];
    /**
     * @generated from protobuf field: repeated string repeated_cord = 55;
     */
    repeatedCord: string[];
    /**
     * @generated from protobuf field: repeated proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57;
     */
    repeatedLazyMessage: TestAllTypes_NestedMessage[];
    /**
     * @generated from protobuf oneof: oneof_field
     */
    oneofField: {
        oneofKind: "oneofUint32";
        /**
         * @generated from protobuf field: uint32 oneof_uint32 = 111;
         */
        oneofUint32: number;
    } | {
        oneofKind: "oneofNestedMessage";
        /**
         * @generated from protobuf field: proto3_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;
         */
        oneofNestedMessage: TestAllTypes_NestedMessage;
    } | {
        oneofKind: "oneofString";
        /**
         * @generated from protobuf field: string oneof_string = 113;
         */
        oneofString: string;
    } | {
        oneofKind: "oneofBytes";
        /**
         * @generated from protobuf field: bytes oneof_bytes = 114;
         */
        oneofBytes: Uint8Array;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message proto3_unittest.TestAllTypes.NestedMessage
 */
export interface TestAllTypes_NestedMessage {
    /**
     * The field name "b" fails to compile in proto1 because it conflicts with
     * a local variable named "b" in one of the generated methods.  Doh.
     * This file needs to compile in proto1 to test backwards-compatibility.
     *
     * @generated from protobuf field: int32 bb = 1;
     */
    bb: number;
}
/**
 * @generated from protobuf enum proto3_unittest.TestAllTypes.NestedEnum
 */
export enum TestAllTypes_NestedEnum {
    /**
     * @generated from protobuf enum value: ZERO = 0;
     */
    ZERO = 0,
    /**
     * @generated from protobuf enum value: FOO = 1;
     */
    FOO = 1,
    /**
     * @generated from protobuf enum value: BAR = 2;
     */
    BAR = 2,
    /**
     * @generated from protobuf enum value: BAZ = 3;
     */
    BAZ = 3,
    /**
     * Intentionally negative.
     *
     * @generated from protobuf enum value: NEG = -1;
     */
    NEG = -1
}
// Test messages for packed fields

/**
 * @generated from protobuf message proto3_unittest.TestPackedTypes
 */
export interface TestPackedTypes {
    /**
     * @generated from protobuf field: repeated int32 packed_int32 = 90 [packed = true];
     */
    packedInt32: number[];
    /**
     * @generated from protobuf field: repeated int64 packed_int64 = 91 [packed = true];
     */
    packedInt64: string[];
    /**
     * @generated from protobuf field: repeated uint32 packed_uint32 = 92 [packed = true];
     */
    packedUint32: number[];
    /**
     * @generated from protobuf field: repeated uint64 packed_uint64 = 93 [packed = true];
     */
    packedUint64: string[];
    /**
     * @generated from protobuf field: repeated sint32 packed_sint32 = 94 [packed = true];
     */
    packedSint32: number[];
    /**
     * @generated from protobuf field: repeated sint64 packed_sint64 = 95 [packed = true];
     */
    packedSint64: string[];
    /**
     * @generated from protobuf field: repeated fixed32 packed_fixed32 = 96 [packed = true];
     */
    packedFixed32: number[];
    /**
     * @generated from protobuf field: repeated fixed64 packed_fixed64 = 97 [packed = true];
     */
    packedFixed64: string[];
    /**
     * @generated from protobuf field: repeated sfixed32 packed_sfixed32 = 98 [packed = true];
     */
    packedSfixed32: number[];
    /**
     * @generated from protobuf field: repeated sfixed64 packed_sfixed64 = 99 [packed = true];
     */
    packedSfixed64: string[];
    /**
     * @generated from protobuf field: repeated float packed_float = 100 [packed = true];
     */
    packedFloat: number[];
    /**
     * @generated from protobuf field: repeated double packed_double = 101 [packed = true];
     */
    packedDouble: number[];
    /**
     * @generated from protobuf field: repeated bool packed_bool = 102 [packed = true];
     */
    packedBool: boolean[];
    /**
     * @generated from protobuf field: repeated proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];
     */
    packedEnum: ForeignEnum[];
}
/**
 * Explicitly set packed to false
 *
 * @generated from protobuf message proto3_unittest.TestUnpackedTypes
 */
export interface TestUnpackedTypes {
    /**
     * @generated from protobuf field: repeated int32 repeated_int32 = 1 [packed = false];
     */
    repeatedInt32: number[];
    /**
     * @generated from protobuf field: repeated int64 repeated_int64 = 2 [packed = false];
     */
    repeatedInt64: string[];
    /**
     * @generated from protobuf field: repeated uint32 repeated_uint32 = 3 [packed = false];
     */
    repeatedUint32: number[];
    /**
     * @generated from protobuf field: repeated uint64 repeated_uint64 = 4 [packed = false];
     */
    repeatedUint64: string[];
    /**
     * @generated from protobuf field: repeated sint32 repeated_sint32 = 5 [packed = false];
     */
    repeatedSint32: number[];
    /**
     * @generated from protobuf field: repeated sint64 repeated_sint64 = 6 [packed = false];
     */
    repeatedSint64: string[];
    /**
     * @generated from protobuf field: repeated fixed32 repeated_fixed32 = 7 [packed = false];
     */
    repeatedFixed32: number[];
    /**
     * @generated from protobuf field: repeated fixed64 repeated_fixed64 = 8 [packed = false];
     */
    repeatedFixed64: string[];
    /**
     * @generated from protobuf field: repeated sfixed32 repeated_sfixed32 = 9 [packed = false];
     */
    repeatedSfixed32: number[];
    /**
     * @generated from protobuf field: repeated sfixed64 repeated_sfixed64 = 10 [packed = false];
     */
    repeatedSfixed64: string[];
    /**
     * @generated from protobuf field: repeated float repeated_float = 11 [packed = false];
     */
    repeatedFloat: number[];
    /**
     * @generated from protobuf field: repeated double repeated_double = 12 [packed = false];
     */
    repeatedDouble: number[];
    /**
     * @generated from protobuf field: repeated bool repeated_bool = 13 [packed = false];
     */
    repeatedBool: boolean[];
    /**
     * @generated from protobuf field: repeated proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];
     */
    repeatedNestedEnum: TestAllTypes_NestedEnum[];
}
/**
 * This proto includes a recursively nested message.
 *
 * @generated from protobuf message proto3_unittest.NestedTestAllTypes
 */
export interface NestedTestAllTypes {
    /**
     * @generated from protobuf field: proto3_unittest.NestedTestAllTypes child = 1;
     */
    child?: NestedTestAllTypes;
    /**
     * @generated from protobuf field: proto3_unittest.TestAllTypes payload = 2;
     */
    payload?: TestAllTypes;
}
/**
 * Define these after TestAllTypes to make sure the compiler can handle
 * that.
 *
 * @generated from protobuf message proto3_unittest.ForeignMessage
 */
export interface ForeignMessage {
    /**
     * @generated from protobuf field: int32 c = 1;
     */
    c: number;
}
/**
 * TestEmptyMessage is used to test behavior of unknown fields.
 *
 * @generated from protobuf message proto3_unittest.TestEmptyMessage
 */
export interface TestEmptyMessage {
}
/**
 * TestMessageWithDummy is also used to test behavior of unknown fields.
 *
 * @generated from protobuf message proto3_unittest.TestMessageWithDummy
 */
export interface TestMessageWithDummy {
    /**
     * This field is only here for triggering copy-on-write; it's not intended to
     * be serialized.
     *
     * @generated from protobuf field: bool dummy = 536870911;
     */
    dummy: boolean;
}
/**
 * Same layout as TestOneof2 in unittest.proto to test unknown enum value
 * parsing behavior in oneof.
 *
 * @generated from protobuf message proto3_unittest.TestOneof2
 */
export interface TestOneof2 {
    /**
     * @generated from protobuf oneof: foo
     */
    foo: {
        oneofKind: "fooEnum";
        /**
         * @generated from protobuf field: proto3_unittest.TestOneof2.NestedEnum foo_enum = 6;
         */
        fooEnum: TestOneof2_NestedEnum;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum proto3_unittest.TestOneof2.NestedEnum
 */
export enum TestOneof2_NestedEnum {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: FOO = 1;
     */
    FOO = 1,
    /**
     * @generated from protobuf enum value: BAR = 2;
     */
    BAR = 2,
    /**
     * @generated from protobuf enum value: BAZ = 3;
     */
    BAZ = 3
}
/**
 * If bool fields are incorrectly assumed to have hasbits, InternalSwap would
 * result in swapping N more 32bit hasbits incorrectly. Considering padding, we
 * need many bool fields to stress this.
 *
 * @generated from protobuf message proto3_unittest.TestHasbits
 */
export interface TestHasbits {
    /**
     * @generated from protobuf field: bool b1 = 1;
     */
    b1: boolean;
    /**
     * @generated from protobuf field: bool b2 = 2;
     */
    b2: boolean;
    /**
     * @generated from protobuf field: bool b3 = 3;
     */
    b3: boolean;
    /**
     * @generated from protobuf field: bool b4 = 4;
     */
    b4: boolean;
    /**
     * @generated from protobuf field: bool b5 = 5;
     */
    b5: boolean;
    /**
     * @generated from protobuf field: bool b6 = 6;
     */
    b6: boolean;
    /**
     * @generated from protobuf field: bool b7 = 7;
     */
    b7: boolean;
    /**
     * @generated from protobuf field: bool b8 = 8;
     */
    b8: boolean;
    /**
     * @generated from protobuf field: bool b9 = 9;
     */
    b9: boolean;
    /**
     * @generated from protobuf field: bool b10 = 10;
     */
    b10: boolean;
    /**
     * @generated from protobuf field: bool b11 = 11;
     */
    b11: boolean;
    /**
     * @generated from protobuf field: bool b12 = 12;
     */
    b12: boolean;
    /**
     * @generated from protobuf field: bool b13 = 13;
     */
    b13: boolean;
    /**
     * @generated from protobuf field: bool b14 = 14;
     */
    b14: boolean;
    /**
     * @generated from protobuf field: bool b15 = 15;
     */
    b15: boolean;
    /**
     * @generated from protobuf field: bool b16 = 16;
     */
    b16: boolean;
    /**
     * @generated from protobuf field: bool b17 = 17;
     */
    b17: boolean;
    /**
     * @generated from protobuf field: bool b18 = 18;
     */
    b18: boolean;
    /**
     * @generated from protobuf field: bool b19 = 19;
     */
    b19: boolean;
    /**
     * @generated from protobuf field: bool b20 = 20;
     */
    b20: boolean;
    /**
     * @generated from protobuf field: bool b21 = 21;
     */
    b21: boolean;
    /**
     * @generated from protobuf field: bool b22 = 22;
     */
    b22: boolean;
    /**
     * @generated from protobuf field: bool b23 = 23;
     */
    b23: boolean;
    /**
     * @generated from protobuf field: bool b24 = 24;
     */
    b24: boolean;
    /**
     * @generated from protobuf field: bool b25 = 25;
     */
    b25: boolean;
    /**
     * @generated from protobuf field: bool b26 = 26;
     */
    b26: boolean;
    /**
     * @generated from protobuf field: bool b27 = 27;
     */
    b27: boolean;
    /**
     * @generated from protobuf field: bool b28 = 28;
     */
    b28: boolean;
    /**
     * @generated from protobuf field: bool b29 = 29;
     */
    b29: boolean;
    /**
     * @generated from protobuf field: bool b30 = 30;
     */
    b30: boolean;
    /**
     * @generated from protobuf field: bool b31 = 31;
     */
    b31: boolean;
    /**
     * @generated from protobuf field: bool b32 = 32;
     */
    b32: boolean;
    /**
     * @generated from protobuf field: bool b33 = 33;
     */
    b33: boolean;
    /**
     * @generated from protobuf field: bool b34 = 34;
     */
    b34: boolean;
    /**
     * @generated from protobuf field: bool b35 = 35;
     */
    b35: boolean;
    /**
     * @generated from protobuf field: bool b36 = 36;
     */
    b36: boolean;
    /**
     * @generated from protobuf field: bool b37 = 37;
     */
    b37: boolean;
    /**
     * @generated from protobuf field: bool b38 = 38;
     */
    b38: boolean;
    /**
     * @generated from protobuf field: bool b39 = 39;
     */
    b39: boolean;
    /**
     * @generated from protobuf field: bool b40 = 40;
     */
    b40: boolean;
    /**
     * @generated from protobuf field: bool b41 = 41;
     */
    b41: boolean;
    /**
     * @generated from protobuf field: bool b42 = 42;
     */
    b42: boolean;
    /**
     * @generated from protobuf field: bool b43 = 43;
     */
    b43: boolean;
    /**
     * @generated from protobuf field: bool b44 = 44;
     */
    b44: boolean;
    /**
     * @generated from protobuf field: bool b45 = 45;
     */
    b45: boolean;
    /**
     * @generated from protobuf field: bool b46 = 46;
     */
    b46: boolean;
    /**
     * @generated from protobuf field: bool b47 = 47;
     */
    b47: boolean;
    /**
     * @generated from protobuf field: bool b48 = 48;
     */
    b48: boolean;
    /**
     * @generated from protobuf field: bool b49 = 49;
     */
    b49: boolean;
    /**
     * @generated from protobuf field: bool b50 = 50;
     */
    b50: boolean;
    /**
     * @generated from protobuf field: bool b51 = 51;
     */
    b51: boolean;
    /**
     * @generated from protobuf field: bool b52 = 52;
     */
    b52: boolean;
    /**
     * @generated from protobuf field: bool b53 = 53;
     */
    b53: boolean;
    /**
     * @generated from protobuf field: bool b54 = 54;
     */
    b54: boolean;
    /**
     * @generated from protobuf field: bool b55 = 55;
     */
    b55: boolean;
    /**
     * @generated from protobuf field: bool b56 = 56;
     */
    b56: boolean;
    /**
     * @generated from protobuf field: bool b57 = 57;
     */
    b57: boolean;
    /**
     * @generated from protobuf field: bool b58 = 58;
     */
    b58: boolean;
    /**
     * @generated from protobuf field: bool b59 = 59;
     */
    b59: boolean;
    /**
     * @generated from protobuf field: bool b60 = 60;
     */
    b60: boolean;
    /**
     * @generated from protobuf field: bool b61 = 61;
     */
    b61: boolean;
    /**
     * @generated from protobuf field: bool b62 = 62;
     */
    b62: boolean;
    /**
     * @generated from protobuf field: bool b63 = 63;
     */
    b63: boolean;
    /**
     * @generated from protobuf field: bool b64 = 64;
     */
    b64: boolean;
    /**
     * @generated from protobuf field: bool b65 = 65;
     */
    b65: boolean;
    /**
     * @generated from protobuf field: bool b66 = 66;
     */
    b66: boolean;
    /**
     * @generated from protobuf field: bool b67 = 67;
     */
    b67: boolean;
    /**
     * @generated from protobuf field: bool b68 = 68;
     */
    b68: boolean;
    /**
     * @generated from protobuf field: bool b69 = 69;
     */
    b69: boolean;
    /**
     * @generated from protobuf field: proto3_unittest.TestAllTypes child = 100;
     */
    child?: TestAllTypes;
}
/**
 * @generated from protobuf enum proto3_unittest.ForeignEnum
 */
export enum ForeignEnum {
    /**
     * @generated from protobuf enum value: FOREIGN_ZERO = 0;
     */
    FOREIGN_ZERO = 0,
    /**
     * @generated from protobuf enum value: FOREIGN_FOO = 4;
     */
    FOREIGN_FOO = 4,
    /**
     * @generated from protobuf enum value: FOREIGN_BAR = 5;
     */
    FOREIGN_BAR = 5,
    /**
     * @generated from protobuf enum value: FOREIGN_BAZ = 6;
     */
    FOREIGN_BAZ = 6,
    /**
     * Large enough to escape the Boxed Integer cache.
     *
     * @generated from protobuf enum value: FOREIGN_LARGE = 123456;
     */
    FOREIGN_LARGE = 123456
}
// @generated message type with reflection information, may provide speed optimized methods
class TestAllTypes$Type extends MessageType<TestAllTypes> {
    constructor() {
        super("proto3_unittest.TestAllTypes", [
            { no: 1, name: "optional_int32", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "optional_int64", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 3, name: "optional_uint32", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "optional_uint64", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "optional_sint32", kind: "scalar", T: 17 /*ScalarType.SINT32*/ },
            { no: 6, name: "optional_sint64", kind: "scalar", T: 18 /*ScalarType.SINT64*/ },
            { no: 7, name: "optional_fixed32", kind: "scalar", T: 7 /*ScalarType.FIXED32*/ },
            { no: 8, name: "optional_fixed64", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ },
            { no: 9, name: "optional_sfixed32", kind: "scalar", T: 15 /*ScalarType.SFIXED32*/ },
            { no: 10, name: "optional_sfixed64", kind: "scalar", T: 16 /*ScalarType.SFIXED64*/ },
            { no: 11, name: "optional_float", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "optional_double", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "optional_bool", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "optional_string", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "optional_bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 18, name: "optional_nested_message", kind: "message", T: () => TestAllTypes_NestedMessage },
            { no: 19, name: "optional_foreign_message", kind: "message", T: () => ForeignMessage },
            { no: 20, name: "optional_import_message", kind: "message", T: () => ImportMessage },
            { no: 21, name: "optional_nested_enum", kind: "enum", T: () => ["proto3_unittest.TestAllTypes.NestedEnum", TestAllTypes_NestedEnum] },
            { no: 22, name: "optional_foreign_enum", kind: "enum", T: () => ["proto3_unittest.ForeignEnum", ForeignEnum] },
            { no: 24, name: "optional_string_piece", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "optional_cord", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "optional_public_import_message", kind: "message", T: () => PublicImportMessage },
            { no: 27, name: "optional_lazy_message", kind: "message", T: () => TestAllTypes_NestedMessage },
            { no: 28, name: "optional_unverified_lazy_message", kind: "message", T: () => TestAllTypes_NestedMessage },
            { no: 115, name: "optional_lazy_import_message", kind: "message", T: () => ImportMessage },
            { no: 31, name: "repeated_int32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 32, name: "repeated_int64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/ },
            { no: 33, name: "repeated_uint32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 34, name: "repeated_uint64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ },
            { no: 35, name: "repeated_sint32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 17 /*ScalarType.SINT32*/ },
            { no: 36, name: "repeated_sint64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 18 /*ScalarType.SINT64*/ },
            { no: 37, name: "repeated_fixed32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 7 /*ScalarType.FIXED32*/ },
            { no: 38, name: "repeated_fixed64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 6 /*ScalarType.FIXED64*/ },
            { no: 39, name: "repeated_sfixed32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 15 /*ScalarType.SFIXED32*/ },
            { no: 40, name: "repeated_sfixed64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 16 /*ScalarType.SFIXED64*/ },
            { no: 41, name: "repeated_float", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 42, name: "repeated_double", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 43, name: "repeated_bool", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 44, name: "repeated_string", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 45, name: "repeated_bytes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },
            { no: 48, name: "repeated_nested_message", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TestAllTypes_NestedMessage },
            { no: 49, name: "repeated_foreign_message", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ForeignMessage },
            { no: 50, name: "repeated_import_message", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ImportMessage },
            { no: 51, name: "repeated_nested_enum", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["proto3_unittest.TestAllTypes.NestedEnum", TestAllTypes_NestedEnum] },
            { no: 52, name: "repeated_foreign_enum", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["proto3_unittest.ForeignEnum", ForeignEnum] },
            { no: 54, name: "repeated_string_piece", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 55, name: "repeated_cord", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 57, name: "repeated_lazy_message", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TestAllTypes_NestedMessage },
            { no: 111, name: "oneof_uint32", kind: "scalar", oneof: "oneofField", T: 13 /*ScalarType.UINT32*/ },
            { no: 112, name: "oneof_nested_message", kind: "message", oneof: "oneofField", T: () => TestAllTypes_NestedMessage },
            { no: 113, name: "oneof_string", kind: "scalar", oneof: "oneofField", T: 9 /*ScalarType.STRING*/ },
            { no: 114, name: "oneof_bytes", kind: "scalar", oneof: "oneofField", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<TestAllTypes>): TestAllTypes {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.optionalInt32 = 0;
        message.optionalInt64 = "0";
        message.optionalUint32 = 0;
        message.optionalUint64 = "0";
        message.optionalSint32 = 0;
        message.optionalSint64 = "0";
        message.optionalFixed32 = 0;
        message.optionalFixed64 = "0";
        message.optionalSfixed32 = 0;
        message.optionalSfixed64 = "0";
        message.optionalFloat = 0;
        message.optionalDouble = 0;
        message.optionalBool = false;
        message.optionalString = "";
        message.optionalBytes = new Uint8Array(0);
        message.optionalNestedEnum = 0;
        message.optionalForeignEnum = 0;
        message.optionalStringPiece = "";
        message.optionalCord = "";
        message.repeatedInt32 = [];
        message.repeatedInt64 = [];
        message.repeatedUint32 = [];
        message.repeatedUint64 = [];
        message.repeatedSint32 = [];
        message.repeatedSint64 = [];
        message.repeatedFixed32 = [];
        message.repeatedFixed64 = [];
        message.repeatedSfixed32 = [];
        message.repeatedSfixed64 = [];
        message.repeatedFloat = [];
        message.repeatedDouble = [];
        message.repeatedBool = [];
        message.repeatedString = [];
        message.repeatedBytes = [];
        message.repeatedNestedMessage = [];
        message.repeatedForeignMessage = [];
        message.repeatedImportMessage = [];
        message.repeatedNestedEnum = [];
        message.repeatedForeignEnum = [];
        message.repeatedStringPiece = [];
        message.repeatedCord = [];
        message.repeatedLazyMessage = [];
        message.oneofField = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<TestAllTypes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestAllTypes): TestAllTypes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 optional_int32 */ 1:
                    message.optionalInt32 = reader.int32();
                    break;
                case /* int64 optional_int64 */ 2:
                    message.optionalInt64 = reader.int64().toString();
                    break;
                case /* uint32 optional_uint32 */ 3:
                    message.optionalUint32 = reader.uint32();
                    break;
                case /* uint64 optional_uint64 */ 4:
                    message.optionalUint64 = reader.uint64().toString();
                    break;
                case /* sint32 optional_sint32 */ 5:
                    message.optionalSint32 = reader.sint32();
                    break;
                case /* sint64 optional_sint64 */ 6:
                    message.optionalSint64 = reader.sint64().toString();
                    break;
                case /* fixed32 optional_fixed32 */ 7:
                    message.optionalFixed32 = reader.fixed32();
                    break;
                case /* fixed64 optional_fixed64 */ 8:
                    message.optionalFixed64 = reader.fixed64().toString();
                    break;
                case /* sfixed32 optional_sfixed32 */ 9:
                    message.optionalSfixed32 = reader.sfixed32();
                    break;
                case /* sfixed64 optional_sfixed64 */ 10:
                    message.optionalSfixed64 = reader.sfixed64().toString();
                    break;
                case /* float optional_float */ 11:
                    message.optionalFloat = reader.float();
                    break;
                case /* double optional_double */ 12:
                    message.optionalDouble = reader.double();
                    break;
                case /* bool optional_bool */ 13:
                    message.optionalBool = reader.bool();
                    break;
                case /* string optional_string */ 14:
                    message.optionalString = reader.string();
                    break;
                case /* bytes optional_bytes */ 15:
                    message.optionalBytes = reader.bytes();
                    break;
                case /* optional proto3_unittest.TestAllTypes.NestedMessage optional_nested_message */ 18:
                    message.optionalNestedMessage = TestAllTypes_NestedMessage.internalBinaryRead(reader, reader.uint32(), options, message.optionalNestedMessage);
                    break;
                case /* proto3_unittest.ForeignMessage optional_foreign_message */ 19:
                    message.optionalForeignMessage = ForeignMessage.internalBinaryRead(reader, reader.uint32(), options, message.optionalForeignMessage);
                    break;
                case /* protobuf_unittest_import.ImportMessage optional_import_message */ 20:
                    message.optionalImportMessage = ImportMessage.internalBinaryRead(reader, reader.uint32(), options, message.optionalImportMessage);
                    break;
                case /* proto3_unittest.TestAllTypes.NestedEnum optional_nested_enum */ 21:
                    message.optionalNestedEnum = reader.int32();
                    break;
                case /* proto3_unittest.ForeignEnum optional_foreign_enum */ 22:
                    message.optionalForeignEnum = reader.int32();
                    break;
                case /* string optional_string_piece */ 24:
                    message.optionalStringPiece = reader.string();
                    break;
                case /* string optional_cord */ 25:
                    message.optionalCord = reader.string();
                    break;
                case /* protobuf_unittest_import.PublicImportMessage optional_public_import_message */ 26:
                    message.optionalPublicImportMessage = PublicImportMessage.internalBinaryRead(reader, reader.uint32(), options, message.optionalPublicImportMessage);
                    break;
                case /* proto3_unittest.TestAllTypes.NestedMessage optional_lazy_message */ 27:
                    message.optionalLazyMessage = TestAllTypes_NestedMessage.internalBinaryRead(reader, reader.uint32(), options, message.optionalLazyMessage);
                    break;
                case /* proto3_unittest.TestAllTypes.NestedMessage optional_unverified_lazy_message */ 28:
                    message.optionalUnverifiedLazyMessage = TestAllTypes_NestedMessage.internalBinaryRead(reader, reader.uint32(), options, message.optionalUnverifiedLazyMessage);
                    break;
                case /* protobuf_unittest_import.ImportMessage optional_lazy_import_message */ 115:
                    message.optionalLazyImportMessage = ImportMessage.internalBinaryRead(reader, reader.uint32(), options, message.optionalLazyImportMessage);
                    break;
                case /* repeated int32 repeated_int32 */ 31:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedInt32.push(reader.int32());
                    else
                        message.repeatedInt32.push(reader.int32());
                    break;
                case /* repeated int64 repeated_int64 */ 32:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedInt64.push(reader.int64().toString());
                    else
                        message.repeatedInt64.push(reader.int64().toString());
                    break;
                case /* repeated uint32 repeated_uint32 */ 33:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedUint32.push(reader.uint32());
                    else
                        message.repeatedUint32.push(reader.uint32());
                    break;
                case /* repeated uint64 repeated_uint64 */ 34:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedUint64.push(reader.uint64().toString());
                    else
                        message.repeatedUint64.push(reader.uint64().toString());
                    break;
                case /* repeated sint32 repeated_sint32 */ 35:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSint32.push(reader.sint32());
                    else
                        message.repeatedSint32.push(reader.sint32());
                    break;
                case /* repeated sint64 repeated_sint64 */ 36:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSint64.push(reader.sint64().toString());
                    else
                        message.repeatedSint64.push(reader.sint64().toString());
                    break;
                case /* repeated fixed32 repeated_fixed32 */ 37:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFixed32.push(reader.fixed32());
                    else
                        message.repeatedFixed32.push(reader.fixed32());
                    break;
                case /* repeated fixed64 repeated_fixed64 */ 38:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFixed64.push(reader.fixed64().toString());
                    else
                        message.repeatedFixed64.push(reader.fixed64().toString());
                    break;
                case /* repeated sfixed32 repeated_sfixed32 */ 39:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSfixed32.push(reader.sfixed32());
                    else
                        message.repeatedSfixed32.push(reader.sfixed32());
                    break;
                case /* repeated sfixed64 repeated_sfixed64 */ 40:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSfixed64.push(reader.sfixed64().toString());
                    else
                        message.repeatedSfixed64.push(reader.sfixed64().toString());
                    break;
                case /* repeated float repeated_float */ 41:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFloat.push(reader.float());
                    else
                        message.repeatedFloat.push(reader.float());
                    break;
                case /* repeated double repeated_double */ 42:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedDouble.push(reader.double());
                    else
                        message.repeatedDouble.push(reader.double());
                    break;
                case /* repeated bool repeated_bool */ 43:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedBool.push(reader.bool());
                    else
                        message.repeatedBool.push(reader.bool());
                    break;
                case /* repeated string repeated_string */ 44:
                    message.repeatedString.push(reader.string());
                    break;
                case /* repeated bytes repeated_bytes */ 45:
                    message.repeatedBytes.push(reader.bytes());
                    break;
                case /* repeated proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message */ 48:
                    message.repeatedNestedMessage.push(TestAllTypes_NestedMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated proto3_unittest.ForeignMessage repeated_foreign_message */ 49:
                    message.repeatedForeignMessage.push(ForeignMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated protobuf_unittest_import.ImportMessage repeated_import_message */ 50:
                    message.repeatedImportMessage.push(ImportMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum */ 51:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedNestedEnum.push(reader.int32());
                    else
                        message.repeatedNestedEnum.push(reader.int32());
                    break;
                case /* repeated proto3_unittest.ForeignEnum repeated_foreign_enum */ 52:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedForeignEnum.push(reader.int32());
                    else
                        message.repeatedForeignEnum.push(reader.int32());
                    break;
                case /* repeated string repeated_string_piece */ 54:
                    message.repeatedStringPiece.push(reader.string());
                    break;
                case /* repeated string repeated_cord */ 55:
                    message.repeatedCord.push(reader.string());
                    break;
                case /* repeated proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message */ 57:
                    message.repeatedLazyMessage.push(TestAllTypes_NestedMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 oneof_uint32 */ 111:
                    message.oneofField = {
                        oneofKind: "oneofUint32",
                        oneofUint32: reader.uint32()
                    };
                    break;
                case /* proto3_unittest.TestAllTypes.NestedMessage oneof_nested_message */ 112:
                    message.oneofField = {
                        oneofKind: "oneofNestedMessage",
                        oneofNestedMessage: TestAllTypes_NestedMessage.internalBinaryRead(reader, reader.uint32(), options, (message.oneofField as any).oneofNestedMessage)
                    };
                    break;
                case /* string oneof_string */ 113:
                    message.oneofField = {
                        oneofKind: "oneofString",
                        oneofString: reader.string()
                    };
                    break;
                case /* bytes oneof_bytes */ 114:
                    message.oneofField = {
                        oneofKind: "oneofBytes",
                        oneofBytes: reader.bytes()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestAllTypes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 optional_int32 = 1; */
        if (message.optionalInt32 !== 0)
            writer.tag(1, WireType.Varint).int32(message.optionalInt32);
        /* int64 optional_int64 = 2; */
        if (message.optionalInt64 !== "0")
            writer.tag(2, WireType.Varint).int64(message.optionalInt64);
        /* uint32 optional_uint32 = 3; */
        if (message.optionalUint32 !== 0)
            writer.tag(3, WireType.Varint).uint32(message.optionalUint32);
        /* uint64 optional_uint64 = 4; */
        if (message.optionalUint64 !== "0")
            writer.tag(4, WireType.Varint).uint64(message.optionalUint64);
        /* sint32 optional_sint32 = 5; */
        if (message.optionalSint32 !== 0)
            writer.tag(5, WireType.Varint).sint32(message.optionalSint32);
        /* sint64 optional_sint64 = 6; */
        if (message.optionalSint64 !== "0")
            writer.tag(6, WireType.Varint).sint64(message.optionalSint64);
        /* fixed32 optional_fixed32 = 7; */
        if (message.optionalFixed32 !== 0)
            writer.tag(7, WireType.Bit32).fixed32(message.optionalFixed32);
        /* fixed64 optional_fixed64 = 8; */
        if (message.optionalFixed64 !== "0")
            writer.tag(8, WireType.Bit64).fixed64(message.optionalFixed64);
        /* sfixed32 optional_sfixed32 = 9; */
        if (message.optionalSfixed32 !== 0)
            writer.tag(9, WireType.Bit32).sfixed32(message.optionalSfixed32);
        /* sfixed64 optional_sfixed64 = 10; */
        if (message.optionalSfixed64 !== "0")
            writer.tag(10, WireType.Bit64).sfixed64(message.optionalSfixed64);
        /* float optional_float = 11; */
        if (message.optionalFloat !== 0)
            writer.tag(11, WireType.Bit32).float(message.optionalFloat);
        /* double optional_double = 12; */
        if (message.optionalDouble !== 0)
            writer.tag(12, WireType.Bit64).double(message.optionalDouble);
        /* bool optional_bool = 13; */
        if (message.optionalBool !== false)
            writer.tag(13, WireType.Varint).bool(message.optionalBool);
        /* string optional_string = 14; */
        if (message.optionalString !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.optionalString);
        /* bytes optional_bytes = 15; */
        if (message.optionalBytes.length)
            writer.tag(15, WireType.LengthDelimited).bytes(message.optionalBytes);
        /* optional proto3_unittest.TestAllTypes.NestedMessage optional_nested_message = 18; */
        if (message.optionalNestedMessage)
            TestAllTypes_NestedMessage.internalBinaryWrite(message.optionalNestedMessage, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* proto3_unittest.ForeignMessage optional_foreign_message = 19; */
        if (message.optionalForeignMessage)
            ForeignMessage.internalBinaryWrite(message.optionalForeignMessage, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* protobuf_unittest_import.ImportMessage optional_import_message = 20; */
        if (message.optionalImportMessage)
            ImportMessage.internalBinaryWrite(message.optionalImportMessage, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* proto3_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21; */
        if (message.optionalNestedEnum !== 0)
            writer.tag(21, WireType.Varint).int32(message.optionalNestedEnum);
        /* proto3_unittest.ForeignEnum optional_foreign_enum = 22; */
        if (message.optionalForeignEnum !== 0)
            writer.tag(22, WireType.Varint).int32(message.optionalForeignEnum);
        /* string optional_string_piece = 24; */
        if (message.optionalStringPiece !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.optionalStringPiece);
        /* string optional_cord = 25; */
        if (message.optionalCord !== "")
            writer.tag(25, WireType.LengthDelimited).string(message.optionalCord);
        /* protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26; */
        if (message.optionalPublicImportMessage)
            PublicImportMessage.internalBinaryWrite(message.optionalPublicImportMessage, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* proto3_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27; */
        if (message.optionalLazyMessage)
            TestAllTypes_NestedMessage.internalBinaryWrite(message.optionalLazyMessage, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* proto3_unittest.TestAllTypes.NestedMessage optional_unverified_lazy_message = 28; */
        if (message.optionalUnverifiedLazyMessage)
            TestAllTypes_NestedMessage.internalBinaryWrite(message.optionalUnverifiedLazyMessage, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* protobuf_unittest_import.ImportMessage optional_lazy_import_message = 115; */
        if (message.optionalLazyImportMessage)
            ImportMessage.internalBinaryWrite(message.optionalLazyImportMessage, writer.tag(115, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 repeated_int32 = 31; */
        if (message.repeatedInt32.length) {
            writer.tag(31, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedInt32.length; i++)
                writer.int32(message.repeatedInt32[i]);
            writer.join();
        }
        /* repeated int64 repeated_int64 = 32; */
        if (message.repeatedInt64.length) {
            writer.tag(32, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedInt64.length; i++)
                writer.int64(message.repeatedInt64[i]);
            writer.join();
        }
        /* repeated uint32 repeated_uint32 = 33; */
        if (message.repeatedUint32.length) {
            writer.tag(33, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedUint32.length; i++)
                writer.uint32(message.repeatedUint32[i]);
            writer.join();
        }
        /* repeated uint64 repeated_uint64 = 34; */
        if (message.repeatedUint64.length) {
            writer.tag(34, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedUint64.length; i++)
                writer.uint64(message.repeatedUint64[i]);
            writer.join();
        }
        /* repeated sint32 repeated_sint32 = 35; */
        if (message.repeatedSint32.length) {
            writer.tag(35, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedSint32.length; i++)
                writer.sint32(message.repeatedSint32[i]);
            writer.join();
        }
        /* repeated sint64 repeated_sint64 = 36; */
        if (message.repeatedSint64.length) {
            writer.tag(36, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedSint64.length; i++)
                writer.sint64(message.repeatedSint64[i]);
            writer.join();
        }
        /* repeated fixed32 repeated_fixed32 = 37; */
        if (message.repeatedFixed32.length) {
            writer.tag(37, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedFixed32.length; i++)
                writer.fixed32(message.repeatedFixed32[i]);
            writer.join();
        }
        /* repeated fixed64 repeated_fixed64 = 38; */
        if (message.repeatedFixed64.length) {
            writer.tag(38, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedFixed64.length; i++)
                writer.fixed64(message.repeatedFixed64[i]);
            writer.join();
        }
        /* repeated sfixed32 repeated_sfixed32 = 39; */
        if (message.repeatedSfixed32.length) {
            writer.tag(39, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedSfixed32.length; i++)
                writer.sfixed32(message.repeatedSfixed32[i]);
            writer.join();
        }
        /* repeated sfixed64 repeated_sfixed64 = 40; */
        if (message.repeatedSfixed64.length) {
            writer.tag(40, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedSfixed64.length; i++)
                writer.sfixed64(message.repeatedSfixed64[i]);
            writer.join();
        }
        /* repeated float repeated_float = 41; */
        if (message.repeatedFloat.length) {
            writer.tag(41, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedFloat.length; i++)
                writer.float(message.repeatedFloat[i]);
            writer.join();
        }
        /* repeated double repeated_double = 42; */
        if (message.repeatedDouble.length) {
            writer.tag(42, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedDouble.length; i++)
                writer.double(message.repeatedDouble[i]);
            writer.join();
        }
        /* repeated bool repeated_bool = 43; */
        if (message.repeatedBool.length) {
            writer.tag(43, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedBool.length; i++)
                writer.bool(message.repeatedBool[i]);
            writer.join();
        }
        /* repeated string repeated_string = 44; */
        for (let i = 0; i < message.repeatedString.length; i++)
            writer.tag(44, WireType.LengthDelimited).string(message.repeatedString[i]);
        /* repeated bytes repeated_bytes = 45; */
        for (let i = 0; i < message.repeatedBytes.length; i++)
            writer.tag(45, WireType.LengthDelimited).bytes(message.repeatedBytes[i]);
        /* repeated proto3_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48; */
        for (let i = 0; i < message.repeatedNestedMessage.length; i++)
            TestAllTypes_NestedMessage.internalBinaryWrite(message.repeatedNestedMessage[i], writer.tag(48, WireType.LengthDelimited).fork(), options).join();
        /* repeated proto3_unittest.ForeignMessage repeated_foreign_message = 49; */
        for (let i = 0; i < message.repeatedForeignMessage.length; i++)
            ForeignMessage.internalBinaryWrite(message.repeatedForeignMessage[i], writer.tag(49, WireType.LengthDelimited).fork(), options).join();
        /* repeated protobuf_unittest_import.ImportMessage repeated_import_message = 50; */
        for (let i = 0; i < message.repeatedImportMessage.length; i++)
            ImportMessage.internalBinaryWrite(message.repeatedImportMessage[i], writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        /* repeated proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51; */
        if (message.repeatedNestedEnum.length) {
            writer.tag(51, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedNestedEnum.length; i++)
                writer.int32(message.repeatedNestedEnum[i]);
            writer.join();
        }
        /* repeated proto3_unittest.ForeignEnum repeated_foreign_enum = 52; */
        if (message.repeatedForeignEnum.length) {
            writer.tag(52, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedForeignEnum.length; i++)
                writer.int32(message.repeatedForeignEnum[i]);
            writer.join();
        }
        /* repeated string repeated_string_piece = 54; */
        for (let i = 0; i < message.repeatedStringPiece.length; i++)
            writer.tag(54, WireType.LengthDelimited).string(message.repeatedStringPiece[i]);
        /* repeated string repeated_cord = 55; */
        for (let i = 0; i < message.repeatedCord.length; i++)
            writer.tag(55, WireType.LengthDelimited).string(message.repeatedCord[i]);
        /* repeated proto3_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57; */
        for (let i = 0; i < message.repeatedLazyMessage.length; i++)
            TestAllTypes_NestedMessage.internalBinaryWrite(message.repeatedLazyMessage[i], writer.tag(57, WireType.LengthDelimited).fork(), options).join();
        /* uint32 oneof_uint32 = 111; */
        if (message.oneofField.oneofKind === "oneofUint32")
            writer.tag(111, WireType.Varint).uint32(message.oneofField.oneofUint32);
        /* proto3_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112; */
        if (message.oneofField.oneofKind === "oneofNestedMessage")
            TestAllTypes_NestedMessage.internalBinaryWrite(message.oneofField.oneofNestedMessage, writer.tag(112, WireType.LengthDelimited).fork(), options).join();
        /* string oneof_string = 113; */
        if (message.oneofField.oneofKind === "oneofString")
            writer.tag(113, WireType.LengthDelimited).string(message.oneofField.oneofString);
        /* bytes oneof_bytes = 114; */
        if (message.oneofField.oneofKind === "oneofBytes")
            writer.tag(114, WireType.LengthDelimited).bytes(message.oneofField.oneofBytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto3_unittest.TestAllTypes
 */
export const TestAllTypes = new TestAllTypes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestAllTypes_NestedMessage$Type extends MessageType<TestAllTypes_NestedMessage> {
    constructor() {
        super("proto3_unittest.TestAllTypes.NestedMessage", [
            { no: 1, name: "bb", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestAllTypes_NestedMessage>): TestAllTypes_NestedMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bb = 0;
        if (value !== undefined)
            reflectionMergePartial<TestAllTypes_NestedMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestAllTypes_NestedMessage): TestAllTypes_NestedMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 bb */ 1:
                    message.bb = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestAllTypes_NestedMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 bb = 1; */
        if (message.bb !== 0)
            writer.tag(1, WireType.Varint).int32(message.bb);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto3_unittest.TestAllTypes.NestedMessage
 */
export const TestAllTypes_NestedMessage = new TestAllTypes_NestedMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestPackedTypes$Type extends MessageType<TestPackedTypes> {
    constructor() {
        super("proto3_unittest.TestPackedTypes", [
            { no: 90, name: "packed_int32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 91, name: "packed_int64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/ },
            { no: 92, name: "packed_uint32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 93, name: "packed_uint64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ },
            { no: 94, name: "packed_sint32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 17 /*ScalarType.SINT32*/ },
            { no: 95, name: "packed_sint64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 18 /*ScalarType.SINT64*/ },
            { no: 96, name: "packed_fixed32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 7 /*ScalarType.FIXED32*/ },
            { no: 97, name: "packed_fixed64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 6 /*ScalarType.FIXED64*/ },
            { no: 98, name: "packed_sfixed32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 15 /*ScalarType.SFIXED32*/ },
            { no: 99, name: "packed_sfixed64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 16 /*ScalarType.SFIXED64*/ },
            { no: 100, name: "packed_float", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 101, name: "packed_double", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 102, name: "packed_bool", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 103, name: "packed_enum", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["proto3_unittest.ForeignEnum", ForeignEnum] }
        ]);
    }
    create(value?: PartialMessage<TestPackedTypes>): TestPackedTypes {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.packedInt32 = [];
        message.packedInt64 = [];
        message.packedUint32 = [];
        message.packedUint64 = [];
        message.packedSint32 = [];
        message.packedSint64 = [];
        message.packedFixed32 = [];
        message.packedFixed64 = [];
        message.packedSfixed32 = [];
        message.packedSfixed64 = [];
        message.packedFloat = [];
        message.packedDouble = [];
        message.packedBool = [];
        message.packedEnum = [];
        if (value !== undefined)
            reflectionMergePartial<TestPackedTypes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestPackedTypes): TestPackedTypes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 packed_int32 = 90 [packed = true];*/ 90:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedInt32.push(reader.int32());
                    else
                        message.packedInt32.push(reader.int32());
                    break;
                case /* repeated int64 packed_int64 = 91 [packed = true];*/ 91:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedInt64.push(reader.int64().toString());
                    else
                        message.packedInt64.push(reader.int64().toString());
                    break;
                case /* repeated uint32 packed_uint32 = 92 [packed = true];*/ 92:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedUint32.push(reader.uint32());
                    else
                        message.packedUint32.push(reader.uint32());
                    break;
                case /* repeated uint64 packed_uint64 = 93 [packed = true];*/ 93:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedUint64.push(reader.uint64().toString());
                    else
                        message.packedUint64.push(reader.uint64().toString());
                    break;
                case /* repeated sint32 packed_sint32 = 94 [packed = true];*/ 94:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedSint32.push(reader.sint32());
                    else
                        message.packedSint32.push(reader.sint32());
                    break;
                case /* repeated sint64 packed_sint64 = 95 [packed = true];*/ 95:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedSint64.push(reader.sint64().toString());
                    else
                        message.packedSint64.push(reader.sint64().toString());
                    break;
                case /* repeated fixed32 packed_fixed32 = 96 [packed = true];*/ 96:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedFixed32.push(reader.fixed32());
                    else
                        message.packedFixed32.push(reader.fixed32());
                    break;
                case /* repeated fixed64 packed_fixed64 = 97 [packed = true];*/ 97:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedFixed64.push(reader.fixed64().toString());
                    else
                        message.packedFixed64.push(reader.fixed64().toString());
                    break;
                case /* repeated sfixed32 packed_sfixed32 = 98 [packed = true];*/ 98:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedSfixed32.push(reader.sfixed32());
                    else
                        message.packedSfixed32.push(reader.sfixed32());
                    break;
                case /* repeated sfixed64 packed_sfixed64 = 99 [packed = true];*/ 99:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedSfixed64.push(reader.sfixed64().toString());
                    else
                        message.packedSfixed64.push(reader.sfixed64().toString());
                    break;
                case /* repeated float packed_float = 100 [packed = true];*/ 100:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedFloat.push(reader.float());
                    else
                        message.packedFloat.push(reader.float());
                    break;
                case /* repeated double packed_double = 101 [packed = true];*/ 101:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedDouble.push(reader.double());
                    else
                        message.packedDouble.push(reader.double());
                    break;
                case /* repeated bool packed_bool = 102 [packed = true];*/ 102:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedBool.push(reader.bool());
                    else
                        message.packedBool.push(reader.bool());
                    break;
                case /* repeated proto3_unittest.ForeignEnum packed_enum = 103 [packed = true];*/ 103:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedEnum.push(reader.int32());
                    else
                        message.packedEnum.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestPackedTypes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 packed_int32 = 90 [packed = true]; */
        if (message.packedInt32.length) {
            writer.tag(90, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedInt32.length; i++)
                writer.int32(message.packedInt32[i]);
            writer.join();
        }
        /* repeated int64 packed_int64 = 91 [packed = true]; */
        if (message.packedInt64.length) {
            writer.tag(91, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedInt64.length; i++)
                writer.int64(message.packedInt64[i]);
            writer.join();
        }
        /* repeated uint32 packed_uint32 = 92 [packed = true]; */
        if (message.packedUint32.length) {
            writer.tag(92, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedUint32.length; i++)
                writer.uint32(message.packedUint32[i]);
            writer.join();
        }
        /* repeated uint64 packed_uint64 = 93 [packed = true]; */
        if (message.packedUint64.length) {
            writer.tag(93, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedUint64.length; i++)
                writer.uint64(message.packedUint64[i]);
            writer.join();
        }
        /* repeated sint32 packed_sint32 = 94 [packed = true]; */
        if (message.packedSint32.length) {
            writer.tag(94, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedSint32.length; i++)
                writer.sint32(message.packedSint32[i]);
            writer.join();
        }
        /* repeated sint64 packed_sint64 = 95 [packed = true]; */
        if (message.packedSint64.length) {
            writer.tag(95, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedSint64.length; i++)
                writer.sint64(message.packedSint64[i]);
            writer.join();
        }
        /* repeated fixed32 packed_fixed32 = 96 [packed = true]; */
        if (message.packedFixed32.length) {
            writer.tag(96, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedFixed32.length; i++)
                writer.fixed32(message.packedFixed32[i]);
            writer.join();
        }
        /* repeated fixed64 packed_fixed64 = 97 [packed = true]; */
        if (message.packedFixed64.length) {
            writer.tag(97, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedFixed64.length; i++)
                writer.fixed64(message.packedFixed64[i]);
            writer.join();
        }
        /* repeated sfixed32 packed_sfixed32 = 98 [packed = true]; */
        if (message.packedSfixed32.length) {
            writer.tag(98, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedSfixed32.length; i++)
                writer.sfixed32(message.packedSfixed32[i]);
            writer.join();
        }
        /* repeated sfixed64 packed_sfixed64 = 99 [packed = true]; */
        if (message.packedSfixed64.length) {
            writer.tag(99, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedSfixed64.length; i++)
                writer.sfixed64(message.packedSfixed64[i]);
            writer.join();
        }
        /* repeated float packed_float = 100 [packed = true]; */
        if (message.packedFloat.length) {
            writer.tag(100, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedFloat.length; i++)
                writer.float(message.packedFloat[i]);
            writer.join();
        }
        /* repeated double packed_double = 101 [packed = true]; */
        if (message.packedDouble.length) {
            writer.tag(101, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedDouble.length; i++)
                writer.double(message.packedDouble[i]);
            writer.join();
        }
        /* repeated bool packed_bool = 102 [packed = true]; */
        if (message.packedBool.length) {
            writer.tag(102, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedBool.length; i++)
                writer.bool(message.packedBool[i]);
            writer.join();
        }
        /* repeated proto3_unittest.ForeignEnum packed_enum = 103 [packed = true]; */
        if (message.packedEnum.length) {
            writer.tag(103, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedEnum.length; i++)
                writer.int32(message.packedEnum[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto3_unittest.TestPackedTypes
 */
export const TestPackedTypes = new TestPackedTypes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestUnpackedTypes$Type extends MessageType<TestUnpackedTypes> {
    constructor() {
        super("proto3_unittest.TestUnpackedTypes", [
            { no: 1, name: "repeated_int32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "repeated_int64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 3 /*ScalarType.INT64*/ },
            { no: 3, name: "repeated_uint32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "repeated_uint64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "repeated_sint32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 17 /*ScalarType.SINT32*/ },
            { no: 6, name: "repeated_sint64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 18 /*ScalarType.SINT64*/ },
            { no: 7, name: "repeated_fixed32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 7 /*ScalarType.FIXED32*/ },
            { no: 8, name: "repeated_fixed64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 6 /*ScalarType.FIXED64*/ },
            { no: 9, name: "repeated_sfixed32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 15 /*ScalarType.SFIXED32*/ },
            { no: 10, name: "repeated_sfixed64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 16 /*ScalarType.SFIXED64*/ },
            { no: 11, name: "repeated_float", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "repeated_double", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "repeated_bool", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "repeated_nested_enum", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["proto3_unittest.TestAllTypes.NestedEnum", TestAllTypes_NestedEnum] }
        ]);
    }
    create(value?: PartialMessage<TestUnpackedTypes>): TestUnpackedTypes {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.repeatedInt32 = [];
        message.repeatedInt64 = [];
        message.repeatedUint32 = [];
        message.repeatedUint64 = [];
        message.repeatedSint32 = [];
        message.repeatedSint64 = [];
        message.repeatedFixed32 = [];
        message.repeatedFixed64 = [];
        message.repeatedSfixed32 = [];
        message.repeatedSfixed64 = [];
        message.repeatedFloat = [];
        message.repeatedDouble = [];
        message.repeatedBool = [];
        message.repeatedNestedEnum = [];
        if (value !== undefined)
            reflectionMergePartial<TestUnpackedTypes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestUnpackedTypes): TestUnpackedTypes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 repeated_int32 = 1 [packed = false];*/ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedInt32.push(reader.int32());
                    else
                        message.repeatedInt32.push(reader.int32());
                    break;
                case /* repeated int64 repeated_int64 = 2 [packed = false];*/ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedInt64.push(reader.int64().toString());
                    else
                        message.repeatedInt64.push(reader.int64().toString());
                    break;
                case /* repeated uint32 repeated_uint32 = 3 [packed = false];*/ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedUint32.push(reader.uint32());
                    else
                        message.repeatedUint32.push(reader.uint32());
                    break;
                case /* repeated uint64 repeated_uint64 = 4 [packed = false];*/ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedUint64.push(reader.uint64().toString());
                    else
                        message.repeatedUint64.push(reader.uint64().toString());
                    break;
                case /* repeated sint32 repeated_sint32 = 5 [packed = false];*/ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSint32.push(reader.sint32());
                    else
                        message.repeatedSint32.push(reader.sint32());
                    break;
                case /* repeated sint64 repeated_sint64 = 6 [packed = false];*/ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSint64.push(reader.sint64().toString());
                    else
                        message.repeatedSint64.push(reader.sint64().toString());
                    break;
                case /* repeated fixed32 repeated_fixed32 = 7 [packed = false];*/ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFixed32.push(reader.fixed32());
                    else
                        message.repeatedFixed32.push(reader.fixed32());
                    break;
                case /* repeated fixed64 repeated_fixed64 = 8 [packed = false];*/ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFixed64.push(reader.fixed64().toString());
                    else
                        message.repeatedFixed64.push(reader.fixed64().toString());
                    break;
                case /* repeated sfixed32 repeated_sfixed32 = 9 [packed = false];*/ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSfixed32.push(reader.sfixed32());
                    else
                        message.repeatedSfixed32.push(reader.sfixed32());
                    break;
                case /* repeated sfixed64 repeated_sfixed64 = 10 [packed = false];*/ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSfixed64.push(reader.sfixed64().toString());
                    else
                        message.repeatedSfixed64.push(reader.sfixed64().toString());
                    break;
                case /* repeated float repeated_float = 11 [packed = false];*/ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFloat.push(reader.float());
                    else
                        message.repeatedFloat.push(reader.float());
                    break;
                case /* repeated double repeated_double = 12 [packed = false];*/ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedDouble.push(reader.double());
                    else
                        message.repeatedDouble.push(reader.double());
                    break;
                case /* repeated bool repeated_bool = 13 [packed = false];*/ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedBool.push(reader.bool());
                    else
                        message.repeatedBool.push(reader.bool());
                    break;
                case /* repeated proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false];*/ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedNestedEnum.push(reader.int32());
                    else
                        message.repeatedNestedEnum.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestUnpackedTypes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 repeated_int32 = 1 [packed = false]; */
        for (let i = 0; i < message.repeatedInt32.length; i++)
            writer.tag(1, WireType.Varint).int32(message.repeatedInt32[i]);
        /* repeated int64 repeated_int64 = 2 [packed = false]; */
        for (let i = 0; i < message.repeatedInt64.length; i++)
            writer.tag(2, WireType.Varint).int64(message.repeatedInt64[i]);
        /* repeated uint32 repeated_uint32 = 3 [packed = false]; */
        for (let i = 0; i < message.repeatedUint32.length; i++)
            writer.tag(3, WireType.Varint).uint32(message.repeatedUint32[i]);
        /* repeated uint64 repeated_uint64 = 4 [packed = false]; */
        for (let i = 0; i < message.repeatedUint64.length; i++)
            writer.tag(4, WireType.Varint).uint64(message.repeatedUint64[i]);
        /* repeated sint32 repeated_sint32 = 5 [packed = false]; */
        for (let i = 0; i < message.repeatedSint32.length; i++)
            writer.tag(5, WireType.Varint).sint32(message.repeatedSint32[i]);
        /* repeated sint64 repeated_sint64 = 6 [packed = false]; */
        for (let i = 0; i < message.repeatedSint64.length; i++)
            writer.tag(6, WireType.Varint).sint64(message.repeatedSint64[i]);
        /* repeated fixed32 repeated_fixed32 = 7 [packed = false]; */
        for (let i = 0; i < message.repeatedFixed32.length; i++)
            writer.tag(7, WireType.Bit32).fixed32(message.repeatedFixed32[i]);
        /* repeated fixed64 repeated_fixed64 = 8 [packed = false]; */
        for (let i = 0; i < message.repeatedFixed64.length; i++)
            writer.tag(8, WireType.Bit64).fixed64(message.repeatedFixed64[i]);
        /* repeated sfixed32 repeated_sfixed32 = 9 [packed = false]; */
        for (let i = 0; i < message.repeatedSfixed32.length; i++)
            writer.tag(9, WireType.Bit32).sfixed32(message.repeatedSfixed32[i]);
        /* repeated sfixed64 repeated_sfixed64 = 10 [packed = false]; */
        for (let i = 0; i < message.repeatedSfixed64.length; i++)
            writer.tag(10, WireType.Bit64).sfixed64(message.repeatedSfixed64[i]);
        /* repeated float repeated_float = 11 [packed = false]; */
        for (let i = 0; i < message.repeatedFloat.length; i++)
            writer.tag(11, WireType.Bit32).float(message.repeatedFloat[i]);
        /* repeated double repeated_double = 12 [packed = false]; */
        for (let i = 0; i < message.repeatedDouble.length; i++)
            writer.tag(12, WireType.Bit64).double(message.repeatedDouble[i]);
        /* repeated bool repeated_bool = 13 [packed = false]; */
        for (let i = 0; i < message.repeatedBool.length; i++)
            writer.tag(13, WireType.Varint).bool(message.repeatedBool[i]);
        /* repeated proto3_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 14 [packed = false]; */
        for (let i = 0; i < message.repeatedNestedEnum.length; i++)
            writer.tag(14, WireType.Varint).int32(message.repeatedNestedEnum[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto3_unittest.TestUnpackedTypes
 */
export const TestUnpackedTypes = new TestUnpackedTypes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NestedTestAllTypes$Type extends MessageType<NestedTestAllTypes> {
    constructor() {
        super("proto3_unittest.NestedTestAllTypes", [
            { no: 1, name: "child", kind: "message", T: () => NestedTestAllTypes },
            { no: 2, name: "payload", kind: "message", T: () => TestAllTypes }
        ]);
    }
    create(value?: PartialMessage<NestedTestAllTypes>): NestedTestAllTypes {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NestedTestAllTypes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NestedTestAllTypes): NestedTestAllTypes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto3_unittest.NestedTestAllTypes child */ 1:
                    message.child = NestedTestAllTypes.internalBinaryRead(reader, reader.uint32(), options, message.child);
                    break;
                case /* proto3_unittest.TestAllTypes payload */ 2:
                    message.payload = TestAllTypes.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NestedTestAllTypes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto3_unittest.NestedTestAllTypes child = 1; */
        if (message.child)
            NestedTestAllTypes.internalBinaryWrite(message.child, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* proto3_unittest.TestAllTypes payload = 2; */
        if (message.payload)
            TestAllTypes.internalBinaryWrite(message.payload, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto3_unittest.NestedTestAllTypes
 */
export const NestedTestAllTypes = new NestedTestAllTypes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForeignMessage$Type extends MessageType<ForeignMessage> {
    constructor() {
        super("proto3_unittest.ForeignMessage", [
            { no: 1, name: "c", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ForeignMessage>): ForeignMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.c = 0;
        if (value !== undefined)
            reflectionMergePartial<ForeignMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForeignMessage): ForeignMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 c */ 1:
                    message.c = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForeignMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 c = 1; */
        if (message.c !== 0)
            writer.tag(1, WireType.Varint).int32(message.c);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto3_unittest.ForeignMessage
 */
export const ForeignMessage = new ForeignMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestEmptyMessage$Type extends MessageType<TestEmptyMessage> {
    constructor() {
        super("proto3_unittest.TestEmptyMessage", []);
    }
    create(value?: PartialMessage<TestEmptyMessage>): TestEmptyMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestEmptyMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestEmptyMessage): TestEmptyMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestEmptyMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto3_unittest.TestEmptyMessage
 */
export const TestEmptyMessage = new TestEmptyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestMessageWithDummy$Type extends MessageType<TestMessageWithDummy> {
    constructor() {
        super("proto3_unittest.TestMessageWithDummy", [
            { no: 536870911, name: "dummy", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TestMessageWithDummy>): TestMessageWithDummy {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dummy = false;
        if (value !== undefined)
            reflectionMergePartial<TestMessageWithDummy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestMessageWithDummy): TestMessageWithDummy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool dummy */ 536870911:
                    message.dummy = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestMessageWithDummy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool dummy = 536870911; */
        if (message.dummy !== false)
            writer.tag(536870911, WireType.Varint).bool(message.dummy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto3_unittest.TestMessageWithDummy
 */
export const TestMessageWithDummy = new TestMessageWithDummy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestOneof2$Type extends MessageType<TestOneof2> {
    constructor() {
        super("proto3_unittest.TestOneof2", [
            { no: 6, name: "foo_enum", kind: "enum", oneof: "foo", T: () => ["proto3_unittest.TestOneof2.NestedEnum", TestOneof2_NestedEnum] }
        ]);
    }
    create(value?: PartialMessage<TestOneof2>): TestOneof2 {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.foo = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<TestOneof2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestOneof2): TestOneof2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto3_unittest.TestOneof2.NestedEnum foo_enum */ 6:
                    message.foo = {
                        oneofKind: "fooEnum",
                        fooEnum: reader.int32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestOneof2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto3_unittest.TestOneof2.NestedEnum foo_enum = 6; */
        if (message.foo.oneofKind === "fooEnum")
            writer.tag(6, WireType.Varint).int32(message.foo.fooEnum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto3_unittest.TestOneof2
 */
export const TestOneof2 = new TestOneof2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestHasbits$Type extends MessageType<TestHasbits> {
    constructor() {
        super("proto3_unittest.TestHasbits", [
            { no: 1, name: "b1", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "b2", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "b3", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "b4", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "b5", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "b6", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "b7", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "b8", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "b9", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "b10", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "b11", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "b12", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "b13", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "b14", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "b15", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "b16", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "b17", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "b18", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "b19", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "b20", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 21, name: "b21", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 22, name: "b22", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 23, name: "b23", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 24, name: "b24", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 25, name: "b25", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 26, name: "b26", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 27, name: "b27", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 28, name: "b28", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 29, name: "b29", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 30, name: "b30", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 31, name: "b31", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 32, name: "b32", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 33, name: "b33", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 34, name: "b34", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 35, name: "b35", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 36, name: "b36", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 37, name: "b37", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 38, name: "b38", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 39, name: "b39", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 40, name: "b40", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 41, name: "b41", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 42, name: "b42", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 43, name: "b43", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 44, name: "b44", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 45, name: "b45", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 46, name: "b46", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 47, name: "b47", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 48, name: "b48", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 49, name: "b49", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 50, name: "b50", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 51, name: "b51", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 52, name: "b52", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 53, name: "b53", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 54, name: "b54", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 55, name: "b55", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 56, name: "b56", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 57, name: "b57", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 58, name: "b58", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 59, name: "b59", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 60, name: "b60", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 61, name: "b61", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 62, name: "b62", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 63, name: "b63", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 64, name: "b64", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 65, name: "b65", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 66, name: "b66", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 67, name: "b67", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 68, name: "b68", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 69, name: "b69", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 100, name: "child", kind: "message", T: () => TestAllTypes }
        ]);
    }
    create(value?: PartialMessage<TestHasbits>): TestHasbits {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.b1 = false;
        message.b2 = false;
        message.b3 = false;
        message.b4 = false;
        message.b5 = false;
        message.b6 = false;
        message.b7 = false;
        message.b8 = false;
        message.b9 = false;
        message.b10 = false;
        message.b11 = false;
        message.b12 = false;
        message.b13 = false;
        message.b14 = false;
        message.b15 = false;
        message.b16 = false;
        message.b17 = false;
        message.b18 = false;
        message.b19 = false;
        message.b20 = false;
        message.b21 = false;
        message.b22 = false;
        message.b23 = false;
        message.b24 = false;
        message.b25 = false;
        message.b26 = false;
        message.b27 = false;
        message.b28 = false;
        message.b29 = false;
        message.b30 = false;
        message.b31 = false;
        message.b32 = false;
        message.b33 = false;
        message.b34 = false;
        message.b35 = false;
        message.b36 = false;
        message.b37 = false;
        message.b38 = false;
        message.b39 = false;
        message.b40 = false;
        message.b41 = false;
        message.b42 = false;
        message.b43 = false;
        message.b44 = false;
        message.b45 = false;
        message.b46 = false;
        message.b47 = false;
        message.b48 = false;
        message.b49 = false;
        message.b50 = false;
        message.b51 = false;
        message.b52 = false;
        message.b53 = false;
        message.b54 = false;
        message.b55 = false;
        message.b56 = false;
        message.b57 = false;
        message.b58 = false;
        message.b59 = false;
        message.b60 = false;
        message.b61 = false;
        message.b62 = false;
        message.b63 = false;
        message.b64 = false;
        message.b65 = false;
        message.b66 = false;
        message.b67 = false;
        message.b68 = false;
        message.b69 = false;
        if (value !== undefined)
            reflectionMergePartial<TestHasbits>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestHasbits): TestHasbits {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool b1 */ 1:
                    message.b1 = reader.bool();
                    break;
                case /* bool b2 */ 2:
                    message.b2 = reader.bool();
                    break;
                case /* bool b3 */ 3:
                    message.b3 = reader.bool();
                    break;
                case /* bool b4 */ 4:
                    message.b4 = reader.bool();
                    break;
                case /* bool b5 */ 5:
                    message.b5 = reader.bool();
                    break;
                case /* bool b6 */ 6:
                    message.b6 = reader.bool();
                    break;
                case /* bool b7 */ 7:
                    message.b7 = reader.bool();
                    break;
                case /* bool b8 */ 8:
                    message.b8 = reader.bool();
                    break;
                case /* bool b9 */ 9:
                    message.b9 = reader.bool();
                    break;
                case /* bool b10 */ 10:
                    message.b10 = reader.bool();
                    break;
                case /* bool b11 */ 11:
                    message.b11 = reader.bool();
                    break;
                case /* bool b12 */ 12:
                    message.b12 = reader.bool();
                    break;
                case /* bool b13 */ 13:
                    message.b13 = reader.bool();
                    break;
                case /* bool b14 */ 14:
                    message.b14 = reader.bool();
                    break;
                case /* bool b15 */ 15:
                    message.b15 = reader.bool();
                    break;
                case /* bool b16 */ 16:
                    message.b16 = reader.bool();
                    break;
                case /* bool b17 */ 17:
                    message.b17 = reader.bool();
                    break;
                case /* bool b18 */ 18:
                    message.b18 = reader.bool();
                    break;
                case /* bool b19 */ 19:
                    message.b19 = reader.bool();
                    break;
                case /* bool b20 */ 20:
                    message.b20 = reader.bool();
                    break;
                case /* bool b21 */ 21:
                    message.b21 = reader.bool();
                    break;
                case /* bool b22 */ 22:
                    message.b22 = reader.bool();
                    break;
                case /* bool b23 */ 23:
                    message.b23 = reader.bool();
                    break;
                case /* bool b24 */ 24:
                    message.b24 = reader.bool();
                    break;
                case /* bool b25 */ 25:
                    message.b25 = reader.bool();
                    break;
                case /* bool b26 */ 26:
                    message.b26 = reader.bool();
                    break;
                case /* bool b27 */ 27:
                    message.b27 = reader.bool();
                    break;
                case /* bool b28 */ 28:
                    message.b28 = reader.bool();
                    break;
                case /* bool b29 */ 29:
                    message.b29 = reader.bool();
                    break;
                case /* bool b30 */ 30:
                    message.b30 = reader.bool();
                    break;
                case /* bool b31 */ 31:
                    message.b31 = reader.bool();
                    break;
                case /* bool b32 */ 32:
                    message.b32 = reader.bool();
                    break;
                case /* bool b33 */ 33:
                    message.b33 = reader.bool();
                    break;
                case /* bool b34 */ 34:
                    message.b34 = reader.bool();
                    break;
                case /* bool b35 */ 35:
                    message.b35 = reader.bool();
                    break;
                case /* bool b36 */ 36:
                    message.b36 = reader.bool();
                    break;
                case /* bool b37 */ 37:
                    message.b37 = reader.bool();
                    break;
                case /* bool b38 */ 38:
                    message.b38 = reader.bool();
                    break;
                case /* bool b39 */ 39:
                    message.b39 = reader.bool();
                    break;
                case /* bool b40 */ 40:
                    message.b40 = reader.bool();
                    break;
                case /* bool b41 */ 41:
                    message.b41 = reader.bool();
                    break;
                case /* bool b42 */ 42:
                    message.b42 = reader.bool();
                    break;
                case /* bool b43 */ 43:
                    message.b43 = reader.bool();
                    break;
                case /* bool b44 */ 44:
                    message.b44 = reader.bool();
                    break;
                case /* bool b45 */ 45:
                    message.b45 = reader.bool();
                    break;
                case /* bool b46 */ 46:
                    message.b46 = reader.bool();
                    break;
                case /* bool b47 */ 47:
                    message.b47 = reader.bool();
                    break;
                case /* bool b48 */ 48:
                    message.b48 = reader.bool();
                    break;
                case /* bool b49 */ 49:
                    message.b49 = reader.bool();
                    break;
                case /* bool b50 */ 50:
                    message.b50 = reader.bool();
                    break;
                case /* bool b51 */ 51:
                    message.b51 = reader.bool();
                    break;
                case /* bool b52 */ 52:
                    message.b52 = reader.bool();
                    break;
                case /* bool b53 */ 53:
                    message.b53 = reader.bool();
                    break;
                case /* bool b54 */ 54:
                    message.b54 = reader.bool();
                    break;
                case /* bool b55 */ 55:
                    message.b55 = reader.bool();
                    break;
                case /* bool b56 */ 56:
                    message.b56 = reader.bool();
                    break;
                case /* bool b57 */ 57:
                    message.b57 = reader.bool();
                    break;
                case /* bool b58 */ 58:
                    message.b58 = reader.bool();
                    break;
                case /* bool b59 */ 59:
                    message.b59 = reader.bool();
                    break;
                case /* bool b60 */ 60:
                    message.b60 = reader.bool();
                    break;
                case /* bool b61 */ 61:
                    message.b61 = reader.bool();
                    break;
                case /* bool b62 */ 62:
                    message.b62 = reader.bool();
                    break;
                case /* bool b63 */ 63:
                    message.b63 = reader.bool();
                    break;
                case /* bool b64 */ 64:
                    message.b64 = reader.bool();
                    break;
                case /* bool b65 */ 65:
                    message.b65 = reader.bool();
                    break;
                case /* bool b66 */ 66:
                    message.b66 = reader.bool();
                    break;
                case /* bool b67 */ 67:
                    message.b67 = reader.bool();
                    break;
                case /* bool b68 */ 68:
                    message.b68 = reader.bool();
                    break;
                case /* bool b69 */ 69:
                    message.b69 = reader.bool();
                    break;
                case /* proto3_unittest.TestAllTypes child */ 100:
                    message.child = TestAllTypes.internalBinaryRead(reader, reader.uint32(), options, message.child);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestHasbits, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool b1 = 1; */
        if (message.b1 !== false)
            writer.tag(1, WireType.Varint).bool(message.b1);
        /* bool b2 = 2; */
        if (message.b2 !== false)
            writer.tag(2, WireType.Varint).bool(message.b2);
        /* bool b3 = 3; */
        if (message.b3 !== false)
            writer.tag(3, WireType.Varint).bool(message.b3);
        /* bool b4 = 4; */
        if (message.b4 !== false)
            writer.tag(4, WireType.Varint).bool(message.b4);
        /* bool b5 = 5; */
        if (message.b5 !== false)
            writer.tag(5, WireType.Varint).bool(message.b5);
        /* bool b6 = 6; */
        if (message.b6 !== false)
            writer.tag(6, WireType.Varint).bool(message.b6);
        /* bool b7 = 7; */
        if (message.b7 !== false)
            writer.tag(7, WireType.Varint).bool(message.b7);
        /* bool b8 = 8; */
        if (message.b8 !== false)
            writer.tag(8, WireType.Varint).bool(message.b8);
        /* bool b9 = 9; */
        if (message.b9 !== false)
            writer.tag(9, WireType.Varint).bool(message.b9);
        /* bool b10 = 10; */
        if (message.b10 !== false)
            writer.tag(10, WireType.Varint).bool(message.b10);
        /* bool b11 = 11; */
        if (message.b11 !== false)
            writer.tag(11, WireType.Varint).bool(message.b11);
        /* bool b12 = 12; */
        if (message.b12 !== false)
            writer.tag(12, WireType.Varint).bool(message.b12);
        /* bool b13 = 13; */
        if (message.b13 !== false)
            writer.tag(13, WireType.Varint).bool(message.b13);
        /* bool b14 = 14; */
        if (message.b14 !== false)
            writer.tag(14, WireType.Varint).bool(message.b14);
        /* bool b15 = 15; */
        if (message.b15 !== false)
            writer.tag(15, WireType.Varint).bool(message.b15);
        /* bool b16 = 16; */
        if (message.b16 !== false)
            writer.tag(16, WireType.Varint).bool(message.b16);
        /* bool b17 = 17; */
        if (message.b17 !== false)
            writer.tag(17, WireType.Varint).bool(message.b17);
        /* bool b18 = 18; */
        if (message.b18 !== false)
            writer.tag(18, WireType.Varint).bool(message.b18);
        /* bool b19 = 19; */
        if (message.b19 !== false)
            writer.tag(19, WireType.Varint).bool(message.b19);
        /* bool b20 = 20; */
        if (message.b20 !== false)
            writer.tag(20, WireType.Varint).bool(message.b20);
        /* bool b21 = 21; */
        if (message.b21 !== false)
            writer.tag(21, WireType.Varint).bool(message.b21);
        /* bool b22 = 22; */
        if (message.b22 !== false)
            writer.tag(22, WireType.Varint).bool(message.b22);
        /* bool b23 = 23; */
        if (message.b23 !== false)
            writer.tag(23, WireType.Varint).bool(message.b23);
        /* bool b24 = 24; */
        if (message.b24 !== false)
            writer.tag(24, WireType.Varint).bool(message.b24);
        /* bool b25 = 25; */
        if (message.b25 !== false)
            writer.tag(25, WireType.Varint).bool(message.b25);
        /* bool b26 = 26; */
        if (message.b26 !== false)
            writer.tag(26, WireType.Varint).bool(message.b26);
        /* bool b27 = 27; */
        if (message.b27 !== false)
            writer.tag(27, WireType.Varint).bool(message.b27);
        /* bool b28 = 28; */
        if (message.b28 !== false)
            writer.tag(28, WireType.Varint).bool(message.b28);
        /* bool b29 = 29; */
        if (message.b29 !== false)
            writer.tag(29, WireType.Varint).bool(message.b29);
        /* bool b30 = 30; */
        if (message.b30 !== false)
            writer.tag(30, WireType.Varint).bool(message.b30);
        /* bool b31 = 31; */
        if (message.b31 !== false)
            writer.tag(31, WireType.Varint).bool(message.b31);
        /* bool b32 = 32; */
        if (message.b32 !== false)
            writer.tag(32, WireType.Varint).bool(message.b32);
        /* bool b33 = 33; */
        if (message.b33 !== false)
            writer.tag(33, WireType.Varint).bool(message.b33);
        /* bool b34 = 34; */
        if (message.b34 !== false)
            writer.tag(34, WireType.Varint).bool(message.b34);
        /* bool b35 = 35; */
        if (message.b35 !== false)
            writer.tag(35, WireType.Varint).bool(message.b35);
        /* bool b36 = 36; */
        if (message.b36 !== false)
            writer.tag(36, WireType.Varint).bool(message.b36);
        /* bool b37 = 37; */
        if (message.b37 !== false)
            writer.tag(37, WireType.Varint).bool(message.b37);
        /* bool b38 = 38; */
        if (message.b38 !== false)
            writer.tag(38, WireType.Varint).bool(message.b38);
        /* bool b39 = 39; */
        if (message.b39 !== false)
            writer.tag(39, WireType.Varint).bool(message.b39);
        /* bool b40 = 40; */
        if (message.b40 !== false)
            writer.tag(40, WireType.Varint).bool(message.b40);
        /* bool b41 = 41; */
        if (message.b41 !== false)
            writer.tag(41, WireType.Varint).bool(message.b41);
        /* bool b42 = 42; */
        if (message.b42 !== false)
            writer.tag(42, WireType.Varint).bool(message.b42);
        /* bool b43 = 43; */
        if (message.b43 !== false)
            writer.tag(43, WireType.Varint).bool(message.b43);
        /* bool b44 = 44; */
        if (message.b44 !== false)
            writer.tag(44, WireType.Varint).bool(message.b44);
        /* bool b45 = 45; */
        if (message.b45 !== false)
            writer.tag(45, WireType.Varint).bool(message.b45);
        /* bool b46 = 46; */
        if (message.b46 !== false)
            writer.tag(46, WireType.Varint).bool(message.b46);
        /* bool b47 = 47; */
        if (message.b47 !== false)
            writer.tag(47, WireType.Varint).bool(message.b47);
        /* bool b48 = 48; */
        if (message.b48 !== false)
            writer.tag(48, WireType.Varint).bool(message.b48);
        /* bool b49 = 49; */
        if (message.b49 !== false)
            writer.tag(49, WireType.Varint).bool(message.b49);
        /* bool b50 = 50; */
        if (message.b50 !== false)
            writer.tag(50, WireType.Varint).bool(message.b50);
        /* bool b51 = 51; */
        if (message.b51 !== false)
            writer.tag(51, WireType.Varint).bool(message.b51);
        /* bool b52 = 52; */
        if (message.b52 !== false)
            writer.tag(52, WireType.Varint).bool(message.b52);
        /* bool b53 = 53; */
        if (message.b53 !== false)
            writer.tag(53, WireType.Varint).bool(message.b53);
        /* bool b54 = 54; */
        if (message.b54 !== false)
            writer.tag(54, WireType.Varint).bool(message.b54);
        /* bool b55 = 55; */
        if (message.b55 !== false)
            writer.tag(55, WireType.Varint).bool(message.b55);
        /* bool b56 = 56; */
        if (message.b56 !== false)
            writer.tag(56, WireType.Varint).bool(message.b56);
        /* bool b57 = 57; */
        if (message.b57 !== false)
            writer.tag(57, WireType.Varint).bool(message.b57);
        /* bool b58 = 58; */
        if (message.b58 !== false)
            writer.tag(58, WireType.Varint).bool(message.b58);
        /* bool b59 = 59; */
        if (message.b59 !== false)
            writer.tag(59, WireType.Varint).bool(message.b59);
        /* bool b60 = 60; */
        if (message.b60 !== false)
            writer.tag(60, WireType.Varint).bool(message.b60);
        /* bool b61 = 61; */
        if (message.b61 !== false)
            writer.tag(61, WireType.Varint).bool(message.b61);
        /* bool b62 = 62; */
        if (message.b62 !== false)
            writer.tag(62, WireType.Varint).bool(message.b62);
        /* bool b63 = 63; */
        if (message.b63 !== false)
            writer.tag(63, WireType.Varint).bool(message.b63);
        /* bool b64 = 64; */
        if (message.b64 !== false)
            writer.tag(64, WireType.Varint).bool(message.b64);
        /* bool b65 = 65; */
        if (message.b65 !== false)
            writer.tag(65, WireType.Varint).bool(message.b65);
        /* bool b66 = 66; */
        if (message.b66 !== false)
            writer.tag(66, WireType.Varint).bool(message.b66);
        /* bool b67 = 67; */
        if (message.b67 !== false)
            writer.tag(67, WireType.Varint).bool(message.b67);
        /* bool b68 = 68; */
        if (message.b68 !== false)
            writer.tag(68, WireType.Varint).bool(message.b68);
        /* bool b69 = 69; */
        if (message.b69 !== false)
            writer.tag(69, WireType.Varint).bool(message.b69);
        /* proto3_unittest.TestAllTypes child = 100; */
        if (message.child)
            TestAllTypes.internalBinaryWrite(message.child, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto3_unittest.TestHasbits
 */
export const TestHasbits = new TestHasbits$Type();
