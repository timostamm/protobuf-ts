// @generated by protobuf-ts 2.9.5
// @generated from protobuf file "google/protobuf/util/message_differencer_unittest.proto" (package "protobuf_unittest", syntax proto2)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//
// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// This file contains messages for testing repeated field comparison
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../any";
/**
 * @generated from protobuf message protobuf_unittest.TestField
 */
export interface TestField {
    /**
     * @generated from protobuf field: optional int32 a = 3;
     */
    a?: number;
    /**
     * @generated from protobuf field: optional int32 b = 4;
     */
    b?: number;
    /**
     * @generated from protobuf field: optional int32 c = 1;
     */
    c?: number;
    /**
     * @generated from protobuf field: repeated int32 rc = 2;
     */
    rc: number[];
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestField m = 5;
     */
    m?: TestField;
}
/**
 * @generated from protobuf message protobuf_unittest.TestDiffMessage
 */
export interface TestDiffMessage {
    /**
     * @deprecated
     * @generated from protobuf field: optional int32 v = 13 [deprecated = true];
     */
    v?: number;
    /**
     * @generated from protobuf field: optional string w = 14;
     */
    w?: string;
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestField m = 15;
     */
    m?: TestField;
    /**
     * @generated from protobuf field: repeated int32 rv = 11;
     */
    rv: number[]; // Test for combinations
    /**
     * @generated from protobuf field: repeated string rw = 10;
     */
    rw: string[]; // Test for combinations
    /**
     * @deprecated
     * @generated from protobuf field: repeated protobuf_unittest.TestField rm = 12 [deprecated = true];
     */
    rm: TestField[]; // Test for combinations
    /**
     * @generated from protobuf field: repeated google.protobuf.Any rany = 16;
     */
    rany: Any[]; // Test for repeated Any type resolution
}
/**
 * @generated from protobuf message protobuf_unittest.TestDiffMessage.Item
 */
export interface TestDiffMessage_Item {
    /**
     * @generated from protobuf field: optional int32 a = 2;
     */
    a?: number; // Test basic repeated field comparison.
    /**
     * @generated from protobuf field: optional string b = 4;
     */
    b?: string; // Test basic repeated field comparison.
    /**
     * @generated from protobuf field: repeated int32 ra = 3;
     */
    ra: number[]; // Test SetOfSet Comparison.
    /**
     * @generated from protobuf field: repeated string rb = 5;
     */
    rb: string[]; // Test TreatAsMap when key is repeated
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestField m = 6;
     */
    m?: TestField; // Test TreatAsMap when key is a message
    /**
     * @generated from protobuf field: repeated protobuf_unittest.TestField rm = 7;
     */
    rm: TestField[]; // Test TreatAsMap when key is a repeated
}
// @generated message type with reflection information, may provide speed optimized methods
class TestField$Type extends MessageType<TestField> {
    constructor() {
        super("protobuf_unittest.TestField", [
            { no: 3, name: "a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "b", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "c", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "rc", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "m", kind: "message", T: () => TestField }
        ]);
    }
    create(value?: PartialMessage<TestField>): TestField {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rc = [];
        if (value !== undefined)
            reflectionMergePartial<TestField>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestField): TestField {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 a */ 3:
                    message.a = reader.int32();
                    break;
                case /* optional int32 b */ 4:
                    message.b = reader.int32();
                    break;
                case /* optional int32 c */ 1:
                    message.c = reader.int32();
                    break;
                case /* repeated int32 rc */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.rc.push(reader.int32());
                    else
                        message.rc.push(reader.int32());
                    break;
                case /* optional protobuf_unittest.TestField m */ 5:
                    message.m = TestField.internalBinaryRead(reader, reader.uint32(), options, message.m);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestField, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 a = 3; */
        if (message.a !== undefined)
            writer.tag(3, WireType.Varint).int32(message.a);
        /* optional int32 b = 4; */
        if (message.b !== undefined)
            writer.tag(4, WireType.Varint).int32(message.b);
        /* optional int32 c = 1; */
        if (message.c !== undefined)
            writer.tag(1, WireType.Varint).int32(message.c);
        /* repeated int32 rc = 2; */
        for (let i = 0; i < message.rc.length; i++)
            writer.tag(2, WireType.Varint).int32(message.rc[i]);
        /* optional protobuf_unittest.TestField m = 5; */
        if (message.m)
            TestField.internalBinaryWrite(message.m, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestField
 */
export const TestField = new TestField$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestDiffMessage$Type extends MessageType<TestDiffMessage> {
    constructor() {
        super("protobuf_unittest.TestDiffMessage", [
            { no: 13, name: "v", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "w", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "m", kind: "message", T: () => TestField },
            { no: 11, name: "rv", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "rw", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "rm", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestField },
            { no: 16, name: "rany", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Any }
        ]);
    }
    create(value?: PartialMessage<TestDiffMessage>): TestDiffMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rv = [];
        message.rw = [];
        message.rm = [];
        message.rany = [];
        if (value !== undefined)
            reflectionMergePartial<TestDiffMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestDiffMessage): TestDiffMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 v = 13 [deprecated = true];*/ 13:
                    message.v = reader.int32();
                    break;
                case /* optional string w */ 14:
                    message.w = reader.string();
                    break;
                case /* optional protobuf_unittest.TestField m */ 15:
                    message.m = TestField.internalBinaryRead(reader, reader.uint32(), options, message.m);
                    break;
                case /* repeated int32 rv */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.rv.push(reader.int32());
                    else
                        message.rv.push(reader.int32());
                    break;
                case /* repeated string rw */ 10:
                    message.rw.push(reader.string());
                    break;
                case /* repeated protobuf_unittest.TestField rm = 12 [deprecated = true];*/ 12:
                    message.rm.push(TestField.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.protobuf.Any rany */ 16:
                    message.rany.push(Any.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestDiffMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 v = 13 [deprecated = true]; */
        if (message.v !== undefined)
            writer.tag(13, WireType.Varint).int32(message.v);
        /* optional string w = 14; */
        if (message.w !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.w);
        /* optional protobuf_unittest.TestField m = 15; */
        if (message.m)
            TestField.internalBinaryWrite(message.m, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 rv = 11; */
        for (let i = 0; i < message.rv.length; i++)
            writer.tag(11, WireType.Varint).int32(message.rv[i]);
        /* repeated string rw = 10; */
        for (let i = 0; i < message.rw.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.rw[i]);
        /* repeated protobuf_unittest.TestField rm = 12 [deprecated = true]; */
        for (let i = 0; i < message.rm.length; i++)
            TestField.internalBinaryWrite(message.rm[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.Any rany = 16; */
        for (let i = 0; i < message.rany.length; i++)
            Any.internalBinaryWrite(message.rany[i], writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestDiffMessage
 */
export const TestDiffMessage = new TestDiffMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestDiffMessage_Item$Type extends MessageType<TestDiffMessage_Item> {
    constructor() {
        super("protobuf_unittest.TestDiffMessage.Item", [
            { no: 2, name: "a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "b", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ra", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "rb", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "m", kind: "message", T: () => TestField },
            { no: 7, name: "rm", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestField }
        ]);
    }
    create(value?: PartialMessage<TestDiffMessage_Item>): TestDiffMessage_Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ra = [];
        message.rb = [];
        message.rm = [];
        if (value !== undefined)
            reflectionMergePartial<TestDiffMessage_Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestDiffMessage_Item): TestDiffMessage_Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 a */ 2:
                    message.a = reader.int32();
                    break;
                case /* optional string b */ 4:
                    message.b = reader.string();
                    break;
                case /* repeated int32 ra */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.ra.push(reader.int32());
                    else
                        message.ra.push(reader.int32());
                    break;
                case /* repeated string rb */ 5:
                    message.rb.push(reader.string());
                    break;
                case /* optional protobuf_unittest.TestField m */ 6:
                    message.m = TestField.internalBinaryRead(reader, reader.uint32(), options, message.m);
                    break;
                case /* repeated protobuf_unittest.TestField rm */ 7:
                    message.rm.push(TestField.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestDiffMessage_Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 a = 2; */
        if (message.a !== undefined)
            writer.tag(2, WireType.Varint).int32(message.a);
        /* optional string b = 4; */
        if (message.b !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.b);
        /* repeated int32 ra = 3; */
        for (let i = 0; i < message.ra.length; i++)
            writer.tag(3, WireType.Varint).int32(message.ra[i]);
        /* repeated string rb = 5; */
        for (let i = 0; i < message.rb.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.rb[i]);
        /* optional protobuf_unittest.TestField m = 6; */
        if (message.m)
            TestField.internalBinaryWrite(message.m, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated protobuf_unittest.TestField rm = 7; */
        for (let i = 0; i < message.rm.length; i++)
            TestField.internalBinaryWrite(message.rm[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestDiffMessage.Item
 */
export const TestDiffMessage_Item = new TestDiffMessage_Item$Type();
