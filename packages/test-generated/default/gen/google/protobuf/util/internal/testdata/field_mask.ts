// @generated by protobuf-ts 2.9.5
// @generated from protobuf file "google/protobuf/util/internal/testdata/field_mask.proto" (package "proto_util_converter.testing", syntax proto3)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FieldMask } from "../../../field_mask";
/**
 * @generated from protobuf message proto_util_converter.testing.NestedFieldMask
 */
export interface NestedFieldMask {
    /**
     * @generated from protobuf field: string data = 1;
     */
    data: string;
    /**
     * @generated from protobuf field: google.protobuf.FieldMask single_mask = 2;
     */
    singleMask?: FieldMask;
    /**
     * @generated from protobuf field: repeated google.protobuf.FieldMask repeated_mask = 3;
     */
    repeatedMask: FieldMask[];
}
/**
 * @generated from protobuf message proto_util_converter.testing.FieldMaskTest
 */
export interface FieldMaskTest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: google.protobuf.FieldMask single_mask = 2;
     */
    singleMask?: FieldMask;
    /**
     * @generated from protobuf field: repeated google.protobuf.FieldMask repeated_mask = 3;
     */
    repeatedMask: FieldMask[];
    /**
     * @generated from protobuf field: repeated proto_util_converter.testing.NestedFieldMask nested_mask = 4;
     */
    nestedMask: NestedFieldMask[];
}
/**
 * @generated from protobuf message proto_util_converter.testing.FieldMaskTestCases
 */
export interface FieldMaskTestCases {
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper single_mask = 1;
     */
    singleMask?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper multiple_mask = 2;
     */
    multipleMask?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper snake_camel = 3;
     */
    snakeCamel?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper empty_field = 4;
     */
    emptyField?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper apiary_format1 = 5;
     */
    apiaryFormat1?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper apiary_format2 = 6;
     */
    apiaryFormat2?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper apiary_format3 = 7;
     */
    apiaryFormat3?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper map_key1 = 8;
     */
    mapKey1?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper map_key2 = 9;
     */
    mapKey2?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper map_key3 = 10;
     */
    mapKey3?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper map_key4 = 11;
     */
    mapKey4?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper map_key5 = 12;
     */
    mapKey5?: FieldMaskWrapper;
}
/**
 * @generated from protobuf message proto_util_converter.testing.FieldMaskWrapper
 */
export interface FieldMaskWrapper {
    /**
     * @generated from protobuf field: google.protobuf.FieldMask mask = 1;
     */
    mask?: FieldMask;
}
// @generated message type with reflection information, may provide speed optimized methods
class NestedFieldMask$Type extends MessageType<NestedFieldMask> {
    constructor() {
        super("proto_util_converter.testing.NestedFieldMask", [
            { no: 1, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "single_mask", kind: "message", T: () => FieldMask },
            { no: 3, name: "repeated_mask", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FieldMask }
        ]);
    }
    create(value?: PartialMessage<NestedFieldMask>): NestedFieldMask {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = "";
        message.repeatedMask = [];
        if (value !== undefined)
            reflectionMergePartial<NestedFieldMask>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NestedFieldMask): NestedFieldMask {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string data */ 1:
                    message.data = reader.string();
                    break;
                case /* google.protobuf.FieldMask single_mask */ 2:
                    message.singleMask = FieldMask.internalBinaryRead(reader, reader.uint32(), options, message.singleMask);
                    break;
                case /* repeated google.protobuf.FieldMask repeated_mask */ 3:
                    message.repeatedMask.push(FieldMask.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NestedFieldMask, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string data = 1; */
        if (message.data !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.data);
        /* google.protobuf.FieldMask single_mask = 2; */
        if (message.singleMask)
            FieldMask.internalBinaryWrite(message.singleMask, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.FieldMask repeated_mask = 3; */
        for (let i = 0; i < message.repeatedMask.length; i++)
            FieldMask.internalBinaryWrite(message.repeatedMask[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.NestedFieldMask
 */
export const NestedFieldMask = new NestedFieldMask$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldMaskTest$Type extends MessageType<FieldMaskTest> {
    constructor() {
        super("proto_util_converter.testing.FieldMaskTest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "single_mask", kind: "message", T: () => FieldMask },
            { no: 3, name: "repeated_mask", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FieldMask },
            { no: 4, name: "nested_mask", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NestedFieldMask }
        ]);
    }
    create(value?: PartialMessage<FieldMaskTest>): FieldMaskTest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.repeatedMask = [];
        message.nestedMask = [];
        if (value !== undefined)
            reflectionMergePartial<FieldMaskTest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldMaskTest): FieldMaskTest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* google.protobuf.FieldMask single_mask */ 2:
                    message.singleMask = FieldMask.internalBinaryRead(reader, reader.uint32(), options, message.singleMask);
                    break;
                case /* repeated google.protobuf.FieldMask repeated_mask */ 3:
                    message.repeatedMask.push(FieldMask.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated proto_util_converter.testing.NestedFieldMask nested_mask */ 4:
                    message.nestedMask.push(NestedFieldMask.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldMaskTest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* google.protobuf.FieldMask single_mask = 2; */
        if (message.singleMask)
            FieldMask.internalBinaryWrite(message.singleMask, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.FieldMask repeated_mask = 3; */
        for (let i = 0; i < message.repeatedMask.length; i++)
            FieldMask.internalBinaryWrite(message.repeatedMask[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated proto_util_converter.testing.NestedFieldMask nested_mask = 4; */
        for (let i = 0; i < message.nestedMask.length; i++)
            NestedFieldMask.internalBinaryWrite(message.nestedMask[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.FieldMaskTest
 */
export const FieldMaskTest = new FieldMaskTest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldMaskTestCases$Type extends MessageType<FieldMaskTestCases> {
    constructor() {
        super("proto_util_converter.testing.FieldMaskTestCases", [
            { no: 1, name: "single_mask", kind: "message", T: () => FieldMaskWrapper },
            { no: 2, name: "multiple_mask", kind: "message", T: () => FieldMaskWrapper },
            { no: 3, name: "snake_camel", kind: "message", T: () => FieldMaskWrapper },
            { no: 4, name: "empty_field", kind: "message", T: () => FieldMaskWrapper },
            { no: 5, name: "apiary_format1", kind: "message", T: () => FieldMaskWrapper },
            { no: 6, name: "apiary_format2", kind: "message", T: () => FieldMaskWrapper },
            { no: 7, name: "apiary_format3", kind: "message", T: () => FieldMaskWrapper },
            { no: 8, name: "map_key1", kind: "message", T: () => FieldMaskWrapper },
            { no: 9, name: "map_key2", kind: "message", T: () => FieldMaskWrapper },
            { no: 10, name: "map_key3", kind: "message", T: () => FieldMaskWrapper },
            { no: 11, name: "map_key4", kind: "message", T: () => FieldMaskWrapper },
            { no: 12, name: "map_key5", kind: "message", T: () => FieldMaskWrapper }
        ]);
    }
    create(value?: PartialMessage<FieldMaskTestCases>): FieldMaskTestCases {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldMaskTestCases>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldMaskTestCases): FieldMaskTestCases {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto_util_converter.testing.FieldMaskWrapper single_mask */ 1:
                    message.singleMask = FieldMaskWrapper.internalBinaryRead(reader, reader.uint32(), options, message.singleMask);
                    break;
                case /* proto_util_converter.testing.FieldMaskWrapper multiple_mask */ 2:
                    message.multipleMask = FieldMaskWrapper.internalBinaryRead(reader, reader.uint32(), options, message.multipleMask);
                    break;
                case /* proto_util_converter.testing.FieldMaskWrapper snake_camel */ 3:
                    message.snakeCamel = FieldMaskWrapper.internalBinaryRead(reader, reader.uint32(), options, message.snakeCamel);
                    break;
                case /* proto_util_converter.testing.FieldMaskWrapper empty_field */ 4:
                    message.emptyField = FieldMaskWrapper.internalBinaryRead(reader, reader.uint32(), options, message.emptyField);
                    break;
                case /* proto_util_converter.testing.FieldMaskWrapper apiary_format1 */ 5:
                    message.apiaryFormat1 = FieldMaskWrapper.internalBinaryRead(reader, reader.uint32(), options, message.apiaryFormat1);
                    break;
                case /* proto_util_converter.testing.FieldMaskWrapper apiary_format2 */ 6:
                    message.apiaryFormat2 = FieldMaskWrapper.internalBinaryRead(reader, reader.uint32(), options, message.apiaryFormat2);
                    break;
                case /* proto_util_converter.testing.FieldMaskWrapper apiary_format3 */ 7:
                    message.apiaryFormat3 = FieldMaskWrapper.internalBinaryRead(reader, reader.uint32(), options, message.apiaryFormat3);
                    break;
                case /* proto_util_converter.testing.FieldMaskWrapper map_key1 */ 8:
                    message.mapKey1 = FieldMaskWrapper.internalBinaryRead(reader, reader.uint32(), options, message.mapKey1);
                    break;
                case /* proto_util_converter.testing.FieldMaskWrapper map_key2 */ 9:
                    message.mapKey2 = FieldMaskWrapper.internalBinaryRead(reader, reader.uint32(), options, message.mapKey2);
                    break;
                case /* proto_util_converter.testing.FieldMaskWrapper map_key3 */ 10:
                    message.mapKey3 = FieldMaskWrapper.internalBinaryRead(reader, reader.uint32(), options, message.mapKey3);
                    break;
                case /* proto_util_converter.testing.FieldMaskWrapper map_key4 */ 11:
                    message.mapKey4 = FieldMaskWrapper.internalBinaryRead(reader, reader.uint32(), options, message.mapKey4);
                    break;
                case /* proto_util_converter.testing.FieldMaskWrapper map_key5 */ 12:
                    message.mapKey5 = FieldMaskWrapper.internalBinaryRead(reader, reader.uint32(), options, message.mapKey5);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldMaskTestCases, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto_util_converter.testing.FieldMaskWrapper single_mask = 1; */
        if (message.singleMask)
            FieldMaskWrapper.internalBinaryWrite(message.singleMask, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.FieldMaskWrapper multiple_mask = 2; */
        if (message.multipleMask)
            FieldMaskWrapper.internalBinaryWrite(message.multipleMask, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.FieldMaskWrapper snake_camel = 3; */
        if (message.snakeCamel)
            FieldMaskWrapper.internalBinaryWrite(message.snakeCamel, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.FieldMaskWrapper empty_field = 4; */
        if (message.emptyField)
            FieldMaskWrapper.internalBinaryWrite(message.emptyField, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.FieldMaskWrapper apiary_format1 = 5; */
        if (message.apiaryFormat1)
            FieldMaskWrapper.internalBinaryWrite(message.apiaryFormat1, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.FieldMaskWrapper apiary_format2 = 6; */
        if (message.apiaryFormat2)
            FieldMaskWrapper.internalBinaryWrite(message.apiaryFormat2, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.FieldMaskWrapper apiary_format3 = 7; */
        if (message.apiaryFormat3)
            FieldMaskWrapper.internalBinaryWrite(message.apiaryFormat3, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.FieldMaskWrapper map_key1 = 8; */
        if (message.mapKey1)
            FieldMaskWrapper.internalBinaryWrite(message.mapKey1, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.FieldMaskWrapper map_key2 = 9; */
        if (message.mapKey2)
            FieldMaskWrapper.internalBinaryWrite(message.mapKey2, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.FieldMaskWrapper map_key3 = 10; */
        if (message.mapKey3)
            FieldMaskWrapper.internalBinaryWrite(message.mapKey3, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.FieldMaskWrapper map_key4 = 11; */
        if (message.mapKey4)
            FieldMaskWrapper.internalBinaryWrite(message.mapKey4, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.FieldMaskWrapper map_key5 = 12; */
        if (message.mapKey5)
            FieldMaskWrapper.internalBinaryWrite(message.mapKey5, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.FieldMaskTestCases
 */
export const FieldMaskTestCases = new FieldMaskTestCases$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldMaskWrapper$Type extends MessageType<FieldMaskWrapper> {
    constructor() {
        super("proto_util_converter.testing.FieldMaskWrapper", [
            { no: 1, name: "mask", kind: "message", T: () => FieldMask }
        ]);
    }
    create(value?: PartialMessage<FieldMaskWrapper>): FieldMaskWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldMaskWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldMaskWrapper): FieldMaskWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.FieldMask mask */ 1:
                    message.mask = FieldMask.internalBinaryRead(reader, reader.uint32(), options, message.mask);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldMaskWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.FieldMask mask = 1; */
        if (message.mask)
            FieldMask.internalBinaryWrite(message.mask, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.FieldMaskWrapper
 */
export const FieldMaskWrapper = new FieldMaskWrapper$Type();
/**
 * @generated ServiceType for protobuf service proto_util_converter.testing.FieldMaskTestService
 */
export const FieldMaskTestService = new ServiceType("proto_util_converter.testing.FieldMaskTestService", [
    { name: "Call", options: {}, I: FieldMaskTestCases, O: FieldMaskTestCases }
]);
