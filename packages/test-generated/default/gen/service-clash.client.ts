// @generated by protobuf-ts 2.9.5
// @generated from protobuf file "service-clash.client.proto" (package "spec", syntax proto3)
// tslint:disable
//
// This file generates to service-clash.client.ts.
// It blocks the client file for service.clash.proto.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message spec.ClashWithExampleServiceClient
 */
export interface ClashWithExampleServiceClient {
}
// @generated message type with reflection information, may provide speed optimized methods
class ClashWithExampleServiceClient$Type extends MessageType<ClashWithExampleServiceClient> {
    constructor() {
        super("spec.ClashWithExampleServiceClient", []);
    }
    create(value?: PartialMessage<ClashWithExampleServiceClient>): ClashWithExampleServiceClient {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ClashWithExampleServiceClient>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClashWithExampleServiceClient): ClashWithExampleServiceClient {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClashWithExampleServiceClient, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.ClashWithExampleServiceClient
 */
export const ClashWithExampleServiceClient = new ClashWithExampleServiceClient$Type();
