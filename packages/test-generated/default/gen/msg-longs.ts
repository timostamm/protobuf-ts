// @generated by protobuf-ts 2.9.5
// @generated from protobuf file "msg-longs.proto" (package "spec", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message spec.LongsMessage
 */
export interface LongsMessage {
    /**
     * @generated from protobuf field: fixed64 fixed64_field_min = 1 [jstype = JS_NORMAL];
     */
    fixed64FieldMin: bigint;
    /**
     * @generated from protobuf field: fixed64 fixed64_field_max = 2 [jstype = JS_NORMAL];
     */
    fixed64FieldMax: bigint;
    /**
     * @generated from protobuf field: int64 int64_field_min = 3 [jstype = JS_NORMAL];
     */
    int64FieldMin: bigint;
    /**
     * @generated from protobuf field: int64 int64_field_max = 4 [jstype = JS_NORMAL];
     */
    int64FieldMax: bigint;
    /**
     * @generated from protobuf field: sfixed64 sfixed64_field_min = 5;
     */
    sfixed64FieldMin: bigint;
    /**
     * @generated from protobuf field: sfixed64 sfixed64_field_max = 6;
     */
    sfixed64FieldMax: bigint;
    /**
     * @generated from protobuf field: sint64 sint64_field_min = 7;
     */
    sint64FieldMin: bigint;
    /**
     * @generated from protobuf field: sint64 sint64_field_max = 8;
     */
    sint64FieldMax: bigint;
    /**
     * @generated from protobuf field: uint64 uint64_field_min = 9;
     */
    uint64FieldMin: bigint;
    /**
     * @generated from protobuf field: uint64 uint64_field_max = 10;
     */
    uint64FieldMax: bigint;
    // 

    /**
     * @generated from protobuf field: fixed64 fixed64_field_min_str = 11 [jstype = JS_STRING];
     */
    fixed64FieldMinStr: string;
    /**
     * @generated from protobuf field: fixed64 fixed64_field_max_str = 12 [jstype = JS_STRING];
     */
    fixed64FieldMaxStr: string;
    /**
     * @generated from protobuf field: int64 int64_field_min_str = 13 [jstype = JS_STRING];
     */
    int64FieldMinStr: string;
    /**
     * @generated from protobuf field: int64 int64_field_max_str = 14 [jstype = JS_STRING];
     */
    int64FieldMaxStr: string;
    /**
     * @generated from protobuf field: sfixed64 sfixed64_field_min_str = 15 [jstype = JS_STRING];
     */
    sfixed64FieldMinStr: string;
    /**
     * @generated from protobuf field: sfixed64 sfixed64_field_max_str = 16 [jstype = JS_STRING];
     */
    sfixed64FieldMaxStr: string;
    /**
     * @generated from protobuf field: sint64 sint64_field_min_str = 17 [jstype = JS_STRING];
     */
    sint64FieldMinStr: string;
    /**
     * @generated from protobuf field: sint64 sint64_field_max_str = 18 [jstype = JS_STRING];
     */
    sint64FieldMaxStr: string;
    /**
     * @generated from protobuf field: uint64 uint64_field_min_str = 19 [jstype = JS_STRING];
     */
    uint64FieldMinStr: string;
    /**
     * @generated from protobuf field: uint64 uint64_field_max_str = 20 [jstype = JS_STRING];
     */
    uint64FieldMaxStr: string;
    // 

    /**
     * @generated from protobuf field: fixed64 fixed64_field_min_num = 21 [jstype = JS_NUMBER];
     */
    fixed64FieldMinNum: number;
    /**
     * @generated from protobuf field: fixed64 fixed64_field_max_num = 22 [jstype = JS_NUMBER];
     */
    fixed64FieldMaxNum: number;
    /**
     * @generated from protobuf field: int64 int64_field_min_num = 23 [jstype = JS_NUMBER];
     */
    int64FieldMinNum: number;
    /**
     * @generated from protobuf field: int64 int64_field_max_num = 24 [jstype = JS_NUMBER];
     */
    int64FieldMaxNum: number;
    /**
     * @generated from protobuf field: sfixed64 sfixed64_field_min_num = 25 [jstype = JS_NUMBER];
     */
    sfixed64FieldMinNum: number;
    /**
     * @generated from protobuf field: sfixed64 sfixed64_field_max_num = 26 [jstype = JS_NUMBER];
     */
    sfixed64FieldMaxNum: number;
    /**
     * @generated from protobuf field: sint64 sint64_field_min_num = 27 [jstype = JS_NUMBER];
     */
    sint64FieldMinNum: number;
    /**
     * @generated from protobuf field: sint64 sint64_field_max_num = 28 [jstype = JS_NUMBER];
     */
    sint64FieldMaxNum: number;
    /**
     * @generated from protobuf field: uint64 uint64_field_min_num = 29 [jstype = JS_NUMBER];
     */
    uint64FieldMinNum: number;
    /**
     * @generated from protobuf field: uint64 uint64_field_max_num = 30 [jstype = JS_NUMBER];
     */
    uint64FieldMaxNum: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class LongsMessage$Type extends MessageType<LongsMessage> {
    constructor() {
        super("spec.LongsMessage", [
            { no: 1, name: "fixed64_field_min", kind: "scalar", T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "fixed64_field_max", kind: "scalar", T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "int64_field_min", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "int64_field_max", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "sfixed64_field_min", kind: "scalar", T: 16 /*ScalarType.SFIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "sfixed64_field_max", kind: "scalar", T: 16 /*ScalarType.SFIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "sint64_field_min", kind: "scalar", T: 18 /*ScalarType.SINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "sint64_field_max", kind: "scalar", T: 18 /*ScalarType.SINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "uint64_field_min", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "uint64_field_max", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "fixed64_field_min_str", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ },
            { no: 12, name: "fixed64_field_max_str", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ },
            { no: 13, name: "int64_field_min_str", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 14, name: "int64_field_max_str", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 15, name: "sfixed64_field_min_str", kind: "scalar", T: 16 /*ScalarType.SFIXED64*/ },
            { no: 16, name: "sfixed64_field_max_str", kind: "scalar", T: 16 /*ScalarType.SFIXED64*/ },
            { no: 17, name: "sint64_field_min_str", kind: "scalar", T: 18 /*ScalarType.SINT64*/ },
            { no: 18, name: "sint64_field_max_str", kind: "scalar", T: 18 /*ScalarType.SINT64*/ },
            { no: 19, name: "uint64_field_min_str", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 20, name: "uint64_field_max_str", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 21, name: "fixed64_field_min_num", kind: "scalar", T: 6 /*ScalarType.FIXED64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 22, name: "fixed64_field_max_num", kind: "scalar", T: 6 /*ScalarType.FIXED64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 23, name: "int64_field_min_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 24, name: "int64_field_max_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 25, name: "sfixed64_field_min_num", kind: "scalar", T: 16 /*ScalarType.SFIXED64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 26, name: "sfixed64_field_max_num", kind: "scalar", T: 16 /*ScalarType.SFIXED64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 27, name: "sint64_field_min_num", kind: "scalar", T: 18 /*ScalarType.SINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 28, name: "sint64_field_max_num", kind: "scalar", T: 18 /*ScalarType.SINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 29, name: "uint64_field_min_num", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 30, name: "uint64_field_max_num", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<LongsMessage>): LongsMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fixed64FieldMin = 0n;
        message.fixed64FieldMax = 0n;
        message.int64FieldMin = 0n;
        message.int64FieldMax = 0n;
        message.sfixed64FieldMin = 0n;
        message.sfixed64FieldMax = 0n;
        message.sint64FieldMin = 0n;
        message.sint64FieldMax = 0n;
        message.uint64FieldMin = 0n;
        message.uint64FieldMax = 0n;
        message.fixed64FieldMinStr = "0";
        message.fixed64FieldMaxStr = "0";
        message.int64FieldMinStr = "0";
        message.int64FieldMaxStr = "0";
        message.sfixed64FieldMinStr = "0";
        message.sfixed64FieldMaxStr = "0";
        message.sint64FieldMinStr = "0";
        message.sint64FieldMaxStr = "0";
        message.uint64FieldMinStr = "0";
        message.uint64FieldMaxStr = "0";
        message.fixed64FieldMinNum = 0;
        message.fixed64FieldMaxNum = 0;
        message.int64FieldMinNum = 0;
        message.int64FieldMaxNum = 0;
        message.sfixed64FieldMinNum = 0;
        message.sfixed64FieldMaxNum = 0;
        message.sint64FieldMinNum = 0;
        message.sint64FieldMaxNum = 0;
        message.uint64FieldMinNum = 0;
        message.uint64FieldMaxNum = 0;
        if (value !== undefined)
            reflectionMergePartial<LongsMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LongsMessage): LongsMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* fixed64 fixed64_field_min = 1 [jstype = JS_NORMAL];*/ 1:
                    message.fixed64FieldMin = reader.fixed64().toBigInt();
                    break;
                case /* fixed64 fixed64_field_max = 2 [jstype = JS_NORMAL];*/ 2:
                    message.fixed64FieldMax = reader.fixed64().toBigInt();
                    break;
                case /* int64 int64_field_min = 3 [jstype = JS_NORMAL];*/ 3:
                    message.int64FieldMin = reader.int64().toBigInt();
                    break;
                case /* int64 int64_field_max = 4 [jstype = JS_NORMAL];*/ 4:
                    message.int64FieldMax = reader.int64().toBigInt();
                    break;
                case /* sfixed64 sfixed64_field_min */ 5:
                    message.sfixed64FieldMin = reader.sfixed64().toBigInt();
                    break;
                case /* sfixed64 sfixed64_field_max */ 6:
                    message.sfixed64FieldMax = reader.sfixed64().toBigInt();
                    break;
                case /* sint64 sint64_field_min */ 7:
                    message.sint64FieldMin = reader.sint64().toBigInt();
                    break;
                case /* sint64 sint64_field_max */ 8:
                    message.sint64FieldMax = reader.sint64().toBigInt();
                    break;
                case /* uint64 uint64_field_min */ 9:
                    message.uint64FieldMin = reader.uint64().toBigInt();
                    break;
                case /* uint64 uint64_field_max */ 10:
                    message.uint64FieldMax = reader.uint64().toBigInt();
                    break;
                case /* fixed64 fixed64_field_min_str = 11 [jstype = JS_STRING];*/ 11:
                    message.fixed64FieldMinStr = reader.fixed64().toString();
                    break;
                case /* fixed64 fixed64_field_max_str = 12 [jstype = JS_STRING];*/ 12:
                    message.fixed64FieldMaxStr = reader.fixed64().toString();
                    break;
                case /* int64 int64_field_min_str = 13 [jstype = JS_STRING];*/ 13:
                    message.int64FieldMinStr = reader.int64().toString();
                    break;
                case /* int64 int64_field_max_str = 14 [jstype = JS_STRING];*/ 14:
                    message.int64FieldMaxStr = reader.int64().toString();
                    break;
                case /* sfixed64 sfixed64_field_min_str = 15 [jstype = JS_STRING];*/ 15:
                    message.sfixed64FieldMinStr = reader.sfixed64().toString();
                    break;
                case /* sfixed64 sfixed64_field_max_str = 16 [jstype = JS_STRING];*/ 16:
                    message.sfixed64FieldMaxStr = reader.sfixed64().toString();
                    break;
                case /* sint64 sint64_field_min_str = 17 [jstype = JS_STRING];*/ 17:
                    message.sint64FieldMinStr = reader.sint64().toString();
                    break;
                case /* sint64 sint64_field_max_str = 18 [jstype = JS_STRING];*/ 18:
                    message.sint64FieldMaxStr = reader.sint64().toString();
                    break;
                case /* uint64 uint64_field_min_str = 19 [jstype = JS_STRING];*/ 19:
                    message.uint64FieldMinStr = reader.uint64().toString();
                    break;
                case /* uint64 uint64_field_max_str = 20 [jstype = JS_STRING];*/ 20:
                    message.uint64FieldMaxStr = reader.uint64().toString();
                    break;
                case /* fixed64 fixed64_field_min_num = 21 [jstype = JS_NUMBER];*/ 21:
                    message.fixed64FieldMinNum = reader.fixed64().toNumber();
                    break;
                case /* fixed64 fixed64_field_max_num = 22 [jstype = JS_NUMBER];*/ 22:
                    message.fixed64FieldMaxNum = reader.fixed64().toNumber();
                    break;
                case /* int64 int64_field_min_num = 23 [jstype = JS_NUMBER];*/ 23:
                    message.int64FieldMinNum = reader.int64().toNumber();
                    break;
                case /* int64 int64_field_max_num = 24 [jstype = JS_NUMBER];*/ 24:
                    message.int64FieldMaxNum = reader.int64().toNumber();
                    break;
                case /* sfixed64 sfixed64_field_min_num = 25 [jstype = JS_NUMBER];*/ 25:
                    message.sfixed64FieldMinNum = reader.sfixed64().toNumber();
                    break;
                case /* sfixed64 sfixed64_field_max_num = 26 [jstype = JS_NUMBER];*/ 26:
                    message.sfixed64FieldMaxNum = reader.sfixed64().toNumber();
                    break;
                case /* sint64 sint64_field_min_num = 27 [jstype = JS_NUMBER];*/ 27:
                    message.sint64FieldMinNum = reader.sint64().toNumber();
                    break;
                case /* sint64 sint64_field_max_num = 28 [jstype = JS_NUMBER];*/ 28:
                    message.sint64FieldMaxNum = reader.sint64().toNumber();
                    break;
                case /* uint64 uint64_field_min_num = 29 [jstype = JS_NUMBER];*/ 29:
                    message.uint64FieldMinNum = reader.uint64().toNumber();
                    break;
                case /* uint64 uint64_field_max_num = 30 [jstype = JS_NUMBER];*/ 30:
                    message.uint64FieldMaxNum = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LongsMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* fixed64 fixed64_field_min = 1 [jstype = JS_NORMAL]; */
        if (message.fixed64FieldMin !== 0n)
            writer.tag(1, WireType.Bit64).fixed64(message.fixed64FieldMin);
        /* fixed64 fixed64_field_max = 2 [jstype = JS_NORMAL]; */
        if (message.fixed64FieldMax !== 0n)
            writer.tag(2, WireType.Bit64).fixed64(message.fixed64FieldMax);
        /* int64 int64_field_min = 3 [jstype = JS_NORMAL]; */
        if (message.int64FieldMin !== 0n)
            writer.tag(3, WireType.Varint).int64(message.int64FieldMin);
        /* int64 int64_field_max = 4 [jstype = JS_NORMAL]; */
        if (message.int64FieldMax !== 0n)
            writer.tag(4, WireType.Varint).int64(message.int64FieldMax);
        /* sfixed64 sfixed64_field_min = 5; */
        if (message.sfixed64FieldMin !== 0n)
            writer.tag(5, WireType.Bit64).sfixed64(message.sfixed64FieldMin);
        /* sfixed64 sfixed64_field_max = 6; */
        if (message.sfixed64FieldMax !== 0n)
            writer.tag(6, WireType.Bit64).sfixed64(message.sfixed64FieldMax);
        /* sint64 sint64_field_min = 7; */
        if (message.sint64FieldMin !== 0n)
            writer.tag(7, WireType.Varint).sint64(message.sint64FieldMin);
        /* sint64 sint64_field_max = 8; */
        if (message.sint64FieldMax !== 0n)
            writer.tag(8, WireType.Varint).sint64(message.sint64FieldMax);
        /* uint64 uint64_field_min = 9; */
        if (message.uint64FieldMin !== 0n)
            writer.tag(9, WireType.Varint).uint64(message.uint64FieldMin);
        /* uint64 uint64_field_max = 10; */
        if (message.uint64FieldMax !== 0n)
            writer.tag(10, WireType.Varint).uint64(message.uint64FieldMax);
        /* fixed64 fixed64_field_min_str = 11 [jstype = JS_STRING]; */
        if (message.fixed64FieldMinStr !== "0")
            writer.tag(11, WireType.Bit64).fixed64(message.fixed64FieldMinStr);
        /* fixed64 fixed64_field_max_str = 12 [jstype = JS_STRING]; */
        if (message.fixed64FieldMaxStr !== "0")
            writer.tag(12, WireType.Bit64).fixed64(message.fixed64FieldMaxStr);
        /* int64 int64_field_min_str = 13 [jstype = JS_STRING]; */
        if (message.int64FieldMinStr !== "0")
            writer.tag(13, WireType.Varint).int64(message.int64FieldMinStr);
        /* int64 int64_field_max_str = 14 [jstype = JS_STRING]; */
        if (message.int64FieldMaxStr !== "0")
            writer.tag(14, WireType.Varint).int64(message.int64FieldMaxStr);
        /* sfixed64 sfixed64_field_min_str = 15 [jstype = JS_STRING]; */
        if (message.sfixed64FieldMinStr !== "0")
            writer.tag(15, WireType.Bit64).sfixed64(message.sfixed64FieldMinStr);
        /* sfixed64 sfixed64_field_max_str = 16 [jstype = JS_STRING]; */
        if (message.sfixed64FieldMaxStr !== "0")
            writer.tag(16, WireType.Bit64).sfixed64(message.sfixed64FieldMaxStr);
        /* sint64 sint64_field_min_str = 17 [jstype = JS_STRING]; */
        if (message.sint64FieldMinStr !== "0")
            writer.tag(17, WireType.Varint).sint64(message.sint64FieldMinStr);
        /* sint64 sint64_field_max_str = 18 [jstype = JS_STRING]; */
        if (message.sint64FieldMaxStr !== "0")
            writer.tag(18, WireType.Varint).sint64(message.sint64FieldMaxStr);
        /* uint64 uint64_field_min_str = 19 [jstype = JS_STRING]; */
        if (message.uint64FieldMinStr !== "0")
            writer.tag(19, WireType.Varint).uint64(message.uint64FieldMinStr);
        /* uint64 uint64_field_max_str = 20 [jstype = JS_STRING]; */
        if (message.uint64FieldMaxStr !== "0")
            writer.tag(20, WireType.Varint).uint64(message.uint64FieldMaxStr);
        /* fixed64 fixed64_field_min_num = 21 [jstype = JS_NUMBER]; */
        if (message.fixed64FieldMinNum !== 0)
            writer.tag(21, WireType.Bit64).fixed64(message.fixed64FieldMinNum);
        /* fixed64 fixed64_field_max_num = 22 [jstype = JS_NUMBER]; */
        if (message.fixed64FieldMaxNum !== 0)
            writer.tag(22, WireType.Bit64).fixed64(message.fixed64FieldMaxNum);
        /* int64 int64_field_min_num = 23 [jstype = JS_NUMBER]; */
        if (message.int64FieldMinNum !== 0)
            writer.tag(23, WireType.Varint).int64(message.int64FieldMinNum);
        /* int64 int64_field_max_num = 24 [jstype = JS_NUMBER]; */
        if (message.int64FieldMaxNum !== 0)
            writer.tag(24, WireType.Varint).int64(message.int64FieldMaxNum);
        /* sfixed64 sfixed64_field_min_num = 25 [jstype = JS_NUMBER]; */
        if (message.sfixed64FieldMinNum !== 0)
            writer.tag(25, WireType.Bit64).sfixed64(message.sfixed64FieldMinNum);
        /* sfixed64 sfixed64_field_max_num = 26 [jstype = JS_NUMBER]; */
        if (message.sfixed64FieldMaxNum !== 0)
            writer.tag(26, WireType.Bit64).sfixed64(message.sfixed64FieldMaxNum);
        /* sint64 sint64_field_min_num = 27 [jstype = JS_NUMBER]; */
        if (message.sint64FieldMinNum !== 0)
            writer.tag(27, WireType.Varint).sint64(message.sint64FieldMinNum);
        /* sint64 sint64_field_max_num = 28 [jstype = JS_NUMBER]; */
        if (message.sint64FieldMaxNum !== 0)
            writer.tag(28, WireType.Varint).sint64(message.sint64FieldMaxNum);
        /* uint64 uint64_field_min_num = 29 [jstype = JS_NUMBER]; */
        if (message.uint64FieldMinNum !== 0)
            writer.tag(29, WireType.Varint).uint64(message.uint64FieldMinNum);
        /* uint64 uint64_field_max_num = 30 [jstype = JS_NUMBER]; */
        if (message.uint64FieldMaxNum !== 0)
            writer.tag(30, WireType.Varint).uint64(message.uint64FieldMaxNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.LongsMessage
 */
export const LongsMessage = new LongsMessage$Type();
