// @generated by protobuf-ts 2.9.5 with parameter force_optimize_code_size,long_type_string
// @generated from protobuf file "google/protobuf/unittest_custom_options.proto" (package "protobuf_unittest", syntax proto2)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//
// Author: benjy@google.com (Benjy Weinberger)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// A proto file used to test the "custom options" feature of google.protobuf.
//
import { AggregateService } from "./unittest_custom_options";
import type { AggregateMessage } from "./unittest_custom_options";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TestServiceWithCustomOptions } from "./unittest_custom_options";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CustomOptionFooResponse } from "./unittest_custom_options";
import type { CustomOptionFooRequest } from "./unittest_custom_options";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service protobuf_unittest.TestServiceWithCustomOptions
 */
export interface ITestServiceWithCustomOptionsClient {
    /**
     * @generated from protobuf rpc: Foo(protobuf_unittest.CustomOptionFooRequest) returns (protobuf_unittest.CustomOptionFooResponse);
     */
    foo(input: CustomOptionFooRequest, options?: RpcOptions): UnaryCall<CustomOptionFooRequest, CustomOptionFooResponse>;
}
/**
 * @generated from protobuf service protobuf_unittest.TestServiceWithCustomOptions
 */
export class TestServiceWithCustomOptionsClient implements ITestServiceWithCustomOptionsClient, ServiceInfo {
    typeName = TestServiceWithCustomOptions.typeName;
    methods = TestServiceWithCustomOptions.methods;
    options = TestServiceWithCustomOptions.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Foo(protobuf_unittest.CustomOptionFooRequest) returns (protobuf_unittest.CustomOptionFooResponse);
     */
    foo(input: CustomOptionFooRequest, options?: RpcOptions): UnaryCall<CustomOptionFooRequest, CustomOptionFooResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CustomOptionFooRequest, CustomOptionFooResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service protobuf_unittest.AggregateService
 */
export interface IAggregateServiceClient {
    /**
     * @generated from protobuf rpc: Method(protobuf_unittest.AggregateMessage) returns (protobuf_unittest.AggregateMessage);
     */
    method(input: AggregateMessage, options?: RpcOptions): UnaryCall<AggregateMessage, AggregateMessage>;
}
/**
 * @generated from protobuf service protobuf_unittest.AggregateService
 */
export class AggregateServiceClient implements IAggregateServiceClient, ServiceInfo {
    typeName = AggregateService.typeName;
    methods = AggregateService.methods;
    options = AggregateService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Method(protobuf_unittest.AggregateMessage) returns (protobuf_unittest.AggregateMessage);
     */
    method(input: AggregateMessage, options?: RpcOptions): UnaryCall<AggregateMessage, AggregateMessage> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AggregateMessage, AggregateMessage>("unary", this._transport, method, opt, input);
    }
}
