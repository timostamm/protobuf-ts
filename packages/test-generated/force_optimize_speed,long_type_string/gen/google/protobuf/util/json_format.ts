// @generated by protobuf-ts 2.9.5 with parameter force_optimize_code_size,long_type_string
// @generated from protobuf file "google/protobuf/util/json_format.proto" (package "protobuf_unittest", syntax proto2)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//
// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// A proto file we will use for unit testing.
//
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message protobuf_unittest.TestFlagsAndStrings
 */
export interface TestFlagsAndStrings {
    /**
     * @generated from protobuf field: int32 A = 1 [json_name = "A"];
     */
    a: number;
}
/**
 * @generated from protobuf message protobuf_unittest.TestFlagsAndStrings.RepeatedGroup
 */
export interface TestFlagsAndStrings_RepeatedGroup {
    /**
     * @generated from protobuf field: string f = 3;
     */
    f: string;
}
/**
 * @generated from protobuf message protobuf_unittest.TestBase64ByteArrays
 */
export interface TestBase64ByteArrays {
    /**
     * @generated from protobuf field: bytes a = 1;
     */
    a: Uint8Array;
}
/**
 * @generated from protobuf message protobuf_unittest.TestJavaScriptJSON
 */
export interface TestJavaScriptJSON {
    /**
     * @generated from protobuf field: optional int32 a = 1;
     */
    a?: number;
    /**
     * @generated from protobuf field: optional float final = 2;
     */
    final?: number;
    /**
     * @generated from protobuf field: optional string in = 3;
     */
    in?: string;
    /**
     * @generated from protobuf field: optional string Var = 4 [json_name = "Var"];
     */
    var?: string;
}
/**
 * @generated from protobuf message protobuf_unittest.TestJavaScriptOrderJSON1
 */
export interface TestJavaScriptOrderJSON1 {
    /**
     * @generated from protobuf field: optional int32 d = 1;
     */
    d?: number;
    /**
     * @generated from protobuf field: optional int32 c = 2;
     */
    c?: number;
    /**
     * @generated from protobuf field: optional bool x = 3;
     */
    x?: boolean;
    /**
     * @generated from protobuf field: optional int32 b = 4;
     */
    b?: number;
    /**
     * @generated from protobuf field: optional int32 a = 5;
     */
    a?: number;
}
/**
 * @generated from protobuf message protobuf_unittest.TestJavaScriptOrderJSON2
 */
export interface TestJavaScriptOrderJSON2 {
    /**
     * @generated from protobuf field: optional int32 d = 1;
     */
    d?: number;
    /**
     * @generated from protobuf field: optional int32 c = 2;
     */
    c?: number;
    /**
     * @generated from protobuf field: optional bool x = 3;
     */
    x?: boolean;
    /**
     * @generated from protobuf field: optional int32 b = 4;
     */
    b?: number;
    /**
     * @generated from protobuf field: optional int32 a = 5;
     */
    a?: number;
    /**
     * @generated from protobuf field: repeated protobuf_unittest.TestJavaScriptOrderJSON1 z = 6;
     */
    z: TestJavaScriptOrderJSON1[];
}
/**
 * @generated from protobuf message protobuf_unittest.TestLargeInt
 */
export interface TestLargeInt {
    /**
     * @generated from protobuf field: int64 a = 1;
     */
    a: string;
    /**
     * @generated from protobuf field: uint64 b = 2;
     */
    b: string;
}
/**
 * @generated from protobuf message protobuf_unittest.TestNumbers
 */
export interface TestNumbers {
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestNumbers.MyType a = 1;
     */
    a?: TestNumbers_MyType;
    /**
     * @generated from protobuf field: optional int32 b = 2;
     */
    b?: number;
    /**
     * @generated from protobuf field: optional float c = 3;
     */
    c?: number;
    /**
     * @generated from protobuf field: optional bool d = 4;
     */
    d?: boolean;
    /**
     * @generated from protobuf field: optional double e = 5;
     */
    e?: number;
    /**
     * @generated from protobuf field: optional uint32 f = 6;
     */
    f?: number;
}
/**
 * @generated from protobuf enum protobuf_unittest.TestNumbers.MyType
 */
export enum TestNumbers_MyType {
    /**
     * @generated from protobuf enum value: OK = 0;
     */
    OK = 0,
    /**
     * @generated from protobuf enum value: WARNING = 1;
     */
    WARNING = 1,
    /**
     * @generated from protobuf enum value: ERROR = 2;
     */
    ERROR = 2
}
/**
 * @generated from protobuf message protobuf_unittest.TestCamelCase
 */
export interface TestCamelCase {
    /**
     * @generated from protobuf field: optional string normal_field = 1;
     */
    normalField?: string;
    /**
     * @generated from protobuf field: optional int32 CAPITAL_FIELD = 2 [json_name = "CAPITALFIELD"];
     */
    cAPITALFIELD?: number;
    /**
     * @generated from protobuf field: optional int32 CamelCaseField = 3 [json_name = "CamelCaseField"];
     */
    camelCaseField?: number;
}
/**
 * @generated from protobuf message protobuf_unittest.TestBoolMap
 */
export interface TestBoolMap {
    /**
     * @generated from protobuf field: map<bool, int32> bool_map = 1;
     */
    boolMap: {
        [key: string]: number;
    };
}
/**
 * @generated from protobuf message protobuf_unittest.TestRecursion
 */
export interface TestRecursion {
    /**
     * @generated from protobuf field: optional int32 value = 1;
     */
    value?: number;
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestRecursion child = 2;
     */
    child?: TestRecursion;
}
/**
 * @generated from protobuf message protobuf_unittest.TestStringMap
 */
export interface TestStringMap {
    /**
     * @generated from protobuf field: map<string, string> string_map = 1;
     */
    stringMap: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message protobuf_unittest.TestStringSerializer
 */
export interface TestStringSerializer {
    /**
     * @generated from protobuf field: optional string scalar_string = 1;
     */
    scalarString?: string;
    /**
     * @generated from protobuf field: repeated string repeated_string = 2;
     */
    repeatedString: string[];
    /**
     * @generated from protobuf field: map<string, string> string_map = 3;
     */
    stringMap: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message protobuf_unittest.TestMessageWithExtension
 */
export interface TestMessageWithExtension {
}
/**
 * @generated from protobuf message protobuf_unittest.TestExtension
 */
export interface TestExtension {
    /**
     * @generated from protobuf field: optional string value = 1;
     */
    value?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class TestFlagsAndStrings$Type extends MessageType<TestFlagsAndStrings> {
    constructor() {
        super("protobuf_unittest.TestFlagsAndStrings", [
            { no: 1, name: "A", kind: "scalar", jsonName: "A", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestFlagsAndStrings
 */
export const TestFlagsAndStrings = new TestFlagsAndStrings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestFlagsAndStrings_RepeatedGroup$Type extends MessageType<TestFlagsAndStrings_RepeatedGroup> {
    constructor() {
        super("protobuf_unittest.TestFlagsAndStrings.RepeatedGroup", [
            { no: 3, name: "f", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestFlagsAndStrings.RepeatedGroup
 */
export const TestFlagsAndStrings_RepeatedGroup = new TestFlagsAndStrings_RepeatedGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestBase64ByteArrays$Type extends MessageType<TestBase64ByteArrays> {
    constructor() {
        super("protobuf_unittest.TestBase64ByteArrays", [
            { no: 1, name: "a", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestBase64ByteArrays
 */
export const TestBase64ByteArrays = new TestBase64ByteArrays$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestJavaScriptJSON$Type extends MessageType<TestJavaScriptJSON> {
    constructor() {
        super("protobuf_unittest.TestJavaScriptJSON", [
            { no: 1, name: "a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "final", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "in", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Var", kind: "scalar", jsonName: "Var", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestJavaScriptJSON
 */
export const TestJavaScriptJSON = new TestJavaScriptJSON$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestJavaScriptOrderJSON1$Type extends MessageType<TestJavaScriptOrderJSON1> {
    constructor() {
        super("protobuf_unittest.TestJavaScriptOrderJSON1", [
            { no: 1, name: "d", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "c", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "x", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "b", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestJavaScriptOrderJSON1
 */
export const TestJavaScriptOrderJSON1 = new TestJavaScriptOrderJSON1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestJavaScriptOrderJSON2$Type extends MessageType<TestJavaScriptOrderJSON2> {
    constructor() {
        super("protobuf_unittest.TestJavaScriptOrderJSON2", [
            { no: 1, name: "d", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "c", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "x", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "b", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "z", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestJavaScriptOrderJSON1 }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestJavaScriptOrderJSON2
 */
export const TestJavaScriptOrderJSON2 = new TestJavaScriptOrderJSON2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestLargeInt$Type extends MessageType<TestLargeInt> {
    constructor() {
        super("protobuf_unittest.TestLargeInt", [
            { no: 1, name: "a", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "b", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestLargeInt
 */
export const TestLargeInt = new TestLargeInt$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestNumbers$Type extends MessageType<TestNumbers> {
    constructor() {
        super("protobuf_unittest.TestNumbers", [
            { no: 1, name: "a", kind: "enum", opt: true, T: () => ["protobuf_unittest.TestNumbers.MyType", TestNumbers_MyType] },
            { no: 2, name: "b", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "c", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "d", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "e", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "f", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestNumbers
 */
export const TestNumbers = new TestNumbers$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestCamelCase$Type extends MessageType<TestCamelCase> {
    constructor() {
        super("protobuf_unittest.TestCamelCase", [
            { no: 1, name: "normal_field", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "CAPITAL_FIELD", kind: "scalar", jsonName: "CAPITALFIELD", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "CamelCaseField", kind: "scalar", jsonName: "CamelCaseField", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestCamelCase
 */
export const TestCamelCase = new TestCamelCase$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestBoolMap$Type extends MessageType<TestBoolMap> {
    constructor() {
        super("protobuf_unittest.TestBoolMap", [
            { no: 1, name: "bool_map", kind: "map", K: 8 /*ScalarType.BOOL*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestBoolMap
 */
export const TestBoolMap = new TestBoolMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestRecursion$Type extends MessageType<TestRecursion> {
    constructor() {
        super("protobuf_unittest.TestRecursion", [
            { no: 1, name: "value", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "child", kind: "message", T: () => TestRecursion }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestRecursion
 */
export const TestRecursion = new TestRecursion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestStringMap$Type extends MessageType<TestStringMap> {
    constructor() {
        super("protobuf_unittest.TestStringMap", [
            { no: 1, name: "string_map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestStringMap
 */
export const TestStringMap = new TestStringMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestStringSerializer$Type extends MessageType<TestStringSerializer> {
    constructor() {
        super("protobuf_unittest.TestStringSerializer", [
            { no: 1, name: "scalar_string", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "repeated_string", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "string_map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestStringSerializer
 */
export const TestStringSerializer = new TestStringSerializer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestMessageWithExtension$Type extends MessageType<TestMessageWithExtension> {
    constructor() {
        super("protobuf_unittest.TestMessageWithExtension", []);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestMessageWithExtension
 */
export const TestMessageWithExtension = new TestMessageWithExtension$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestExtension$Type extends MessageType<TestExtension> {
    constructor() {
        super("protobuf_unittest.TestExtension", [
            { no: 1, name: "value", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestExtension
 */
export const TestExtension = new TestExtension$Type();
