// @generated by protobuf-ts 2.9.5 with parameter force_optimize_code_size,long_type_string
// @generated from protobuf file "service-twirp-example.proto" (package "spec.haberdasher", syntax proto3)
// tslint:disable
//
// Twirp example RPC
// https://github.com/twitchtv/twirp-example/blob/c1501aeb89609a522db7d79d4c2e71b6c032af28/rpc/haberdasher/haberdasher.proto
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * A Hat is a piece of headwear made by a Haberdasher.
 *
 * @generated from protobuf message spec.haberdasher.Hat
 */
export interface Hat {
    /**
     * The size of a hat should always be in inches.
     *
     * @generated from protobuf field: int32 size = 1;
     */
    size: number;
    /**
     * The color of a hat will never be 'invisible', but other than
     * that, anything is fair game.
     *
     * @generated from protobuf field: string color = 2;
     */
    color: string;
    /**
     * The name of a hat is it's type. Like, 'bowler', or something.
     *
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * Size is passed when requesting a new hat to be made. It's always measured in
 * inches.
 *
 * @generated from protobuf message spec.haberdasher.Size
 */
export interface Size {
    /**
     * @generated from protobuf field: int32 inches = 1;
     */
    inches: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Hat$Type extends MessageType<Hat> {
    constructor() {
        super("spec.haberdasher.Hat", [
            { no: 1, name: "size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spec.haberdasher.Hat
 */
export const Hat = new Hat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Size$Type extends MessageType<Size> {
    constructor() {
        super("spec.haberdasher.Size", [
            { no: 1, name: "inches", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spec.haberdasher.Size
 */
export const Size = new Size$Type();
/**
 * @generated ServiceType for protobuf service spec.haberdasher.Haberdasher
 */
export const Haberdasher = new ServiceType("spec.haberdasher.Haberdasher", [
    { name: "MakeHat", options: {}, I: Size, O: Hat }
]);
