// @generated by protobuf-ts 2.9.5 with parameter force_optimize_code_size,long_type_string
// @generated from protobuf file "google/protobuf/util/internal/testdata/default_value.proto" (package "proto_util_converter.testing", syntax proto3)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { DoubleValue } from "../../../wrappers";
import { Any } from "../../../any";
import { ListValue } from "../../../struct";
import { Value } from "../../../struct";
import { Struct } from "../../../struct";
/**
 * @generated from protobuf message proto_util_converter.testing.DefaultValueTestCases
 */
export interface DefaultValueTestCases {
    /**
     * @generated from protobuf field: proto_util_converter.testing.DoubleMessage empty_double = 1;
     */
    emptyDouble?: DoubleMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.DoubleMessage double_with_default_value = 2;
     */
    doubleWithDefaultValue?: DoubleMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.DoubleMessage double_with_nondefault_value = 3;
     */
    doubleWithNondefaultValue?: DoubleMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.DoubleMessage repeated_double = 4;
     */
    repeatedDouble?: DoubleMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.DoubleMessage nested_message = 5;
     */
    nestedMessage?: DoubleMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.DoubleMessage repeated_nested_message = 6;
     */
    repeatedNestedMessage?: DoubleMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.DoubleMessage double_message_with_oneof = 7;
     */
    doubleMessageWithOneof?: DoubleMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructMessage empty_struct = 201;
     */
    emptyStruct?: StructMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructMessage empty_struct2 = 202;
     */
    emptyStruct2?: StructMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructMessage struct_with_null_value = 203;
     */
    structWithNullValue?: StructMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructMessage struct_with_values = 204;
     */
    structWithValues?: StructMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructMessage struct_with_nested_struct = 205;
     */
    structWithNestedStruct?: StructMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructMessage struct_with_nested_list = 206;
     */
    structWithNestedList?: StructMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructMessage struct_with_list_of_nulls = 207;
     */
    structWithListOfNulls?: StructMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructMessage struct_with_list_of_lists = 208;
     */
    structWithListOfLists?: StructMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructMessage struct_with_list_of_structs = 209;
     */
    structWithListOfStructs?: StructMessage;
    /**
     * @generated from protobuf field: google.protobuf.Struct top_level_struct = 210;
     */
    topLevelStruct?: Struct;
    /**
     * @generated from protobuf field: proto_util_converter.testing.ValueMessage value_wrapper_simple = 212;
     */
    valueWrapperSimple?: ValueMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.ValueMessage value_wrapper_with_struct = 213;
     */
    valueWrapperWithStruct?: ValueMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.ValueMessage value_wrapper_with_list = 214;
     */
    valueWrapperWithList?: ValueMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.ListValueMessage list_value_wrapper = 215;
     */
    listValueWrapper?: ListValueMessage;
    /**
     * @generated from protobuf field: google.protobuf.Value top_level_value_simple = 216;
     */
    topLevelValueSimple?: Value;
    /**
     * @generated from protobuf field: google.protobuf.Value top_level_value_with_struct = 217;
     */
    topLevelValueWithStruct?: Value;
    /**
     * @generated from protobuf field: google.protobuf.Value top_level_value_with_list = 218;
     */
    topLevelValueWithList?: Value;
    /**
     * @generated from protobuf field: google.protobuf.ListValue top_level_listvalue = 219;
     */
    topLevelListvalue?: ListValue;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyMessage empty_any = 301;
     */
    emptyAny?: AnyMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyMessage type_only_any = 302;
     */
    typeOnlyAny?: AnyMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyMessage recursive_any = 303;
     */
    recursiveAny?: AnyMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyMessage any_with_message_value = 304;
     */
    anyWithMessageValue?: AnyMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyMessage any_with_nested_message = 305;
     */
    anyWithNestedMessage?: AnyMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyMessage any_with_message_containing_map = 306;
     */
    anyWithMessageContainingMap?: AnyMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyMessage any_with_message_containing_struct = 307;
     */
    anyWithMessageContainingStruct?: AnyMessage;
    /**
     * @generated from protobuf field: google.protobuf.Any top_level_any = 308;
     */
    topLevelAny?: Any;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StringtoIntMap empty_map = 401;
     */
    emptyMap?: StringtoIntMap;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StringtoIntMap string_to_int = 402;
     */
    stringToInt?: StringtoIntMap;
    /**
     * @generated from protobuf field: proto_util_converter.testing.IntToStringMap int_to_string = 403;
     */
    intToString?: IntToStringMap;
    /**
     * @generated from protobuf field: proto_util_converter.testing.MixedMap mixed1 = 404;
     */
    mixed1?: MixedMap;
    /**
     * @generated from protobuf field: proto_util_converter.testing.MixedMap2 mixed2 = 405;
     */
    mixed2?: MixedMap2;
    /**
     * @generated from protobuf field: proto_util_converter.testing.MixedMap2 empty_mixed2 = 406;
     */
    emptyMixed2?: MixedMap2;
    /**
     * @generated from protobuf field: proto_util_converter.testing.MessageMap map_of_objects = 407;
     */
    mapOfObjects?: MessageMap;
    /**
     * @generated from protobuf field: proto_util_converter.testing.MixedMap mixed_empty = 408;
     */
    mixedEmpty?: MixedMap;
    /**
     * @generated from protobuf field: proto_util_converter.testing.MessageMap message_map_empty = 409;
     */
    messageMapEmpty?: MessageMap;
    /**
     * @generated from protobuf field: proto_util_converter.testing.DoubleValueMessage double_value = 501;
     */
    doubleValue?: DoubleValueMessage;
    /**
     * @generated from protobuf field: proto_util_converter.testing.DoubleValueMessage double_value_default = 502;
     */
    doubleValueDefault?: DoubleValueMessage;
}
/**
 * @generated from protobuf message proto_util_converter.testing.DoubleMessage
 */
export interface DoubleMessage {
    /**
     * @generated from protobuf field: double double_value = 1;
     */
    doubleValue: number;
    /**
     * @generated from protobuf field: repeated double repeated_double = 2;
     */
    repeatedDouble: number[];
    /**
     * @generated from protobuf field: proto_util_converter.testing.DoubleMessage nested_message = 3;
     */
    nestedMessage?: DoubleMessage;
    /**
     * @generated from protobuf field: repeated proto_util_converter.testing.DoubleMessage repeated_nested_message = 4;
     */
    repeatedNestedMessage: DoubleMessage[];
    /**
     * @generated from protobuf field: google.protobuf.DoubleValue double_wrapper = 100;
     */
    doubleWrapper?: DoubleValue;
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "strValue";
        /**
         * @generated from protobuf field: string str_value = 112;
         */
        strValue: string;
    } | {
        oneofKind: "numValue";
        /**
         * @generated from protobuf field: int64 num_value = 113;
         */
        numValue: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message proto_util_converter.testing.StructMessage
 */
export interface StructMessage {
    /**
     * @generated from protobuf field: google.protobuf.Struct struct = 1;
     */
    struct?: Struct;
}
/**
 * @generated from protobuf message proto_util_converter.testing.ValueMessage
 */
export interface ValueMessage {
    /**
     * @generated from protobuf field: google.protobuf.Value value = 1;
     */
    value?: Value;
}
/**
 * @generated from protobuf message proto_util_converter.testing.ListValueMessage
 */
export interface ListValueMessage {
    /**
     * @generated from protobuf field: google.protobuf.ListValue shopping_list = 1;
     */
    shoppingList?: ListValue;
}
/**
 * @generated from protobuf message proto_util_converter.testing.RequestMessage
 */
export interface RequestMessage {
    /**
     * @generated from protobuf field: string content = 1;
     */
    content: string;
}
/**
 * @generated from protobuf message proto_util_converter.testing.AnyMessage
 */
export interface AnyMessage {
    /**
     * @generated from protobuf field: google.protobuf.Any any = 1;
     */
    any?: Any;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyData data = 2;
     */
    data?: AnyData;
}
/**
 * @generated from protobuf message proto_util_converter.testing.AnyData
 */
export interface AnyData {
    /**
     * @generated from protobuf field: int32 attr = 1;
     */
    attr: number;
    /**
     * @generated from protobuf field: string str = 2;
     */
    str: string;
    /**
     * @generated from protobuf field: repeated string msgs = 3;
     */
    msgs: string[];
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyData nested_data = 4;
     */
    nestedData?: AnyData;
    /**
     * @generated from protobuf field: map<string, string> map_data = 7;
     */
    mapData: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: google.protobuf.Struct struct_data = 8;
     */
    structData?: Struct;
    /**
     * @generated from protobuf field: repeated proto_util_converter.testing.AnyData repeated_data = 9;
     */
    repeatedData: AnyData[];
}
/**
 * @generated from protobuf message proto_util_converter.testing.StringtoIntMap
 */
export interface StringtoIntMap {
    /**
     * @generated from protobuf field: map<string, int32> map = 1;
     */
    map: {
        [key: string]: number;
    };
}
/**
 * @generated from protobuf message proto_util_converter.testing.IntToStringMap
 */
export interface IntToStringMap {
    /**
     * @generated from protobuf field: map<int32, string> map = 1;
     */
    map: {
        [key: number]: string;
    };
}
/**
 * @generated from protobuf message proto_util_converter.testing.MixedMap
 */
export interface MixedMap {
    /**
     * @generated from protobuf field: string msg = 1;
     */
    msg: string;
    /**
     * @generated from protobuf field: map<string, float> map = 2;
     */
    map: {
        [key: string]: number;
    };
    /**
     * @generated from protobuf field: int32 int_value = 3;
     */
    intValue: number;
}
/**
 * @generated from protobuf message proto_util_converter.testing.MixedMap2
 */
export interface MixedMap2 {
    /**
     * @generated from protobuf field: map<int32, bool> map = 1;
     */
    map: {
        [key: number]: boolean;
    };
    /**
     * @generated from protobuf field: proto_util_converter.testing.MixedMap2.E ee = 2;
     */
    ee: MixedMap2_E;
    /**
     * @generated from protobuf field: string msg = 4;
     */
    msg: string;
}
/**
 * @generated from protobuf enum proto_util_converter.testing.MixedMap2.E
 */
export enum MixedMap2_E {
    /**
     * @generated from protobuf enum value: E0 = 0;
     */
    E0 = 0,
    /**
     * @generated from protobuf enum value: E1 = 1;
     */
    E1 = 1,
    /**
     * @generated from protobuf enum value: E2 = 2;
     */
    E2 = 2,
    /**
     * @generated from protobuf enum value: E3 = 3;
     */
    E3 = 3
}
/**
 * @generated from protobuf message proto_util_converter.testing.MessageMap
 */
export interface MessageMap {
    /**
     * @generated from protobuf field: map<string, proto_util_converter.testing.MessageMap.M> map = 1;
     */
    map: {
        [key: string]: MessageMap_M;
    };
}
/**
 * @generated from protobuf message proto_util_converter.testing.MessageMap.M
 */
export interface MessageMap_M {
    /**
     * @generated from protobuf field: int32 inner_int = 1;
     */
    innerInt: number;
    /**
     * @generated from protobuf field: string inner_text = 2;
     */
    innerText: string;
}
/**
 * @generated from protobuf message proto_util_converter.testing.DoubleValueMessage
 */
export interface DoubleValueMessage {
    /**
     * @generated from protobuf field: google.protobuf.DoubleValue double = 1;
     */
    double?: DoubleValue;
}
// @generated message type with reflection information, may provide speed optimized methods
class DefaultValueTestCases$Type extends MessageType<DefaultValueTestCases> {
    constructor() {
        super("proto_util_converter.testing.DefaultValueTestCases", [
            { no: 1, name: "empty_double", kind: "message", T: () => DoubleMessage },
            { no: 2, name: "double_with_default_value", kind: "message", T: () => DoubleMessage },
            { no: 3, name: "double_with_nondefault_value", kind: "message", T: () => DoubleMessage },
            { no: 4, name: "repeated_double", kind: "message", T: () => DoubleMessage },
            { no: 5, name: "nested_message", kind: "message", T: () => DoubleMessage },
            { no: 6, name: "repeated_nested_message", kind: "message", T: () => DoubleMessage },
            { no: 7, name: "double_message_with_oneof", kind: "message", T: () => DoubleMessage },
            { no: 201, name: "empty_struct", kind: "message", T: () => StructMessage },
            { no: 202, name: "empty_struct2", kind: "message", T: () => StructMessage },
            { no: 203, name: "struct_with_null_value", kind: "message", T: () => StructMessage },
            { no: 204, name: "struct_with_values", kind: "message", T: () => StructMessage },
            { no: 205, name: "struct_with_nested_struct", kind: "message", T: () => StructMessage },
            { no: 206, name: "struct_with_nested_list", kind: "message", T: () => StructMessage },
            { no: 207, name: "struct_with_list_of_nulls", kind: "message", T: () => StructMessage },
            { no: 208, name: "struct_with_list_of_lists", kind: "message", T: () => StructMessage },
            { no: 209, name: "struct_with_list_of_structs", kind: "message", T: () => StructMessage },
            { no: 210, name: "top_level_struct", kind: "message", T: () => Struct },
            { no: 212, name: "value_wrapper_simple", kind: "message", T: () => ValueMessage },
            { no: 213, name: "value_wrapper_with_struct", kind: "message", T: () => ValueMessage },
            { no: 214, name: "value_wrapper_with_list", kind: "message", T: () => ValueMessage },
            { no: 215, name: "list_value_wrapper", kind: "message", T: () => ListValueMessage },
            { no: 216, name: "top_level_value_simple", kind: "message", T: () => Value },
            { no: 217, name: "top_level_value_with_struct", kind: "message", T: () => Value },
            { no: 218, name: "top_level_value_with_list", kind: "message", T: () => Value },
            { no: 219, name: "top_level_listvalue", kind: "message", T: () => ListValue },
            { no: 301, name: "empty_any", kind: "message", T: () => AnyMessage },
            { no: 302, name: "type_only_any", kind: "message", T: () => AnyMessage },
            { no: 303, name: "recursive_any", kind: "message", T: () => AnyMessage },
            { no: 304, name: "any_with_message_value", kind: "message", T: () => AnyMessage },
            { no: 305, name: "any_with_nested_message", kind: "message", T: () => AnyMessage },
            { no: 306, name: "any_with_message_containing_map", kind: "message", T: () => AnyMessage },
            { no: 307, name: "any_with_message_containing_struct", kind: "message", T: () => AnyMessage },
            { no: 308, name: "top_level_any", kind: "message", T: () => Any },
            { no: 401, name: "empty_map", kind: "message", T: () => StringtoIntMap },
            { no: 402, name: "string_to_int", kind: "message", T: () => StringtoIntMap },
            { no: 403, name: "int_to_string", kind: "message", T: () => IntToStringMap },
            { no: 404, name: "mixed1", kind: "message", T: () => MixedMap },
            { no: 405, name: "mixed2", kind: "message", T: () => MixedMap2 },
            { no: 406, name: "empty_mixed2", kind: "message", T: () => MixedMap2 },
            { no: 407, name: "map_of_objects", kind: "message", T: () => MessageMap },
            { no: 408, name: "mixed_empty", kind: "message", T: () => MixedMap },
            { no: 409, name: "message_map_empty", kind: "message", T: () => MessageMap },
            { no: 501, name: "double_value", kind: "message", T: () => DoubleValueMessage },
            { no: 502, name: "double_value_default", kind: "message", T: () => DoubleValueMessage }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.DefaultValueTestCases
 */
export const DefaultValueTestCases = new DefaultValueTestCases$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoubleMessage$Type extends MessageType<DoubleMessage> {
    constructor() {
        super("proto_util_converter.testing.DoubleMessage", [
            { no: 1, name: "double_value", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "repeated_double", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "nested_message", kind: "message", T: () => DoubleMessage },
            { no: 4, name: "repeated_nested_message", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DoubleMessage },
            { no: 100, name: "double_wrapper", kind: "message", T: () => DoubleValue },
            { no: 112, name: "str_value", kind: "scalar", oneof: "value", T: 9 /*ScalarType.STRING*/ },
            { no: 113, name: "num_value", kind: "scalar", oneof: "value", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.DoubleMessage
 */
export const DoubleMessage = new DoubleMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StructMessage$Type extends MessageType<StructMessage> {
    constructor() {
        super("proto_util_converter.testing.StructMessage", [
            { no: 1, name: "struct", kind: "message", T: () => Struct }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.StructMessage
 */
export const StructMessage = new StructMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValueMessage$Type extends MessageType<ValueMessage> {
    constructor() {
        super("proto_util_converter.testing.ValueMessage", [
            { no: 1, name: "value", kind: "message", T: () => Value }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.ValueMessage
 */
export const ValueMessage = new ValueMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListValueMessage$Type extends MessageType<ListValueMessage> {
    constructor() {
        super("proto_util_converter.testing.ListValueMessage", [
            { no: 1, name: "shopping_list", kind: "message", T: () => ListValue }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.ListValueMessage
 */
export const ListValueMessage = new ListValueMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestMessage$Type extends MessageType<RequestMessage> {
    constructor() {
        super("proto_util_converter.testing.RequestMessage", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.RequestMessage
 */
export const RequestMessage = new RequestMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnyMessage$Type extends MessageType<AnyMessage> {
    constructor() {
        super("proto_util_converter.testing.AnyMessage", [
            { no: 1, name: "any", kind: "message", T: () => Any },
            { no: 2, name: "data", kind: "message", T: () => AnyData }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.AnyMessage
 */
export const AnyMessage = new AnyMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnyData$Type extends MessageType<AnyData> {
    constructor() {
        super("proto_util_converter.testing.AnyData", [
            { no: 1, name: "attr", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "msgs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "nested_data", kind: "message", T: () => AnyData },
            { no: 7, name: "map_data", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 8, name: "struct_data", kind: "message", T: () => Struct },
            { no: 9, name: "repeated_data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AnyData }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.AnyData
 */
export const AnyData = new AnyData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StringtoIntMap$Type extends MessageType<StringtoIntMap> {
    constructor() {
        super("proto_util_converter.testing.StringtoIntMap", [
            { no: 1, name: "map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.StringtoIntMap
 */
export const StringtoIntMap = new StringtoIntMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntToStringMap$Type extends MessageType<IntToStringMap> {
    constructor() {
        super("proto_util_converter.testing.IntToStringMap", [
            { no: 1, name: "map", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.IntToStringMap
 */
export const IntToStringMap = new IntToStringMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MixedMap$Type extends MessageType<MixedMap> {
    constructor() {
        super("proto_util_converter.testing.MixedMap", [
            { no: 1, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 2 /*ScalarType.FLOAT*/ } },
            { no: 3, name: "int_value", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.MixedMap
 */
export const MixedMap = new MixedMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MixedMap2$Type extends MessageType<MixedMap2> {
    constructor() {
        super("proto_util_converter.testing.MixedMap2", [
            { no: 1, name: "map", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 8 /*ScalarType.BOOL*/ } },
            { no: 2, name: "ee", kind: "enum", T: () => ["proto_util_converter.testing.MixedMap2.E", MixedMap2_E] },
            { no: 4, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.MixedMap2
 */
export const MixedMap2 = new MixedMap2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageMap$Type extends MessageType<MessageMap> {
    constructor() {
        super("proto_util_converter.testing.MessageMap", [
            { no: 1, name: "map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => MessageMap_M } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.MessageMap
 */
export const MessageMap = new MessageMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageMap_M$Type extends MessageType<MessageMap_M> {
    constructor() {
        super("proto_util_converter.testing.MessageMap.M", [
            { no: 1, name: "inner_int", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "inner_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.MessageMap.M
 */
export const MessageMap_M = new MessageMap_M$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoubleValueMessage$Type extends MessageType<DoubleValueMessage> {
    constructor() {
        super("proto_util_converter.testing.DoubleValueMessage", [
            { no: 1, name: "double", kind: "message", T: () => DoubleValue }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.DoubleValueMessage
 */
export const DoubleValueMessage = new DoubleValueMessage$Type();
/**
 * @generated ServiceType for protobuf service proto_util_converter.testing.DefaultValueTestService
 */
export const DefaultValueTestService = new ServiceType("proto_util_converter.testing.DefaultValueTestService", [
    { name: "Call", options: {}, I: RequestMessage, O: DefaultValueTestCases }
]);
