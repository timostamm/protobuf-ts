// @generated by protobuf-ts 2.9.5 with parameter force_optimize_code_size,long_type_string
// @generated from protobuf file "google/protobuf/map_unittest.proto" (package "protobuf_unittest", syntax proto3)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
import { MessageType } from "@protobuf-ts/runtime";
import { TestRequired } from "./unittest";
import { TestAllTypes } from "./unittest";
import { ForeignMessage } from "./unittest";
/**
 * Tests maps.
 *
 * @generated from protobuf message protobuf_unittest.TestMap
 */
export interface TestMap {
    /**
     * @generated from protobuf field: map<int32, int32> map_int32_int32 = 1;
     */
    mapInt32Int32: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<int64, int64> map_int64_int64 = 2;
     */
    mapInt64Int64: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<uint32, uint32> map_uint32_uint32 = 3;
     */
    mapUint32Uint32: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<uint64, uint64> map_uint64_uint64 = 4;
     */
    mapUint64Uint64: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<sint32, sint32> map_sint32_sint32 = 5;
     */
    mapSint32Sint32: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<sint64, sint64> map_sint64_sint64 = 6;
     */
    mapSint64Sint64: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<fixed32, fixed32> map_fixed32_fixed32 = 7;
     */
    mapFixed32Fixed32: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<fixed64, fixed64> map_fixed64_fixed64 = 8;
     */
    mapFixed64Fixed64: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
     */
    mapSfixed32Sfixed32: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
     */
    mapSfixed64Sfixed64: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<int32, float> map_int32_float = 11;
     */
    mapInt32Float: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<int32, double> map_int32_double = 12;
     */
    mapInt32Double: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<bool, bool> map_bool_bool = 13;
     */
    mapBoolBool: {
        [key: string]: boolean;
    };
    /**
     * @generated from protobuf field: map<string, string> map_string_string = 14;
     */
    mapStringString: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<int32, bytes> map_int32_bytes = 15;
     */
    mapInt32Bytes: {
        [key: number]: Uint8Array;
    };
    /**
     * @generated from protobuf field: map<int32, protobuf_unittest.MapEnum> map_int32_enum = 16;
     */
    mapInt32Enum: {
        [key: number]: MapEnum;
    };
    /**
     * @generated from protobuf field: map<int32, protobuf_unittest.ForeignMessage> map_int32_foreign_message = 17;
     */
    mapInt32ForeignMessage: {
        [key: number]: ForeignMessage;
    };
    /**
     * @generated from protobuf field: map<string, protobuf_unittest.ForeignMessage> map_string_foreign_message = 18;
     */
    mapStringForeignMessage: {
        [key: string]: ForeignMessage;
    };
    /**
     * @generated from protobuf field: map<int32, protobuf_unittest.TestAllTypes> map_int32_all_types = 19;
     */
    mapInt32AllTypes: {
        [key: number]: TestAllTypes;
    };
}
/**
 * @generated from protobuf message protobuf_unittest.TestMapSubmessage
 */
export interface TestMapSubmessage {
    /**
     * @generated from protobuf field: protobuf_unittest.TestMap test_map = 1;
     */
    testMap?: TestMap;
}
/**
 * @generated from protobuf message protobuf_unittest.TestMessageMap
 */
export interface TestMessageMap {
    /**
     * @generated from protobuf field: map<int32, protobuf_unittest.TestAllTypes> map_int32_message = 1;
     */
    mapInt32Message: {
        [key: number]: TestAllTypes;
    };
}
/**
 * Two map fields share the same entry default instance.
 *
 * @generated from protobuf message protobuf_unittest.TestSameTypeMap
 */
export interface TestSameTypeMap {
    /**
     * @generated from protobuf field: map<int32, int32> map1 = 1;
     */
    map1: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<int32, int32> map2 = 2;
     */
    map2: {
        [key: number]: number;
    };
}
/**
 * Test embedded message with required fields
 *
 * @generated from protobuf message protobuf_unittest.TestRequiredMessageMap
 */
export interface TestRequiredMessageMap {
    /**
     * @generated from protobuf field: map<int32, protobuf_unittest.TestRequired> map_field = 1;
     */
    mapField: {
        [key: number]: TestRequired;
    };
}
/**
 * @generated from protobuf message protobuf_unittest.TestArenaMap
 */
export interface TestArenaMap {
    /**
     * @generated from protobuf field: map<int32, int32> map_int32_int32 = 1;
     */
    mapInt32Int32: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<int64, int64> map_int64_int64 = 2;
     */
    mapInt64Int64: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<uint32, uint32> map_uint32_uint32 = 3;
     */
    mapUint32Uint32: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<uint64, uint64> map_uint64_uint64 = 4;
     */
    mapUint64Uint64: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<sint32, sint32> map_sint32_sint32 = 5;
     */
    mapSint32Sint32: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<sint64, sint64> map_sint64_sint64 = 6;
     */
    mapSint64Sint64: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<fixed32, fixed32> map_fixed32_fixed32 = 7;
     */
    mapFixed32Fixed32: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<fixed64, fixed64> map_fixed64_fixed64 = 8;
     */
    mapFixed64Fixed64: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
     */
    mapSfixed32Sfixed32: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
     */
    mapSfixed64Sfixed64: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<int32, float> map_int32_float = 11;
     */
    mapInt32Float: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<int32, double> map_int32_double = 12;
     */
    mapInt32Double: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<bool, bool> map_bool_bool = 13;
     */
    mapBoolBool: {
        [key: string]: boolean;
    };
    /**
     * @generated from protobuf field: map<string, string> map_string_string = 14;
     */
    mapStringString: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<int32, bytes> map_int32_bytes = 15;
     */
    mapInt32Bytes: {
        [key: number]: Uint8Array;
    };
    /**
     * @generated from protobuf field: map<int32, protobuf_unittest.MapEnum> map_int32_enum = 16;
     */
    mapInt32Enum: {
        [key: number]: MapEnum;
    };
    /**
     * @generated from protobuf field: map<int32, protobuf_unittest.ForeignMessage> map_int32_foreign_message = 17;
     */
    mapInt32ForeignMessage: {
        [key: number]: ForeignMessage;
    };
}
/**
 * Previously, message containing enum called Type cannot be used as value of
 * map field.
 *
 * @generated from protobuf message protobuf_unittest.MessageContainingEnumCalledType
 */
export interface MessageContainingEnumCalledType {
    /**
     * @generated from protobuf field: map<string, protobuf_unittest.MessageContainingEnumCalledType> type = 1;
     */
    type: {
        [key: string]: MessageContainingEnumCalledType;
    };
}
/**
 * @generated from protobuf enum protobuf_unittest.MessageContainingEnumCalledType.Type
 */
export enum MessageContainingEnumCalledType_Type {
    /**
     * @generated from protobuf enum value: TYPE_FOO = 0;
     */
    FOO = 0
}
/**
 * Previously, message cannot contain map field called "entry".
 *
 * @generated from protobuf message protobuf_unittest.MessageContainingMapCalledEntry
 */
export interface MessageContainingMapCalledEntry {
    /**
     * @generated from protobuf field: map<int32, int32> entry = 1;
     */
    entry: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf message protobuf_unittest.TestRecursiveMapMessage
 */
export interface TestRecursiveMapMessage {
    /**
     * @generated from protobuf field: map<string, protobuf_unittest.TestRecursiveMapMessage> a = 1;
     */
    a: {
        [key: string]: TestRecursiveMapMessage;
    };
}
/**
 * @generated from protobuf enum protobuf_unittest.MapEnum
 */
export enum MapEnum {
    /**
     * @generated from protobuf enum value: MAP_ENUM_FOO = 0;
     */
    FOO = 0,
    /**
     * @generated from protobuf enum value: MAP_ENUM_BAR = 1;
     */
    BAR = 1,
    /**
     * @generated from protobuf enum value: MAP_ENUM_BAZ = 2;
     */
    BAZ = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class TestMap$Type extends MessageType<TestMap> {
    constructor() {
        super("protobuf_unittest.TestMap", [
            { no: 1, name: "map_int32_int32", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } },
            { no: 2, name: "map_int64_int64", kind: "map", K: 3 /*ScalarType.INT64*/, V: { kind: "scalar", T: 3 /*ScalarType.INT64*/ } },
            { no: 3, name: "map_uint32_uint32", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 4, name: "map_uint64_uint64", kind: "map", K: 4 /*ScalarType.UINT64*/, V: { kind: "scalar", T: 4 /*ScalarType.UINT64*/ } },
            { no: 5, name: "map_sint32_sint32", kind: "map", K: 17 /*ScalarType.SINT32*/, V: { kind: "scalar", T: 17 /*ScalarType.SINT32*/ } },
            { no: 6, name: "map_sint64_sint64", kind: "map", K: 18 /*ScalarType.SINT64*/, V: { kind: "scalar", T: 18 /*ScalarType.SINT64*/ } },
            { no: 7, name: "map_fixed32_fixed32", kind: "map", K: 7 /*ScalarType.FIXED32*/, V: { kind: "scalar", T: 7 /*ScalarType.FIXED32*/ } },
            { no: 8, name: "map_fixed64_fixed64", kind: "map", K: 6 /*ScalarType.FIXED64*/, V: { kind: "scalar", T: 6 /*ScalarType.FIXED64*/ } },
            { no: 9, name: "map_sfixed32_sfixed32", kind: "map", K: 15 /*ScalarType.SFIXED32*/, V: { kind: "scalar", T: 15 /*ScalarType.SFIXED32*/ } },
            { no: 10, name: "map_sfixed64_sfixed64", kind: "map", K: 16 /*ScalarType.SFIXED64*/, V: { kind: "scalar", T: 16 /*ScalarType.SFIXED64*/ } },
            { no: 11, name: "map_int32_float", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 2 /*ScalarType.FLOAT*/ } },
            { no: 12, name: "map_int32_double", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ } },
            { no: 13, name: "map_bool_bool", kind: "map", K: 8 /*ScalarType.BOOL*/, V: { kind: "scalar", T: 8 /*ScalarType.BOOL*/ } },
            { no: 14, name: "map_string_string", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 15, name: "map_int32_bytes", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 12 /*ScalarType.BYTES*/ } },
            { no: 16, name: "map_int32_enum", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "enum", T: () => ["protobuf_unittest.MapEnum", MapEnum, "MAP_ENUM_"] } },
            { no: 17, name: "map_int32_foreign_message", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "message", T: () => ForeignMessage } },
            { no: 18, name: "map_string_foreign_message", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ForeignMessage } },
            { no: 19, name: "map_int32_all_types", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "message", T: () => TestAllTypes } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestMap
 */
export const TestMap = new TestMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestMapSubmessage$Type extends MessageType<TestMapSubmessage> {
    constructor() {
        super("protobuf_unittest.TestMapSubmessage", [
            { no: 1, name: "test_map", kind: "message", T: () => TestMap }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestMapSubmessage
 */
export const TestMapSubmessage = new TestMapSubmessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestMessageMap$Type extends MessageType<TestMessageMap> {
    constructor() {
        super("protobuf_unittest.TestMessageMap", [
            { no: 1, name: "map_int32_message", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "message", T: () => TestAllTypes } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestMessageMap
 */
export const TestMessageMap = new TestMessageMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestSameTypeMap$Type extends MessageType<TestSameTypeMap> {
    constructor() {
        super("protobuf_unittest.TestSameTypeMap", [
            { no: 1, name: "map1", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } },
            { no: 2, name: "map2", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestSameTypeMap
 */
export const TestSameTypeMap = new TestSameTypeMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestRequiredMessageMap$Type extends MessageType<TestRequiredMessageMap> {
    constructor() {
        super("protobuf_unittest.TestRequiredMessageMap", [
            { no: 1, name: "map_field", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "message", T: () => TestRequired } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestRequiredMessageMap
 */
export const TestRequiredMessageMap = new TestRequiredMessageMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestArenaMap$Type extends MessageType<TestArenaMap> {
    constructor() {
        super("protobuf_unittest.TestArenaMap", [
            { no: 1, name: "map_int32_int32", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } },
            { no: 2, name: "map_int64_int64", kind: "map", K: 3 /*ScalarType.INT64*/, V: { kind: "scalar", T: 3 /*ScalarType.INT64*/ } },
            { no: 3, name: "map_uint32_uint32", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 4, name: "map_uint64_uint64", kind: "map", K: 4 /*ScalarType.UINT64*/, V: { kind: "scalar", T: 4 /*ScalarType.UINT64*/ } },
            { no: 5, name: "map_sint32_sint32", kind: "map", K: 17 /*ScalarType.SINT32*/, V: { kind: "scalar", T: 17 /*ScalarType.SINT32*/ } },
            { no: 6, name: "map_sint64_sint64", kind: "map", K: 18 /*ScalarType.SINT64*/, V: { kind: "scalar", T: 18 /*ScalarType.SINT64*/ } },
            { no: 7, name: "map_fixed32_fixed32", kind: "map", K: 7 /*ScalarType.FIXED32*/, V: { kind: "scalar", T: 7 /*ScalarType.FIXED32*/ } },
            { no: 8, name: "map_fixed64_fixed64", kind: "map", K: 6 /*ScalarType.FIXED64*/, V: { kind: "scalar", T: 6 /*ScalarType.FIXED64*/ } },
            { no: 9, name: "map_sfixed32_sfixed32", kind: "map", K: 15 /*ScalarType.SFIXED32*/, V: { kind: "scalar", T: 15 /*ScalarType.SFIXED32*/ } },
            { no: 10, name: "map_sfixed64_sfixed64", kind: "map", K: 16 /*ScalarType.SFIXED64*/, V: { kind: "scalar", T: 16 /*ScalarType.SFIXED64*/ } },
            { no: 11, name: "map_int32_float", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 2 /*ScalarType.FLOAT*/ } },
            { no: 12, name: "map_int32_double", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ } },
            { no: 13, name: "map_bool_bool", kind: "map", K: 8 /*ScalarType.BOOL*/, V: { kind: "scalar", T: 8 /*ScalarType.BOOL*/ } },
            { no: 14, name: "map_string_string", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 15, name: "map_int32_bytes", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 12 /*ScalarType.BYTES*/ } },
            { no: 16, name: "map_int32_enum", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "enum", T: () => ["protobuf_unittest.MapEnum", MapEnum, "MAP_ENUM_"] } },
            { no: 17, name: "map_int32_foreign_message", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "message", T: () => ForeignMessage } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestArenaMap
 */
export const TestArenaMap = new TestArenaMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageContainingEnumCalledType$Type extends MessageType<MessageContainingEnumCalledType> {
    constructor() {
        super("protobuf_unittest.MessageContainingEnumCalledType", [
            { no: 1, name: "type", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => MessageContainingEnumCalledType } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.MessageContainingEnumCalledType
 */
export const MessageContainingEnumCalledType = new MessageContainingEnumCalledType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageContainingMapCalledEntry$Type extends MessageType<MessageContainingMapCalledEntry> {
    constructor() {
        super("protobuf_unittest.MessageContainingMapCalledEntry", [
            { no: 1, name: "entry", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.MessageContainingMapCalledEntry
 */
export const MessageContainingMapCalledEntry = new MessageContainingMapCalledEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestRecursiveMapMessage$Type extends MessageType<TestRecursiveMapMessage> {
    constructor() {
        super("protobuf_unittest.TestRecursiveMapMessage", [
            { no: 1, name: "a", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => TestRecursiveMapMessage } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestRecursiveMapMessage
 */
export const TestRecursiveMapMessage = new TestRecursiveMapMessage$Type();
