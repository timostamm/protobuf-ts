// @generated by protobuf-ts 2.9.5 with parameter force_optimize_code_size,long_type_string
// @generated from protobuf file "name-clash.proto" (package "spec", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType as MessageType$ } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message spec.ReservedFieldNames
 */
export interface ReservedFieldNames {
    /**
     * not allowed as object property, should be escaped
     *
     * @generated from protobuf field: string __proto__ = 1;
     */
    Proto: string;
    /**
     * not allowed as object property, should be escaped
     *
     * @generated from protobuf field: string to_string = 2;
     */
    toString$: string;
    /**
     * reserved for our ADT discriminator, should be escaped
     *
     * @generated from protobuf field: string oneofKind = 3;
     */
    oneofKind$: string;
}
/**
 * @generated from protobuf message spec.ReservedFieldNamesInOneof
 */
export interface ReservedFieldNamesInOneof {
    /**
     * @generated from protobuf oneof: oneof_group
     */
    oneofGroup: {
        oneofKind: "oneofKind$";
        /**
         * reserved for our ADT discriminator, should be escaped
         *
         * @generated from protobuf field: string oneofKind = 1;
         */
        oneofKind$: string;
    } | {
        oneofKind: "Proto";
        /**
         * not allowed as object property, should be escaped
         *
         * @generated from protobuf field: string __proto__ = 2;
         */
        Proto: string;
    } | {
        oneofKind: "toString$";
        /**
         * not allowed as object property, should be escaped
         *
         * @generated from protobuf field: string to_string = 3;
         */
        toString$: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * reserved word, should be escaped
 *
 * @generated from protobuf message spec.interface
 */
export interface interface$ {
}
/**
 * reserved word, should be escaped
 *
 * @generated from protobuf message spec.function
 */
export interface function$ {
}
/**
 * reserved word, should be escaped
 *
 * @generated from protobuf message spec.instanceof
 */
export interface instanceof$ {
}
/**
 * reserved word, should be escaped
 *
 * @generated from protobuf message spec.switch
 */
export interface switch$ {
}
/**
 * reserved word, should be escaped
 *
 * @generated from protobuf message spec.case
 */
export interface case$ {
}
/**
 * reserved word, should be escaped
 *
 * @generated from protobuf message spec.return
 */
export interface return$ {
}
/**
 * clash with runtime, must either be escaped or
 * `MessageType` must be imported under different name
 *
 * @generated from protobuf message spec.MessageType
 */
export interface MessageType {
}
/**
 * clash with global type "Error"
 * either this message name is escaped in generated code, or the generated
 * code must escape it's calls to the global error object (i.e. `new Error`)
 *
 * @generated from protobuf message spec.Error
 */
export interface Error {
    /**
     * @generated from protobuf field: string field_name = 1;
     */
    fieldName: string;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * clash with global type
 *
 * @generated from protobuf message spec.Object
 */
export interface Object {
}
/**
 * @generated from protobuf message spec.object
 */
export interface object$ {
}
/**
 * clash with global type
 *
 * @generated from protobuf message spec.Uint8Array
 */
export interface Uint8Array$ {
}
/**
 * clash with global type
 *
 * @generated from protobuf message spec.array
 */
export interface array$ {
}
/**
 * clash with global type
 *
 * @generated from protobuf message spec.Array
 */
export interface Array$ {
}
/**
 * clash with global type
 *
 * @generated from protobuf message spec.string
 */
export interface string$ {
}
/**
 * clash with global type
 *
 * @generated from protobuf message spec.String
 */
export interface String$ {
}
/**
 * clash with global type
 *
 * @generated from protobuf message spec.number
 */
export interface number$ {
}
/**
 * clash with global type
 *
 * @generated from protobuf message spec.Number
 */
export interface Number$ {
}
/**
 * clash with global type
 *
 * @generated from protobuf message spec.boolean
 */
export interface boolean$ {
}
/**
 * clash with global type
 *
 * @generated from protobuf message spec.Boolean
 */
export interface Boolean$ {
}
/**
 * clash with global type
 *
 * @generated from protobuf message spec.bigint
 */
export interface bigint$ {
}
/**
 * clash with global type
 *
 * @generated from protobuf message spec.BigInt
 */
export interface BigInt$ {
}
/**
 * @generated from protobuf message spec.ClashParent
 */
export interface ClashParent {
}
/**
 * should clash with message ClashParent_ClashChild
 *
 * @generated from protobuf message spec.ClashParent.ClashChild
 */
export interface ClashParent_ClashChild {
}
/**
 * should clash with name of ClashParent.ClashChild
 *
 * @generated from protobuf message spec.ClashParent_ClashChild
 */
export interface ClashParent_ClashChild$1 {
}
/**
 * @generated from protobuf message spec.NoClashFields
 */
export interface NoClashFields {
    /**
     * ok as object property
     *
     * @generated from protobuf field: string const = 1;
     */
    const: string;
    /**
     * ok as object property
     *
     * @generated from protobuf field: string switch = 2;
     */
    switch: string;
    /**
     * ok as object property
     *
     * @generated from protobuf field: string case = 3;
     */
    case: string;
    /**
     * ok as object property
     *
     * @generated from protobuf field: string function = 4;
     */
    function: string;
    /**
     * ok as object property
     *
     * @generated from protobuf field: string interface = 5;
     */
    interface: string;
    /**
     * ok as object property
     *
     * @generated from protobuf field: string return = 6;
     */
    return: string;
}
/**
 * @generated from protobuf message spec.NoClashOneof
 */
export interface NoClashOneof {
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "const";
        /**
         * ok as object property
         *
         * @generated from protobuf field: string const = 1;
         */
        const: string;
    } | {
        oneofKind: "switch";
        /**
         * ok as object property
         *
         * @generated from protobuf field: string switch = 2;
         */
        switch: string;
    } | {
        oneofKind: "case";
        /**
         * ok as object property
         *
         * @generated from protobuf field: string case = 3;
         */
        case: string;
    } | {
        oneofKind: "function";
        /**
         * ok as object property
         *
         * @generated from protobuf field: string function = 4;
         */
        function: string;
    } | {
        oneofKind: "interface";
        /**
         * ok as object property
         *
         * @generated from protobuf field: string interface = 5;
         */
        interface: string;
    } | {
        oneofKind: "return";
        /**
         * ok as object property
         *
         * @generated from protobuf field: string return = 6;
         */
        return: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * just here as a "namespace" for the enum
 *
 * @generated from protobuf message spec.NoClashEnumWrap
 */
export interface NoClashEnumWrap {
}
/**
 * @generated from protobuf enum spec.NoClashEnumWrap.X
 */
export enum NoClashEnumWrap_X {
    /**
     * ok as object property
     *
     * @generated from protobuf enum value: instanceof = 0;
     */
    instanceof = 0,
    /**
     * ok as object property
     *
     * @generated from protobuf enum value: switch = 1;
     */
    switch = 1,
    /**
     * ok as object property
     *
     * @generated from protobuf enum value: case = 3;
     */
    case = 3,
    /**
     * ok as object property
     *
     * @generated from protobuf enum value: function = 4;
     */
    function = 4,
    /**
     * ok as object property
     *
     * @generated from protobuf enum value: interface = 5;
     */
    interface = 5,
    /**
     * ok as object property
     *
     * @generated from protobuf enum value: return = 6;
     */
    return = 6
}
// @generated message type with reflection information, may provide speed optimized methods
class ReservedFieldNames$Type extends MessageType$<ReservedFieldNames> {
    constructor() {
        super("spec.ReservedFieldNames", [
            { no: 1, name: "__proto__", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "to_string", kind: "scalar", localName: "toString$", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "oneofKind", kind: "scalar", localName: "oneofKind$", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spec.ReservedFieldNames
 */
export const ReservedFieldNames = new ReservedFieldNames$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReservedFieldNamesInOneof$Type extends MessageType$<ReservedFieldNamesInOneof> {
    constructor() {
        super("spec.ReservedFieldNamesInOneof", [
            { no: 1, name: "oneofKind", kind: "scalar", localName: "oneofKind$", oneof: "oneofGroup", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "__proto__", kind: "scalar", oneof: "oneofGroup", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "to_string", kind: "scalar", localName: "toString$", oneof: "oneofGroup", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spec.ReservedFieldNamesInOneof
 */
export const ReservedFieldNamesInOneof = new ReservedFieldNamesInOneof$Type();
// @generated message type with reflection information, may provide speed optimized methods
class interface$$Type extends MessageType$<interface$> {
    constructor() {
        super("spec.interface", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.interface
 */
export const interface$ = new interface$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class function$$Type extends MessageType$<function$> {
    constructor() {
        super("spec.function", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.function
 */
export const function$ = new function$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class instanceof$$Type extends MessageType$<instanceof$> {
    constructor() {
        super("spec.instanceof", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.instanceof
 */
export const instanceof$ = new instanceof$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class switch$$Type extends MessageType$<switch$> {
    constructor() {
        super("spec.switch", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.switch
 */
export const switch$ = new switch$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class case$$Type extends MessageType$<case$> {
    constructor() {
        super("spec.case", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.case
 */
export const case$ = new case$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class return$$Type extends MessageType$<return$> {
    constructor() {
        super("spec.return", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.return
 */
export const return$ = new return$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageType$Type extends MessageType$<MessageType> {
    constructor() {
        super("spec.MessageType", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.MessageType
 */
export const MessageType = new MessageType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Error$Type extends MessageType$<Error> {
    constructor() {
        super("spec.Error", [
            { no: 1, name: "field_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spec.Error
 */
export const Error = new Error$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Object$Type extends MessageType$<Object> {
    constructor() {
        super("spec.Object", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.Object
 */
export const Object = new Object$Type();
// @generated message type with reflection information, may provide speed optimized methods
class object$$Type extends MessageType$<object$> {
    constructor() {
        super("spec.object", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.object
 */
export const object$ = new object$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Uint8Array$$Type extends MessageType$<Uint8Array$> {
    constructor() {
        super("spec.Uint8Array", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.Uint8Array
 */
export const Uint8Array$ = new Uint8Array$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class array$$Type extends MessageType$<array$> {
    constructor() {
        super("spec.array", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.array
 */
export const array$ = new array$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Array$$Type extends MessageType$<Array$> {
    constructor() {
        super("spec.Array", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.Array
 */
export const Array$ = new Array$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class string$$Type extends MessageType$<string$> {
    constructor() {
        super("spec.string", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.string
 */
export const string$ = new string$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class String$$Type extends MessageType$<String$> {
    constructor() {
        super("spec.String", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.String
 */
export const String$ = new String$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class number$$Type extends MessageType$<number$> {
    constructor() {
        super("spec.number", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.number
 */
export const number$ = new number$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Number$$Type extends MessageType$<Number$> {
    constructor() {
        super("spec.Number", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.Number
 */
export const Number$ = new Number$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class boolean$$Type extends MessageType$<boolean$> {
    constructor() {
        super("spec.boolean", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.boolean
 */
export const boolean$ = new boolean$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Boolean$$Type extends MessageType$<Boolean$> {
    constructor() {
        super("spec.Boolean", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.Boolean
 */
export const Boolean$ = new Boolean$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class bigint$$Type extends MessageType$<bigint$> {
    constructor() {
        super("spec.bigint", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.bigint
 */
export const bigint$ = new bigint$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BigInt$$Type extends MessageType$<BigInt$> {
    constructor() {
        super("spec.BigInt", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.BigInt
 */
export const BigInt$ = new BigInt$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClashParent$Type extends MessageType$<ClashParent> {
    constructor() {
        super("spec.ClashParent", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.ClashParent
 */
export const ClashParent = new ClashParent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClashParent_ClashChild$Type extends MessageType$<ClashParent_ClashChild> {
    constructor() {
        super("spec.ClashParent.ClashChild", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.ClashParent.ClashChild
 */
export const ClashParent_ClashChild = new ClashParent_ClashChild$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClashParent_ClashChild$1$Type extends MessageType$<ClashParent_ClashChild$1> {
    constructor() {
        super("spec.ClashParent_ClashChild", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.ClashParent_ClashChild
 */
export const ClashParent_ClashChild$1 = new ClashParent_ClashChild$1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NoClashFields$Type extends MessageType$<NoClashFields> {
    constructor() {
        super("spec.NoClashFields", [
            { no: 1, name: "const", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "switch", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "case", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "function", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "interface", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "return", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spec.NoClashFields
 */
export const NoClashFields = new NoClashFields$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NoClashOneof$Type extends MessageType$<NoClashOneof> {
    constructor() {
        super("spec.NoClashOneof", [
            { no: 1, name: "const", kind: "scalar", oneof: "kind", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "switch", kind: "scalar", oneof: "kind", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "case", kind: "scalar", oneof: "kind", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "function", kind: "scalar", oneof: "kind", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "interface", kind: "scalar", oneof: "kind", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "return", kind: "scalar", oneof: "kind", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spec.NoClashOneof
 */
export const NoClashOneof = new NoClashOneof$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NoClashEnumWrap$Type extends MessageType$<NoClashEnumWrap> {
    constructor() {
        super("spec.NoClashEnumWrap", []);
    }
}
/**
 * @generated MessageType for protobuf message spec.NoClashEnumWrap
 */
export const NoClashEnumWrap = new NoClashEnumWrap$Type();
/**
 * @generated ServiceType for protobuf service spec.NameClashService
 */
export const NameClashService = new ServiceType("spec.NameClashService", [
    { name: "__proto__", options: {}, I: Error, O: Error },
    { name: "toString", localName: "toString$", options: {}, I: Error, O: Error },
    { name: "name", localName: "name$", options: {}, I: Error, O: Error },
    { name: "constructor", localName: "constructor$", options: {}, I: Error, O: Error },
    { name: "methods", localName: "methods$", options: {}, I: Error, O: Error },
    { name: "typeName", localName: "typeName$", options: {}, I: Error, O: Error },
    { name: "options", localName: "options$", options: {}, I: Error, O: Error },
    { name: "_transport", options: {}, I: Error, O: Error }
]);
