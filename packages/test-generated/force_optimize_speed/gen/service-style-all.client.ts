// @generated by protobuf-ts 2.9.5 with parameter force_optimize_speed,long_type_string
// @generated from protobuf file "service-style-all.proto" (package "spec", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AllStyleService } from "./service-style-all";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Int32Value } from "./google/protobuf/wrappers";
import type { StringValue } from "./google/protobuf/wrappers";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service spec.AllStyleService
 */
export interface IAllStyleServiceClient {
    /**
     * @generated from protobuf rpc: Unary(google.protobuf.StringValue) returns (google.protobuf.Int32Value);
     */
    unary(input: StringValue, options?: RpcOptions): UnaryCall<StringValue, Int32Value>;
    /**
     * @generated from protobuf rpc: ServerStream(google.protobuf.StringValue) returns (stream google.protobuf.Int32Value);
     */
    serverStream(input: StringValue, options?: RpcOptions): ServerStreamingCall<StringValue, Int32Value>;
    /**
     * @generated from protobuf rpc: ClientStream(stream google.protobuf.StringValue) returns (google.protobuf.Int32Value);
     */
    clientStream(options?: RpcOptions): ClientStreamingCall<StringValue, Int32Value>;
    /**
     * @generated from protobuf rpc: Bidi(stream google.protobuf.StringValue) returns (stream google.protobuf.Int32Value);
     */
    bidi(options?: RpcOptions): DuplexStreamingCall<StringValue, Int32Value>;
}
/**
 * @generated from protobuf service spec.AllStyleService
 */
export class AllStyleServiceClient implements IAllStyleServiceClient, ServiceInfo {
    typeName = AllStyleService.typeName;
    methods = AllStyleService.methods;
    options = AllStyleService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Unary(google.protobuf.StringValue) returns (google.protobuf.Int32Value);
     */
    unary(input: StringValue, options?: RpcOptions): UnaryCall<StringValue, Int32Value> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StringValue, Int32Value>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServerStream(google.protobuf.StringValue) returns (stream google.protobuf.Int32Value);
     */
    serverStream(input: StringValue, options?: RpcOptions): ServerStreamingCall<StringValue, Int32Value> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<StringValue, Int32Value>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ClientStream(stream google.protobuf.StringValue) returns (google.protobuf.Int32Value);
     */
    clientStream(options?: RpcOptions): ClientStreamingCall<StringValue, Int32Value> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<StringValue, Int32Value>("clientStreaming", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: Bidi(stream google.protobuf.StringValue) returns (stream google.protobuf.Int32Value);
     */
    bidi(options?: RpcOptions): DuplexStreamingCall<StringValue, Int32Value> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<StringValue, Int32Value>("duplex", this._transport, method, opt);
    }
}
