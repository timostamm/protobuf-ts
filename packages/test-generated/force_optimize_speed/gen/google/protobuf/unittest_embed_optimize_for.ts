// @generated by protobuf-ts 2.9.5 with parameter force_optimize_speed,long_type_string
// @generated from protobuf file "google/protobuf/unittest_embed_optimize_for.proto" (package "protobuf_unittest", syntax proto2)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//
// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// A proto file which imports a proto file that uses optimize_for = CODE_SIZE.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TestOptimizedForSize } from "./unittest_optimize_for";
/**
 * @generated from protobuf message protobuf_unittest.TestEmbedOptimizedForSize
 */
export interface TestEmbedOptimizedForSize {
    /**
     * Test that embedding a message which has optimize_for = CODE_SIZE into
     * one optimized for speed works.
     *
     * @generated from protobuf field: optional protobuf_unittest.TestOptimizedForSize optional_message = 1;
     */
    optionalMessage?: TestOptimizedForSize;
    /**
     * @generated from protobuf field: repeated protobuf_unittest.TestOptimizedForSize repeated_message = 2;
     */
    repeatedMessage: TestOptimizedForSize[];
}
// @generated message type with reflection information, may provide speed optimized methods
class TestEmbedOptimizedForSize$Type extends MessageType<TestEmbedOptimizedForSize> {
    constructor() {
        super("protobuf_unittest.TestEmbedOptimizedForSize", [
            { no: 1, name: "optional_message", kind: "message", T: () => TestOptimizedForSize },
            { no: 2, name: "repeated_message", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestOptimizedForSize }
        ]);
    }
    create(value?: PartialMessage<TestEmbedOptimizedForSize>): TestEmbedOptimizedForSize {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.repeatedMessage = [];
        if (value !== undefined)
            reflectionMergePartial<TestEmbedOptimizedForSize>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestEmbedOptimizedForSize): TestEmbedOptimizedForSize {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional protobuf_unittest.TestOptimizedForSize optional_message */ 1:
                    message.optionalMessage = TestOptimizedForSize.internalBinaryRead(reader, reader.uint32(), options, message.optionalMessage);
                    break;
                case /* repeated protobuf_unittest.TestOptimizedForSize repeated_message */ 2:
                    message.repeatedMessage.push(TestOptimizedForSize.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestEmbedOptimizedForSize, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional protobuf_unittest.TestOptimizedForSize optional_message = 1; */
        if (message.optionalMessage)
            TestOptimizedForSize.internalBinaryWrite(message.optionalMessage, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated protobuf_unittest.TestOptimizedForSize repeated_message = 2; */
        for (let i = 0; i < message.repeatedMessage.length; i++)
            TestOptimizedForSize.internalBinaryWrite(message.repeatedMessage[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestEmbedOptimizedForSize
 */
export const TestEmbedOptimizedForSize = new TestEmbedOptimizedForSize$Type();
