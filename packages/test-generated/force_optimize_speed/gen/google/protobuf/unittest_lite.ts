// @generated by protobuf-ts 2.9.5 with parameter force_optimize_speed,long_type_string
// @generated from protobuf file "google/protobuf/unittest_lite.proto" (package "protobuf_unittest", syntax proto2)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//
// Author: kenton@google.com (Kenton Varda)
//
// This is like unittest.proto but with optimize_for = LITE_RUNTIME.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PublicImportMessageLite } from "./unittest_import_public_lite";
import { ImportEnumLite } from "./unittest_import_lite";
import { ImportMessageLite } from "./unittest_import_lite";
/**
 * Same as TestAllTypes but with the lite runtime.
 *
 * @generated from protobuf message protobuf_unittest.TestAllTypesLite
 */
export interface TestAllTypesLite {
    /**
     * Singular
     *
     * @generated from protobuf field: optional int32 optional_int32 = 1;
     */
    optionalInt32?: number;
    /**
     * @generated from protobuf field: optional int64 optional_int64 = 2;
     */
    optionalInt64?: string;
    /**
     * @generated from protobuf field: optional uint32 optional_uint32 = 3;
     */
    optionalUint32?: number;
    /**
     * @generated from protobuf field: optional uint64 optional_uint64 = 4;
     */
    optionalUint64?: string;
    /**
     * @generated from protobuf field: optional sint32 optional_sint32 = 5;
     */
    optionalSint32?: number;
    /**
     * @generated from protobuf field: optional sint64 optional_sint64 = 6;
     */
    optionalSint64?: string;
    /**
     * @generated from protobuf field: optional fixed32 optional_fixed32 = 7;
     */
    optionalFixed32?: number;
    /**
     * @generated from protobuf field: optional fixed64 optional_fixed64 = 8;
     */
    optionalFixed64?: string;
    /**
     * @generated from protobuf field: optional sfixed32 optional_sfixed32 = 9;
     */
    optionalSfixed32?: number;
    /**
     * @generated from protobuf field: optional sfixed64 optional_sfixed64 = 10;
     */
    optionalSfixed64?: string;
    /**
     * @generated from protobuf field: optional float optional_float = 11;
     */
    optionalFloat?: number;
    /**
     * @generated from protobuf field: optional double optional_double = 12;
     */
    optionalDouble?: number;
    /**
     * @generated from protobuf field: optional bool optional_bool = 13;
     */
    optionalBool?: boolean;
    /**
     * @generated from protobuf field: optional string optional_string = 14;
     */
    optionalString?: string;
    /**
     * @generated from protobuf field: optional bytes optional_bytes = 15;
     */
    optionalBytes?: Uint8Array;
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestAllTypesLite.NestedMessage optional_nested_message = 18;
     */
    optionalNestedMessage?: TestAllTypesLite_NestedMessage;
    /**
     * @generated from protobuf field: optional protobuf_unittest.ForeignMessageLite optional_foreign_message = 19;
     */
    optionalForeignMessage?: ForeignMessageLite;
    /**
     * @generated from protobuf field: optional protobuf_unittest_import.ImportMessageLite optional_import_message = 20;
     */
    optionalImportMessage?: ImportMessageLite;
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestAllTypesLite.NestedEnum optional_nested_enum = 21;
     */
    optionalNestedEnum?: TestAllTypesLite_NestedEnum;
    /**
     * @generated from protobuf field: optional protobuf_unittest.ForeignEnumLite optional_foreign_enum = 22;
     */
    optionalForeignEnum?: ForeignEnumLite;
    /**
     * @generated from protobuf field: optional protobuf_unittest_import.ImportEnumLite optional_import_enum = 23;
     */
    optionalImportEnum?: ImportEnumLite;
    /**
     * @generated from protobuf field: optional string optional_string_piece = 24;
     */
    optionalStringPiece?: string;
    /**
     * @generated from protobuf field: optional string optional_cord = 25;
     */
    optionalCord?: string;
    /**
     * Defined in unittest_import_public.proto
     *
     * @generated from protobuf field: optional protobuf_unittest_import.PublicImportMessageLite optional_public_import_message = 26;
     */
    optionalPublicImportMessage?: PublicImportMessageLite;
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestAllTypesLite.NestedMessage optional_lazy_message = 27;
     */
    optionalLazyMessage?: TestAllTypesLite_NestedMessage;
    /**
     * Repeated
     *
     * @generated from protobuf field: repeated int32 repeated_int32 = 31;
     */
    repeatedInt32: number[];
    /**
     * @generated from protobuf field: repeated int64 repeated_int64 = 32;
     */
    repeatedInt64: string[];
    /**
     * @generated from protobuf field: repeated uint32 repeated_uint32 = 33;
     */
    repeatedUint32: number[];
    /**
     * @generated from protobuf field: repeated uint64 repeated_uint64 = 34;
     */
    repeatedUint64: string[];
    /**
     * @generated from protobuf field: repeated sint32 repeated_sint32 = 35;
     */
    repeatedSint32: number[];
    /**
     * @generated from protobuf field: repeated sint64 repeated_sint64 = 36;
     */
    repeatedSint64: string[];
    /**
     * @generated from protobuf field: repeated fixed32 repeated_fixed32 = 37;
     */
    repeatedFixed32: number[];
    /**
     * @generated from protobuf field: repeated fixed64 repeated_fixed64 = 38;
     */
    repeatedFixed64: string[];
    /**
     * @generated from protobuf field: repeated sfixed32 repeated_sfixed32 = 39;
     */
    repeatedSfixed32: number[];
    /**
     * @generated from protobuf field: repeated sfixed64 repeated_sfixed64 = 40;
     */
    repeatedSfixed64: string[];
    /**
     * @generated from protobuf field: repeated float repeated_float = 41;
     */
    repeatedFloat: number[];
    /**
     * @generated from protobuf field: repeated double repeated_double = 42;
     */
    repeatedDouble: number[];
    /**
     * @generated from protobuf field: repeated bool repeated_bool = 43;
     */
    repeatedBool: boolean[];
    /**
     * @generated from protobuf field: repeated string repeated_string = 44;
     */
    repeatedString: string[];
    /**
     * @generated from protobuf field: repeated bytes repeated_bytes = 45;
     */
    repeatedBytes: Uint8Array[];
    /**
     * @generated from protobuf field: repeated protobuf_unittest.TestAllTypesLite.NestedMessage repeated_nested_message = 48;
     */
    repeatedNestedMessage: TestAllTypesLite_NestedMessage[];
    /**
     * @generated from protobuf field: repeated protobuf_unittest.ForeignMessageLite repeated_foreign_message = 49;
     */
    repeatedForeignMessage: ForeignMessageLite[];
    /**
     * @generated from protobuf field: repeated protobuf_unittest_import.ImportMessageLite repeated_import_message = 50;
     */
    repeatedImportMessage: ImportMessageLite[];
    /**
     * @generated from protobuf field: repeated protobuf_unittest.TestAllTypesLite.NestedEnum repeated_nested_enum = 51;
     */
    repeatedNestedEnum: TestAllTypesLite_NestedEnum[];
    /**
     * @generated from protobuf field: repeated protobuf_unittest.ForeignEnumLite repeated_foreign_enum = 52;
     */
    repeatedForeignEnum: ForeignEnumLite[];
    /**
     * @generated from protobuf field: repeated protobuf_unittest_import.ImportEnumLite repeated_import_enum = 53;
     */
    repeatedImportEnum: ImportEnumLite[];
    /**
     * @generated from protobuf field: repeated string repeated_string_piece = 54;
     */
    repeatedStringPiece: string[];
    /**
     * @generated from protobuf field: repeated string repeated_cord = 55;
     */
    repeatedCord: string[];
    /**
     * @generated from protobuf field: repeated protobuf_unittest.TestAllTypesLite.NestedMessage repeated_lazy_message = 57;
     */
    repeatedLazyMessage: TestAllTypesLite_NestedMessage[];
    /**
     * Singular with defaults
     *
     * @generated from protobuf field: optional int32 default_int32 = 61;
     */
    defaultInt32?: number;
    /**
     * @generated from protobuf field: optional int64 default_int64 = 62;
     */
    defaultInt64?: string;
    /**
     * @generated from protobuf field: optional uint32 default_uint32 = 63;
     */
    defaultUint32?: number;
    /**
     * @generated from protobuf field: optional uint64 default_uint64 = 64;
     */
    defaultUint64?: string;
    /**
     * @generated from protobuf field: optional sint32 default_sint32 = 65;
     */
    defaultSint32?: number;
    /**
     * @generated from protobuf field: optional sint64 default_sint64 = 66;
     */
    defaultSint64?: string;
    /**
     * @generated from protobuf field: optional fixed32 default_fixed32 = 67;
     */
    defaultFixed32?: number;
    /**
     * @generated from protobuf field: optional fixed64 default_fixed64 = 68;
     */
    defaultFixed64?: string;
    /**
     * @generated from protobuf field: optional sfixed32 default_sfixed32 = 69;
     */
    defaultSfixed32?: number;
    /**
     * @generated from protobuf field: optional sfixed64 default_sfixed64 = 70;
     */
    defaultSfixed64?: string;
    /**
     * @generated from protobuf field: optional float default_float = 71;
     */
    defaultFloat?: number;
    /**
     * @generated from protobuf field: optional double default_double = 72;
     */
    defaultDouble?: number;
    /**
     * @generated from protobuf field: optional bool default_bool = 73;
     */
    defaultBool?: boolean;
    /**
     * @generated from protobuf field: optional string default_string = 74;
     */
    defaultString?: string;
    /**
     * @generated from protobuf field: optional bytes default_bytes = 75;
     */
    defaultBytes?: Uint8Array;
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestAllTypesLite.NestedEnum default_nested_enum = 81;
     */
    defaultNestedEnum?: TestAllTypesLite_NestedEnum;
    /**
     * @generated from protobuf field: optional protobuf_unittest.ForeignEnumLite default_foreign_enum = 82;
     */
    defaultForeignEnum?: ForeignEnumLite;
    /**
     * @generated from protobuf field: optional protobuf_unittest_import.ImportEnumLite default_import_enum = 83;
     */
    defaultImportEnum?: ImportEnumLite;
    /**
     * @generated from protobuf field: optional string default_string_piece = 84;
     */
    defaultStringPiece?: string;
    /**
     * @generated from protobuf field: optional string default_cord = 85;
     */
    defaultCord?: string;
    /**
     * @generated from protobuf oneof: oneof_field
     */
    oneofField: {
        oneofKind: "oneofUint32";
        /**
         * @generated from protobuf field: uint32 oneof_uint32 = 111;
         */
        oneofUint32: number;
    } | {
        oneofKind: "oneofNestedMessage";
        /**
         * @generated from protobuf field: protobuf_unittest.TestAllTypesLite.NestedMessage oneof_nested_message = 112;
         */
        oneofNestedMessage: TestAllTypesLite_NestedMessage;
    } | {
        oneofKind: "oneofString";
        /**
         * @generated from protobuf field: string oneof_string = 113;
         */
        oneofString: string;
    } | {
        oneofKind: "oneofBytes";
        /**
         * @generated from protobuf field: bytes oneof_bytes = 114;
         */
        oneofBytes: Uint8Array;
    } | {
        oneofKind: "oneofLazyNestedMessage";
        /**
         * @generated from protobuf field: protobuf_unittest.TestAllTypesLite.NestedMessage oneof_lazy_nested_message = 115;
         */
        oneofLazyNestedMessage: TestAllTypesLite_NestedMessage;
    } | {
        oneofKind: undefined;
    };
    /**
     * Tests toString for non-repeated fields with a list suffix
     *
     * @generated from protobuf field: optional int32 deceptively_named_list = 116;
     */
    deceptivelyNamedList?: number;
}
/**
 * @generated from protobuf message protobuf_unittest.TestAllTypesLite.NestedMessage
 */
export interface TestAllTypesLite_NestedMessage {
    /**
     * @generated from protobuf field: optional int32 bb = 1;
     */
    bb?: number;
    /**
     * @generated from protobuf field: optional int64 cc = 2;
     */
    cc?: string;
}
/**
 * @generated from protobuf message protobuf_unittest.TestAllTypesLite.OptionalGroup
 */
export interface TestAllTypesLite_OptionalGroup {
    /**
     * @generated from protobuf field: optional int32 a = 17;
     */
    a?: number;
}
/**
 * @generated from protobuf message protobuf_unittest.TestAllTypesLite.RepeatedGroup
 */
export interface TestAllTypesLite_RepeatedGroup {
    /**
     * @generated from protobuf field: optional int32 a = 47;
     */
    a?: number;
}
/**
 * @generated from protobuf enum protobuf_unittest.TestAllTypesLite.NestedEnum
 */
export enum TestAllTypesLite_NestedEnum {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: FOO = 1;
     */
    FOO = 1,
    /**
     * @generated from protobuf enum value: BAR = 2;
     */
    BAR = 2,
    /**
     * @generated from protobuf enum value: BAZ = 3;
     */
    BAZ = 3
}
/**
 * @generated from protobuf message protobuf_unittest.ForeignMessageLite
 */
export interface ForeignMessageLite {
    /**
     * @generated from protobuf field: optional int32 c = 1;
     */
    c?: number;
}
/**
 * @generated from protobuf message protobuf_unittest.TestPackedTypesLite
 */
export interface TestPackedTypesLite {
    /**
     * @generated from protobuf field: repeated int32 packed_int32 = 90 [packed = true];
     */
    packedInt32: number[];
    /**
     * @generated from protobuf field: repeated int64 packed_int64 = 91 [packed = true];
     */
    packedInt64: string[];
    /**
     * @generated from protobuf field: repeated uint32 packed_uint32 = 92 [packed = true];
     */
    packedUint32: number[];
    /**
     * @generated from protobuf field: repeated uint64 packed_uint64 = 93 [packed = true];
     */
    packedUint64: string[];
    /**
     * @generated from protobuf field: repeated sint32 packed_sint32 = 94 [packed = true];
     */
    packedSint32: number[];
    /**
     * @generated from protobuf field: repeated sint64 packed_sint64 = 95 [packed = true];
     */
    packedSint64: string[];
    /**
     * @generated from protobuf field: repeated fixed32 packed_fixed32 = 96 [packed = true];
     */
    packedFixed32: number[];
    /**
     * @generated from protobuf field: repeated fixed64 packed_fixed64 = 97 [packed = true];
     */
    packedFixed64: string[];
    /**
     * @generated from protobuf field: repeated sfixed32 packed_sfixed32 = 98 [packed = true];
     */
    packedSfixed32: number[];
    /**
     * @generated from protobuf field: repeated sfixed64 packed_sfixed64 = 99 [packed = true];
     */
    packedSfixed64: string[];
    /**
     * @generated from protobuf field: repeated float packed_float = 100 [packed = true];
     */
    packedFloat: number[];
    /**
     * @generated from protobuf field: repeated double packed_double = 101 [packed = true];
     */
    packedDouble: number[];
    /**
     * @generated from protobuf field: repeated bool packed_bool = 102 [packed = true];
     */
    packedBool: boolean[];
    /**
     * @generated from protobuf field: repeated protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];
     */
    packedEnum: ForeignEnumLite[];
}
/**
 * @generated from protobuf message protobuf_unittest.TestAllExtensionsLite
 */
export interface TestAllExtensionsLite {
}
/**
 * @generated from protobuf message protobuf_unittest.OptionalGroup_extension_lite
 */
export interface OptionalGroup_extension_lite {
    /**
     * @generated from protobuf field: optional int32 a = 17;
     */
    a?: number;
}
/**
 * @generated from protobuf message protobuf_unittest.RepeatedGroup_extension_lite
 */
export interface RepeatedGroup_extension_lite {
    /**
     * @generated from protobuf field: optional int32 a = 47;
     */
    a?: number;
}
/**
 * @generated from protobuf message protobuf_unittest.TestPackedExtensionsLite
 */
export interface TestPackedExtensionsLite {
}
/**
 * @generated from protobuf message protobuf_unittest.TestNestedExtensionLite
 */
export interface TestNestedExtensionLite {
}
/**
 * Test that deprecated fields work.  We only verify that they compile (at one
 * point this failed).
 *
 * @generated from protobuf message protobuf_unittest.TestDeprecatedLite
 */
export interface TestDeprecatedLite {
    /**
     * @deprecated
     * @generated from protobuf field: optional int32 deprecated_field = 1 [deprecated = true];
     */
    deprecatedField?: number;
    /**
     * @deprecated
     * @generated from protobuf field: int32 deprecated_field2 = 2 [deprecated = true];
     */
    deprecatedField2: number;
    /**
     * @deprecated
     * @generated from protobuf field: optional string deprecated_field3 = 3 [deprecated = true];
     */
    deprecatedField3?: string;
    /**
     * @deprecated
     * @generated from protobuf field: optional protobuf_unittest.TestDeprecatedLite deprecated_field4 = 4 [deprecated = true];
     */
    deprecatedField4?: TestDeprecatedLite;
}
/**
 * See the comments of the same type in unittest.proto.
 *
 * @generated from protobuf message protobuf_unittest.TestParsingMergeLite
 */
export interface TestParsingMergeLite {
    /**
     * @generated from protobuf field: protobuf_unittest.TestAllTypesLite required_all_types = 1;
     */
    requiredAllTypes?: TestAllTypesLite;
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestAllTypesLite optional_all_types = 2;
     */
    optionalAllTypes?: TestAllTypesLite;
    /**
     * @generated from protobuf field: repeated protobuf_unittest.TestAllTypesLite repeated_all_types = 3;
     */
    repeatedAllTypes: TestAllTypesLite[];
}
/**
 * @generated from protobuf message protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator
 */
export interface TestParsingMergeLite_RepeatedFieldsGenerator {
    /**
     * @generated from protobuf field: repeated protobuf_unittest.TestAllTypesLite field1 = 1;
     */
    field1: TestAllTypesLite[];
    /**
     * @generated from protobuf field: repeated protobuf_unittest.TestAllTypesLite field2 = 2;
     */
    field2: TestAllTypesLite[];
    /**
     * @generated from protobuf field: repeated protobuf_unittest.TestAllTypesLite field3 = 3;
     */
    field3: TestAllTypesLite[];
    /**
     * @generated from protobuf field: repeated protobuf_unittest.TestAllTypesLite ext1 = 1000;
     */
    ext1: TestAllTypesLite[];
    /**
     * @generated from protobuf field: repeated protobuf_unittest.TestAllTypesLite ext2 = 1001;
     */
    ext2: TestAllTypesLite[];
}
/**
 * @generated from protobuf message protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1
 */
export interface TestParsingMergeLite_RepeatedFieldsGenerator_Group1 {
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestAllTypesLite field1 = 11;
     */
    field1?: TestAllTypesLite;
}
/**
 * @generated from protobuf message protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2
 */
export interface TestParsingMergeLite_RepeatedFieldsGenerator_Group2 {
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestAllTypesLite field1 = 21;
     */
    field1?: TestAllTypesLite;
}
/**
 * @generated from protobuf message protobuf_unittest.TestParsingMergeLite.OptionalGroup
 */
export interface TestParsingMergeLite_OptionalGroup {
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestAllTypesLite optional_group_all_types = 11;
     */
    optionalGroupAllTypes?: TestAllTypesLite;
}
/**
 * @generated from protobuf message protobuf_unittest.TestParsingMergeLite.RepeatedGroup
 */
export interface TestParsingMergeLite_RepeatedGroup {
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestAllTypesLite repeated_group_all_types = 21;
     */
    repeatedGroupAllTypes?: TestAllTypesLite;
}
/**
 * TestEmptyMessageLite is used to test unknown fields support in lite mode.
 *
 * @generated from protobuf message protobuf_unittest.TestEmptyMessageLite
 */
export interface TestEmptyMessageLite {
}
/**
 * Like above, but declare all field numbers as potential extensions.  No
 * actual extensions should ever be defined for this type.
 *
 * @generated from protobuf message protobuf_unittest.TestEmptyMessageWithExtensionsLite
 */
export interface TestEmptyMessageWithExtensionsLite {
}
/**
 * @generated from protobuf message protobuf_unittest.V1MessageLite
 */
export interface V1MessageLite {
    /**
     * @generated from protobuf field: int32 int_field = 1;
     */
    intField: number;
    /**
     * @generated from protobuf field: optional protobuf_unittest.V1EnumLite enum_field = 2;
     */
    enumField?: V1EnumLite;
}
/**
 * @generated from protobuf message protobuf_unittest.V2MessageLite
 */
export interface V2MessageLite {
    /**
     * @generated from protobuf field: int32 int_field = 1;
     */
    intField: number;
    /**
     * @generated from protobuf field: optional protobuf_unittest.V2EnumLite enum_field = 2;
     */
    enumField?: V2EnumLite;
}
/**
 * @generated from protobuf message protobuf_unittest.TestHugeFieldNumbersLite
 */
export interface TestHugeFieldNumbersLite {
    /**
     * @generated from protobuf field: optional int32 optional_int32 = 536870000;
     */
    optionalInt32?: number;
    /**
     * @generated from protobuf field: optional int32 fixed_32 = 536870001;
     */
    fixed32?: number;
    /**
     * @generated from protobuf field: repeated int32 repeated_int32 = 536870002 [packed = false];
     */
    repeatedInt32: number[];
    /**
     * @generated from protobuf field: repeated int32 packed_int32 = 536870003 [packed = true];
     */
    packedInt32: number[];
    /**
     * @generated from protobuf field: optional protobuf_unittest.ForeignEnumLite optional_enum = 536870004;
     */
    optionalEnum?: ForeignEnumLite;
    /**
     * @generated from protobuf field: optional string optional_string = 536870005;
     */
    optionalString?: string;
    /**
     * @generated from protobuf field: optional bytes optional_bytes = 536870006;
     */
    optionalBytes?: Uint8Array;
    /**
     * @generated from protobuf field: optional protobuf_unittest.ForeignMessageLite optional_message = 536870007;
     */
    optionalMessage?: ForeignMessageLite;
    /**
     * @generated from protobuf field: map<string, string> string_string_map = 536870010;
     */
    stringStringMap: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf oneof: oneof_field
     */
    oneofField: {
        oneofKind: "oneofUint32";
        /**
         * @generated from protobuf field: uint32 oneof_uint32 = 536870011;
         */
        oneofUint32: number;
    } | {
        oneofKind: "oneofTestAllTypes";
        /**
         * @generated from protobuf field: protobuf_unittest.TestAllTypesLite oneof_test_all_types = 536870012;
         */
        oneofTestAllTypes: TestAllTypesLite;
    } | {
        oneofKind: "oneofString";
        /**
         * @generated from protobuf field: string oneof_string = 536870013;
         */
        oneofString: string;
    } | {
        oneofKind: "oneofBytes";
        /**
         * @generated from protobuf field: bytes oneof_bytes = 536870014;
         */
        oneofBytes: Uint8Array;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup
 */
export interface TestHugeFieldNumbersLite_OptionalGroup {
    /**
     * @generated from protobuf field: optional int32 group_a = 536870009;
     */
    groupA?: number;
}
/**
 * @generated from protobuf message protobuf_unittest.TestOneofParsingLite
 */
export interface TestOneofParsingLite {
    /**
     * @generated from protobuf oneof: oneof_field
     */
    oneofField: {
        oneofKind: "oneofInt32";
        /**
         * @generated from protobuf field: int32 oneof_int32 = 1;
         */
        oneofInt32: number;
    } | {
        oneofKind: "oneofSubmessage";
        /**
         * @generated from protobuf field: protobuf_unittest.TestAllTypesLite oneof_submessage = 2;
         */
        oneofSubmessage: TestAllTypesLite;
    } | {
        oneofKind: "oneofString";
        /**
         * @generated from protobuf field: string oneof_string = 3;
         */
        oneofString: string;
    } | {
        oneofKind: "oneofBytes";
        /**
         * @generated from protobuf field: bytes oneof_bytes = 4;
         */
        oneofBytes: Uint8Array;
    } | {
        oneofKind: "oneofStringCord";
        /**
         * @generated from protobuf field: string oneof_string_cord = 5;
         */
        oneofStringCord: string;
    } | {
        oneofKind: "oneofBytesCord";
        /**
         * @generated from protobuf field: bytes oneof_bytes_cord = 6;
         */
        oneofBytesCord: Uint8Array;
    } | {
        oneofKind: "oneofStringStringPiece";
        /**
         * @generated from protobuf field: string oneof_string_string_piece = 7;
         */
        oneofStringStringPiece: string;
    } | {
        oneofKind: "oneofBytesStringPiece";
        /**
         * @generated from protobuf field: bytes oneof_bytes_string_piece = 8;
         */
        oneofBytesStringPiece: Uint8Array;
    } | {
        oneofKind: "oneofEnum";
        /**
         * @generated from protobuf field: protobuf_unittest.V2EnumLite oneof_enum = 9;
         */
        oneofEnum: V2EnumLite;
    } | {
        oneofKind: undefined;
    };
}
/**
 * The following four messages are set up to test for wire compatibility between
 * packed and non-packed repeated fields. We use the field number 2048, because
 * that is large enough to require a 3-byte varint for the tag.
 *
 * @generated from protobuf message protobuf_unittest.PackedInt32
 */
export interface PackedInt32 {
    /**
     * @generated from protobuf field: repeated int32 repeated_int32 = 2048 [packed = true];
     */
    repeatedInt32: number[];
}
/**
 * @generated from protobuf message protobuf_unittest.NonPackedInt32
 */
export interface NonPackedInt32 {
    /**
     * @generated from protobuf field: repeated int32 repeated_int32 = 2048;
     */
    repeatedInt32: number[];
}
/**
 * @generated from protobuf message protobuf_unittest.PackedFixed32
 */
export interface PackedFixed32 {
    /**
     * @generated from protobuf field: repeated fixed32 repeated_fixed32 = 2048 [packed = true];
     */
    repeatedFixed32: number[];
}
/**
 * @generated from protobuf message protobuf_unittest.NonPackedFixed32
 */
export interface NonPackedFixed32 {
    /**
     * @generated from protobuf field: repeated fixed32 repeated_fixed32 = 2048;
     */
    repeatedFixed32: number[];
}
/**
 * Test an enum that has multiple values with the same number.
 *
 * @generated from protobuf message protobuf_unittest.DupEnum
 */
export interface DupEnum {
}
/**
 * @generated from protobuf enum protobuf_unittest.DupEnum.TestEnumWithDupValueLite
 */
export enum DupEnum_TestEnumWithDupValueLite {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: FOO1 = 1;
     */
    FOO1 = 1,
    /**
     * @generated from protobuf enum value: BAR1 = 2;
     */
    BAR1 = 2,
    /**
     * @generated from protobuf enum value: BAZ = 3;
     */
    BAZ = 3,
    /**
     * @generated from protobuf enum value: FOO1 = 1;
     */
    FOO2 = 1,
    /**
     * @generated from protobuf enum value: BAR1 = 2;
     */
    BAR2 = 2
}
/**
 * @generated from protobuf enum protobuf_unittest.ForeignEnumLite
 */
export enum ForeignEnumLite {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: FOREIGN_LITE_FOO = 4;
     */
    FOREIGN_LITE_FOO = 4,
    /**
     * @generated from protobuf enum value: FOREIGN_LITE_BAZ = 6;
     */
    FOREIGN_LITE_BAZ = 6,
    /**
     * @generated from protobuf enum value: FOREIGN_LITE_BAR = 5;
     */
    FOREIGN_LITE_BAR = 5
}
/**
 * @generated from protobuf enum protobuf_unittest.V1EnumLite
 */
export enum V1EnumLite {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: V1_FIRST = 1;
     */
    V1_FIRST = 1
}
/**
 * @generated from protobuf enum protobuf_unittest.V2EnumLite
 */
export enum V2EnumLite {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: V2_FIRST = 1;
     */
    V2_FIRST = 1,
    /**
     * @generated from protobuf enum value: V2_SECOND = 2;
     */
    V2_SECOND = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class TestAllTypesLite$Type extends MessageType<TestAllTypesLite> {
    constructor() {
        super("protobuf_unittest.TestAllTypesLite", [
            { no: 1, name: "optional_int32", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "optional_int64", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/ },
            { no: 3, name: "optional_uint32", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "optional_uint64", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "optional_sint32", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 6, name: "optional_sint64", kind: "scalar", opt: true, T: 18 /*ScalarType.SINT64*/ },
            { no: 7, name: "optional_fixed32", kind: "scalar", opt: true, T: 7 /*ScalarType.FIXED32*/ },
            { no: 8, name: "optional_fixed64", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/ },
            { no: 9, name: "optional_sfixed32", kind: "scalar", opt: true, T: 15 /*ScalarType.SFIXED32*/ },
            { no: 10, name: "optional_sfixed64", kind: "scalar", opt: true, T: 16 /*ScalarType.SFIXED64*/ },
            { no: 11, name: "optional_float", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "optional_double", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "optional_bool", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "optional_string", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "optional_bytes", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 18, name: "optional_nested_message", kind: "message", T: () => TestAllTypesLite_NestedMessage },
            { no: 19, name: "optional_foreign_message", kind: "message", T: () => ForeignMessageLite },
            { no: 20, name: "optional_import_message", kind: "message", T: () => ImportMessageLite },
            { no: 21, name: "optional_nested_enum", kind: "enum", opt: true, T: () => ["protobuf_unittest.TestAllTypesLite.NestedEnum", TestAllTypesLite_NestedEnum] },
            { no: 22, name: "optional_foreign_enum", kind: "enum", opt: true, T: () => ["protobuf_unittest.ForeignEnumLite", ForeignEnumLite] },
            { no: 23, name: "optional_import_enum", kind: "enum", opt: true, T: () => ["protobuf_unittest_import.ImportEnumLite", ImportEnumLite] },
            { no: 24, name: "optional_string_piece", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "optional_cord", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "optional_public_import_message", kind: "message", T: () => PublicImportMessageLite },
            { no: 27, name: "optional_lazy_message", kind: "message", T: () => TestAllTypesLite_NestedMessage },
            { no: 31, name: "repeated_int32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 32, name: "repeated_int64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 3 /*ScalarType.INT64*/ },
            { no: 33, name: "repeated_uint32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 34, name: "repeated_uint64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/ },
            { no: 35, name: "repeated_sint32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 17 /*ScalarType.SINT32*/ },
            { no: 36, name: "repeated_sint64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 18 /*ScalarType.SINT64*/ },
            { no: 37, name: "repeated_fixed32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 7 /*ScalarType.FIXED32*/ },
            { no: 38, name: "repeated_fixed64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 6 /*ScalarType.FIXED64*/ },
            { no: 39, name: "repeated_sfixed32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 15 /*ScalarType.SFIXED32*/ },
            { no: 40, name: "repeated_sfixed64", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 16 /*ScalarType.SFIXED64*/ },
            { no: 41, name: "repeated_float", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 42, name: "repeated_double", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 43, name: "repeated_bool", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 44, name: "repeated_string", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 45, name: "repeated_bytes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },
            { no: 48, name: "repeated_nested_message", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestAllTypesLite_NestedMessage },
            { no: 49, name: "repeated_foreign_message", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ForeignMessageLite },
            { no: 50, name: "repeated_import_message", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ImportMessageLite },
            { no: 51, name: "repeated_nested_enum", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["protobuf_unittest.TestAllTypesLite.NestedEnum", TestAllTypesLite_NestedEnum] },
            { no: 52, name: "repeated_foreign_enum", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["protobuf_unittest.ForeignEnumLite", ForeignEnumLite] },
            { no: 53, name: "repeated_import_enum", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["protobuf_unittest_import.ImportEnumLite", ImportEnumLite] },
            { no: 54, name: "repeated_string_piece", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 55, name: "repeated_cord", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 57, name: "repeated_lazy_message", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestAllTypesLite_NestedMessage },
            { no: 61, name: "default_int32", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 62, name: "default_int64", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/ },
            { no: 63, name: "default_uint32", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 64, name: "default_uint64", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 65, name: "default_sint32", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 66, name: "default_sint64", kind: "scalar", opt: true, T: 18 /*ScalarType.SINT64*/ },
            { no: 67, name: "default_fixed32", kind: "scalar", opt: true, T: 7 /*ScalarType.FIXED32*/ },
            { no: 68, name: "default_fixed64", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/ },
            { no: 69, name: "default_sfixed32", kind: "scalar", opt: true, T: 15 /*ScalarType.SFIXED32*/ },
            { no: 70, name: "default_sfixed64", kind: "scalar", opt: true, T: 16 /*ScalarType.SFIXED64*/ },
            { no: 71, name: "default_float", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 72, name: "default_double", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 73, name: "default_bool", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 74, name: "default_string", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 75, name: "default_bytes", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 81, name: "default_nested_enum", kind: "enum", opt: true, T: () => ["protobuf_unittest.TestAllTypesLite.NestedEnum", TestAllTypesLite_NestedEnum] },
            { no: 82, name: "default_foreign_enum", kind: "enum", opt: true, T: () => ["protobuf_unittest.ForeignEnumLite", ForeignEnumLite] },
            { no: 83, name: "default_import_enum", kind: "enum", opt: true, T: () => ["protobuf_unittest_import.ImportEnumLite", ImportEnumLite] },
            { no: 84, name: "default_string_piece", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 85, name: "default_cord", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 111, name: "oneof_uint32", kind: "scalar", oneof: "oneofField", T: 13 /*ScalarType.UINT32*/ },
            { no: 112, name: "oneof_nested_message", kind: "message", oneof: "oneofField", T: () => TestAllTypesLite_NestedMessage },
            { no: 113, name: "oneof_string", kind: "scalar", oneof: "oneofField", T: 9 /*ScalarType.STRING*/ },
            { no: 114, name: "oneof_bytes", kind: "scalar", oneof: "oneofField", T: 12 /*ScalarType.BYTES*/ },
            { no: 115, name: "oneof_lazy_nested_message", kind: "message", oneof: "oneofField", T: () => TestAllTypesLite_NestedMessage },
            { no: 116, name: "deceptively_named_list", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestAllTypesLite>): TestAllTypesLite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.repeatedInt32 = [];
        message.repeatedInt64 = [];
        message.repeatedUint32 = [];
        message.repeatedUint64 = [];
        message.repeatedSint32 = [];
        message.repeatedSint64 = [];
        message.repeatedFixed32 = [];
        message.repeatedFixed64 = [];
        message.repeatedSfixed32 = [];
        message.repeatedSfixed64 = [];
        message.repeatedFloat = [];
        message.repeatedDouble = [];
        message.repeatedBool = [];
        message.repeatedString = [];
        message.repeatedBytes = [];
        message.repeatedNestedMessage = [];
        message.repeatedForeignMessage = [];
        message.repeatedImportMessage = [];
        message.repeatedNestedEnum = [];
        message.repeatedForeignEnum = [];
        message.repeatedImportEnum = [];
        message.repeatedStringPiece = [];
        message.repeatedCord = [];
        message.repeatedLazyMessage = [];
        message.oneofField = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<TestAllTypesLite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestAllTypesLite): TestAllTypesLite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 optional_int32 */ 1:
                    message.optionalInt32 = reader.int32();
                    break;
                case /* optional int64 optional_int64 */ 2:
                    message.optionalInt64 = reader.int64().toString();
                    break;
                case /* optional uint32 optional_uint32 */ 3:
                    message.optionalUint32 = reader.uint32();
                    break;
                case /* optional uint64 optional_uint64 */ 4:
                    message.optionalUint64 = reader.uint64().toString();
                    break;
                case /* optional sint32 optional_sint32 */ 5:
                    message.optionalSint32 = reader.sint32();
                    break;
                case /* optional sint64 optional_sint64 */ 6:
                    message.optionalSint64 = reader.sint64().toString();
                    break;
                case /* optional fixed32 optional_fixed32 */ 7:
                    message.optionalFixed32 = reader.fixed32();
                    break;
                case /* optional fixed64 optional_fixed64 */ 8:
                    message.optionalFixed64 = reader.fixed64().toString();
                    break;
                case /* optional sfixed32 optional_sfixed32 */ 9:
                    message.optionalSfixed32 = reader.sfixed32();
                    break;
                case /* optional sfixed64 optional_sfixed64 */ 10:
                    message.optionalSfixed64 = reader.sfixed64().toString();
                    break;
                case /* optional float optional_float */ 11:
                    message.optionalFloat = reader.float();
                    break;
                case /* optional double optional_double */ 12:
                    message.optionalDouble = reader.double();
                    break;
                case /* optional bool optional_bool */ 13:
                    message.optionalBool = reader.bool();
                    break;
                case /* optional string optional_string */ 14:
                    message.optionalString = reader.string();
                    break;
                case /* optional bytes optional_bytes */ 15:
                    message.optionalBytes = reader.bytes();
                    break;
                case /* optional protobuf_unittest.TestAllTypesLite.NestedMessage optional_nested_message */ 18:
                    message.optionalNestedMessage = TestAllTypesLite_NestedMessage.internalBinaryRead(reader, reader.uint32(), options, message.optionalNestedMessage);
                    break;
                case /* optional protobuf_unittest.ForeignMessageLite optional_foreign_message */ 19:
                    message.optionalForeignMessage = ForeignMessageLite.internalBinaryRead(reader, reader.uint32(), options, message.optionalForeignMessage);
                    break;
                case /* optional protobuf_unittest_import.ImportMessageLite optional_import_message */ 20:
                    message.optionalImportMessage = ImportMessageLite.internalBinaryRead(reader, reader.uint32(), options, message.optionalImportMessage);
                    break;
                case /* optional protobuf_unittest.TestAllTypesLite.NestedEnum optional_nested_enum */ 21:
                    message.optionalNestedEnum = reader.int32();
                    break;
                case /* optional protobuf_unittest.ForeignEnumLite optional_foreign_enum */ 22:
                    message.optionalForeignEnum = reader.int32();
                    break;
                case /* optional protobuf_unittest_import.ImportEnumLite optional_import_enum */ 23:
                    message.optionalImportEnum = reader.int32();
                    break;
                case /* optional string optional_string_piece */ 24:
                    message.optionalStringPiece = reader.string();
                    break;
                case /* optional string optional_cord */ 25:
                    message.optionalCord = reader.string();
                    break;
                case /* optional protobuf_unittest_import.PublicImportMessageLite optional_public_import_message */ 26:
                    message.optionalPublicImportMessage = PublicImportMessageLite.internalBinaryRead(reader, reader.uint32(), options, message.optionalPublicImportMessage);
                    break;
                case /* optional protobuf_unittest.TestAllTypesLite.NestedMessage optional_lazy_message */ 27:
                    message.optionalLazyMessage = TestAllTypesLite_NestedMessage.internalBinaryRead(reader, reader.uint32(), options, message.optionalLazyMessage);
                    break;
                case /* repeated int32 repeated_int32 */ 31:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedInt32.push(reader.int32());
                    else
                        message.repeatedInt32.push(reader.int32());
                    break;
                case /* repeated int64 repeated_int64 */ 32:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedInt64.push(reader.int64().toString());
                    else
                        message.repeatedInt64.push(reader.int64().toString());
                    break;
                case /* repeated uint32 repeated_uint32 */ 33:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedUint32.push(reader.uint32());
                    else
                        message.repeatedUint32.push(reader.uint32());
                    break;
                case /* repeated uint64 repeated_uint64 */ 34:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedUint64.push(reader.uint64().toString());
                    else
                        message.repeatedUint64.push(reader.uint64().toString());
                    break;
                case /* repeated sint32 repeated_sint32 */ 35:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSint32.push(reader.sint32());
                    else
                        message.repeatedSint32.push(reader.sint32());
                    break;
                case /* repeated sint64 repeated_sint64 */ 36:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSint64.push(reader.sint64().toString());
                    else
                        message.repeatedSint64.push(reader.sint64().toString());
                    break;
                case /* repeated fixed32 repeated_fixed32 */ 37:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFixed32.push(reader.fixed32());
                    else
                        message.repeatedFixed32.push(reader.fixed32());
                    break;
                case /* repeated fixed64 repeated_fixed64 */ 38:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFixed64.push(reader.fixed64().toString());
                    else
                        message.repeatedFixed64.push(reader.fixed64().toString());
                    break;
                case /* repeated sfixed32 repeated_sfixed32 */ 39:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSfixed32.push(reader.sfixed32());
                    else
                        message.repeatedSfixed32.push(reader.sfixed32());
                    break;
                case /* repeated sfixed64 repeated_sfixed64 */ 40:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSfixed64.push(reader.sfixed64().toString());
                    else
                        message.repeatedSfixed64.push(reader.sfixed64().toString());
                    break;
                case /* repeated float repeated_float */ 41:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFloat.push(reader.float());
                    else
                        message.repeatedFloat.push(reader.float());
                    break;
                case /* repeated double repeated_double */ 42:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedDouble.push(reader.double());
                    else
                        message.repeatedDouble.push(reader.double());
                    break;
                case /* repeated bool repeated_bool */ 43:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedBool.push(reader.bool());
                    else
                        message.repeatedBool.push(reader.bool());
                    break;
                case /* repeated string repeated_string */ 44:
                    message.repeatedString.push(reader.string());
                    break;
                case /* repeated bytes repeated_bytes */ 45:
                    message.repeatedBytes.push(reader.bytes());
                    break;
                case /* repeated protobuf_unittest.TestAllTypesLite.NestedMessage repeated_nested_message */ 48:
                    message.repeatedNestedMessage.push(TestAllTypesLite_NestedMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated protobuf_unittest.ForeignMessageLite repeated_foreign_message */ 49:
                    message.repeatedForeignMessage.push(ForeignMessageLite.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated protobuf_unittest_import.ImportMessageLite repeated_import_message */ 50:
                    message.repeatedImportMessage.push(ImportMessageLite.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated protobuf_unittest.TestAllTypesLite.NestedEnum repeated_nested_enum */ 51:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedNestedEnum.push(reader.int32());
                    else
                        message.repeatedNestedEnum.push(reader.int32());
                    break;
                case /* repeated protobuf_unittest.ForeignEnumLite repeated_foreign_enum */ 52:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedForeignEnum.push(reader.int32());
                    else
                        message.repeatedForeignEnum.push(reader.int32());
                    break;
                case /* repeated protobuf_unittest_import.ImportEnumLite repeated_import_enum */ 53:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedImportEnum.push(reader.int32());
                    else
                        message.repeatedImportEnum.push(reader.int32());
                    break;
                case /* repeated string repeated_string_piece */ 54:
                    message.repeatedStringPiece.push(reader.string());
                    break;
                case /* repeated string repeated_cord */ 55:
                    message.repeatedCord.push(reader.string());
                    break;
                case /* repeated protobuf_unittest.TestAllTypesLite.NestedMessage repeated_lazy_message */ 57:
                    message.repeatedLazyMessage.push(TestAllTypesLite_NestedMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 default_int32 */ 61:
                    message.defaultInt32 = reader.int32();
                    break;
                case /* optional int64 default_int64 */ 62:
                    message.defaultInt64 = reader.int64().toString();
                    break;
                case /* optional uint32 default_uint32 */ 63:
                    message.defaultUint32 = reader.uint32();
                    break;
                case /* optional uint64 default_uint64 */ 64:
                    message.defaultUint64 = reader.uint64().toString();
                    break;
                case /* optional sint32 default_sint32 */ 65:
                    message.defaultSint32 = reader.sint32();
                    break;
                case /* optional sint64 default_sint64 */ 66:
                    message.defaultSint64 = reader.sint64().toString();
                    break;
                case /* optional fixed32 default_fixed32 */ 67:
                    message.defaultFixed32 = reader.fixed32();
                    break;
                case /* optional fixed64 default_fixed64 */ 68:
                    message.defaultFixed64 = reader.fixed64().toString();
                    break;
                case /* optional sfixed32 default_sfixed32 */ 69:
                    message.defaultSfixed32 = reader.sfixed32();
                    break;
                case /* optional sfixed64 default_sfixed64 */ 70:
                    message.defaultSfixed64 = reader.sfixed64().toString();
                    break;
                case /* optional float default_float */ 71:
                    message.defaultFloat = reader.float();
                    break;
                case /* optional double default_double */ 72:
                    message.defaultDouble = reader.double();
                    break;
                case /* optional bool default_bool */ 73:
                    message.defaultBool = reader.bool();
                    break;
                case /* optional string default_string */ 74:
                    message.defaultString = reader.string();
                    break;
                case /* optional bytes default_bytes */ 75:
                    message.defaultBytes = reader.bytes();
                    break;
                case /* optional protobuf_unittest.TestAllTypesLite.NestedEnum default_nested_enum */ 81:
                    message.defaultNestedEnum = reader.int32();
                    break;
                case /* optional protobuf_unittest.ForeignEnumLite default_foreign_enum */ 82:
                    message.defaultForeignEnum = reader.int32();
                    break;
                case /* optional protobuf_unittest_import.ImportEnumLite default_import_enum */ 83:
                    message.defaultImportEnum = reader.int32();
                    break;
                case /* optional string default_string_piece */ 84:
                    message.defaultStringPiece = reader.string();
                    break;
                case /* optional string default_cord */ 85:
                    message.defaultCord = reader.string();
                    break;
                case /* uint32 oneof_uint32 */ 111:
                    message.oneofField = {
                        oneofKind: "oneofUint32",
                        oneofUint32: reader.uint32()
                    };
                    break;
                case /* protobuf_unittest.TestAllTypesLite.NestedMessage oneof_nested_message */ 112:
                    message.oneofField = {
                        oneofKind: "oneofNestedMessage",
                        oneofNestedMessage: TestAllTypesLite_NestedMessage.internalBinaryRead(reader, reader.uint32(), options, (message.oneofField as any).oneofNestedMessage)
                    };
                    break;
                case /* string oneof_string */ 113:
                    message.oneofField = {
                        oneofKind: "oneofString",
                        oneofString: reader.string()
                    };
                    break;
                case /* bytes oneof_bytes */ 114:
                    message.oneofField = {
                        oneofKind: "oneofBytes",
                        oneofBytes: reader.bytes()
                    };
                    break;
                case /* protobuf_unittest.TestAllTypesLite.NestedMessage oneof_lazy_nested_message */ 115:
                    message.oneofField = {
                        oneofKind: "oneofLazyNestedMessage",
                        oneofLazyNestedMessage: TestAllTypesLite_NestedMessage.internalBinaryRead(reader, reader.uint32(), options, (message.oneofField as any).oneofLazyNestedMessage)
                    };
                    break;
                case /* optional int32 deceptively_named_list */ 116:
                    message.deceptivelyNamedList = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestAllTypesLite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 optional_int32 = 1; */
        if (message.optionalInt32 !== undefined)
            writer.tag(1, WireType.Varint).int32(message.optionalInt32);
        /* optional int64 optional_int64 = 2; */
        if (message.optionalInt64 !== undefined)
            writer.tag(2, WireType.Varint).int64(message.optionalInt64);
        /* optional uint32 optional_uint32 = 3; */
        if (message.optionalUint32 !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.optionalUint32);
        /* optional uint64 optional_uint64 = 4; */
        if (message.optionalUint64 !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.optionalUint64);
        /* optional sint32 optional_sint32 = 5; */
        if (message.optionalSint32 !== undefined)
            writer.tag(5, WireType.Varint).sint32(message.optionalSint32);
        /* optional sint64 optional_sint64 = 6; */
        if (message.optionalSint64 !== undefined)
            writer.tag(6, WireType.Varint).sint64(message.optionalSint64);
        /* optional fixed32 optional_fixed32 = 7; */
        if (message.optionalFixed32 !== undefined)
            writer.tag(7, WireType.Bit32).fixed32(message.optionalFixed32);
        /* optional fixed64 optional_fixed64 = 8; */
        if (message.optionalFixed64 !== undefined)
            writer.tag(8, WireType.Bit64).fixed64(message.optionalFixed64);
        /* optional sfixed32 optional_sfixed32 = 9; */
        if (message.optionalSfixed32 !== undefined)
            writer.tag(9, WireType.Bit32).sfixed32(message.optionalSfixed32);
        /* optional sfixed64 optional_sfixed64 = 10; */
        if (message.optionalSfixed64 !== undefined)
            writer.tag(10, WireType.Bit64).sfixed64(message.optionalSfixed64);
        /* optional float optional_float = 11; */
        if (message.optionalFloat !== undefined)
            writer.tag(11, WireType.Bit32).float(message.optionalFloat);
        /* optional double optional_double = 12; */
        if (message.optionalDouble !== undefined)
            writer.tag(12, WireType.Bit64).double(message.optionalDouble);
        /* optional bool optional_bool = 13; */
        if (message.optionalBool !== undefined)
            writer.tag(13, WireType.Varint).bool(message.optionalBool);
        /* optional string optional_string = 14; */
        if (message.optionalString !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.optionalString);
        /* optional bytes optional_bytes = 15; */
        if (message.optionalBytes !== undefined)
            writer.tag(15, WireType.LengthDelimited).bytes(message.optionalBytes);
        /* optional protobuf_unittest.TestAllTypesLite.NestedMessage optional_nested_message = 18; */
        if (message.optionalNestedMessage)
            TestAllTypesLite_NestedMessage.internalBinaryWrite(message.optionalNestedMessage, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* optional protobuf_unittest.ForeignMessageLite optional_foreign_message = 19; */
        if (message.optionalForeignMessage)
            ForeignMessageLite.internalBinaryWrite(message.optionalForeignMessage, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* optional protobuf_unittest_import.ImportMessageLite optional_import_message = 20; */
        if (message.optionalImportMessage)
            ImportMessageLite.internalBinaryWrite(message.optionalImportMessage, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* optional protobuf_unittest.TestAllTypesLite.NestedEnum optional_nested_enum = 21; */
        if (message.optionalNestedEnum !== undefined)
            writer.tag(21, WireType.Varint).int32(message.optionalNestedEnum);
        /* optional protobuf_unittest.ForeignEnumLite optional_foreign_enum = 22; */
        if (message.optionalForeignEnum !== undefined)
            writer.tag(22, WireType.Varint).int32(message.optionalForeignEnum);
        /* optional protobuf_unittest_import.ImportEnumLite optional_import_enum = 23; */
        if (message.optionalImportEnum !== undefined)
            writer.tag(23, WireType.Varint).int32(message.optionalImportEnum);
        /* optional string optional_string_piece = 24; */
        if (message.optionalStringPiece !== undefined)
            writer.tag(24, WireType.LengthDelimited).string(message.optionalStringPiece);
        /* optional string optional_cord = 25; */
        if (message.optionalCord !== undefined)
            writer.tag(25, WireType.LengthDelimited).string(message.optionalCord);
        /* optional protobuf_unittest_import.PublicImportMessageLite optional_public_import_message = 26; */
        if (message.optionalPublicImportMessage)
            PublicImportMessageLite.internalBinaryWrite(message.optionalPublicImportMessage, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* optional protobuf_unittest.TestAllTypesLite.NestedMessage optional_lazy_message = 27; */
        if (message.optionalLazyMessage)
            TestAllTypesLite_NestedMessage.internalBinaryWrite(message.optionalLazyMessage, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 repeated_int32 = 31; */
        for (let i = 0; i < message.repeatedInt32.length; i++)
            writer.tag(31, WireType.Varint).int32(message.repeatedInt32[i]);
        /* repeated int64 repeated_int64 = 32; */
        for (let i = 0; i < message.repeatedInt64.length; i++)
            writer.tag(32, WireType.Varint).int64(message.repeatedInt64[i]);
        /* repeated uint32 repeated_uint32 = 33; */
        for (let i = 0; i < message.repeatedUint32.length; i++)
            writer.tag(33, WireType.Varint).uint32(message.repeatedUint32[i]);
        /* repeated uint64 repeated_uint64 = 34; */
        for (let i = 0; i < message.repeatedUint64.length; i++)
            writer.tag(34, WireType.Varint).uint64(message.repeatedUint64[i]);
        /* repeated sint32 repeated_sint32 = 35; */
        for (let i = 0; i < message.repeatedSint32.length; i++)
            writer.tag(35, WireType.Varint).sint32(message.repeatedSint32[i]);
        /* repeated sint64 repeated_sint64 = 36; */
        for (let i = 0; i < message.repeatedSint64.length; i++)
            writer.tag(36, WireType.Varint).sint64(message.repeatedSint64[i]);
        /* repeated fixed32 repeated_fixed32 = 37; */
        for (let i = 0; i < message.repeatedFixed32.length; i++)
            writer.tag(37, WireType.Bit32).fixed32(message.repeatedFixed32[i]);
        /* repeated fixed64 repeated_fixed64 = 38; */
        for (let i = 0; i < message.repeatedFixed64.length; i++)
            writer.tag(38, WireType.Bit64).fixed64(message.repeatedFixed64[i]);
        /* repeated sfixed32 repeated_sfixed32 = 39; */
        for (let i = 0; i < message.repeatedSfixed32.length; i++)
            writer.tag(39, WireType.Bit32).sfixed32(message.repeatedSfixed32[i]);
        /* repeated sfixed64 repeated_sfixed64 = 40; */
        for (let i = 0; i < message.repeatedSfixed64.length; i++)
            writer.tag(40, WireType.Bit64).sfixed64(message.repeatedSfixed64[i]);
        /* repeated float repeated_float = 41; */
        for (let i = 0; i < message.repeatedFloat.length; i++)
            writer.tag(41, WireType.Bit32).float(message.repeatedFloat[i]);
        /* repeated double repeated_double = 42; */
        for (let i = 0; i < message.repeatedDouble.length; i++)
            writer.tag(42, WireType.Bit64).double(message.repeatedDouble[i]);
        /* repeated bool repeated_bool = 43; */
        for (let i = 0; i < message.repeatedBool.length; i++)
            writer.tag(43, WireType.Varint).bool(message.repeatedBool[i]);
        /* repeated string repeated_string = 44; */
        for (let i = 0; i < message.repeatedString.length; i++)
            writer.tag(44, WireType.LengthDelimited).string(message.repeatedString[i]);
        /* repeated bytes repeated_bytes = 45; */
        for (let i = 0; i < message.repeatedBytes.length; i++)
            writer.tag(45, WireType.LengthDelimited).bytes(message.repeatedBytes[i]);
        /* repeated protobuf_unittest.TestAllTypesLite.NestedMessage repeated_nested_message = 48; */
        for (let i = 0; i < message.repeatedNestedMessage.length; i++)
            TestAllTypesLite_NestedMessage.internalBinaryWrite(message.repeatedNestedMessage[i], writer.tag(48, WireType.LengthDelimited).fork(), options).join();
        /* repeated protobuf_unittest.ForeignMessageLite repeated_foreign_message = 49; */
        for (let i = 0; i < message.repeatedForeignMessage.length; i++)
            ForeignMessageLite.internalBinaryWrite(message.repeatedForeignMessage[i], writer.tag(49, WireType.LengthDelimited).fork(), options).join();
        /* repeated protobuf_unittest_import.ImportMessageLite repeated_import_message = 50; */
        for (let i = 0; i < message.repeatedImportMessage.length; i++)
            ImportMessageLite.internalBinaryWrite(message.repeatedImportMessage[i], writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        /* repeated protobuf_unittest.TestAllTypesLite.NestedEnum repeated_nested_enum = 51; */
        for (let i = 0; i < message.repeatedNestedEnum.length; i++)
            writer.tag(51, WireType.Varint).int32(message.repeatedNestedEnum[i]);
        /* repeated protobuf_unittest.ForeignEnumLite repeated_foreign_enum = 52; */
        for (let i = 0; i < message.repeatedForeignEnum.length; i++)
            writer.tag(52, WireType.Varint).int32(message.repeatedForeignEnum[i]);
        /* repeated protobuf_unittest_import.ImportEnumLite repeated_import_enum = 53; */
        for (let i = 0; i < message.repeatedImportEnum.length; i++)
            writer.tag(53, WireType.Varint).int32(message.repeatedImportEnum[i]);
        /* repeated string repeated_string_piece = 54; */
        for (let i = 0; i < message.repeatedStringPiece.length; i++)
            writer.tag(54, WireType.LengthDelimited).string(message.repeatedStringPiece[i]);
        /* repeated string repeated_cord = 55; */
        for (let i = 0; i < message.repeatedCord.length; i++)
            writer.tag(55, WireType.LengthDelimited).string(message.repeatedCord[i]);
        /* repeated protobuf_unittest.TestAllTypesLite.NestedMessage repeated_lazy_message = 57; */
        for (let i = 0; i < message.repeatedLazyMessage.length; i++)
            TestAllTypesLite_NestedMessage.internalBinaryWrite(message.repeatedLazyMessage[i], writer.tag(57, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 default_int32 = 61; */
        if (message.defaultInt32 !== undefined)
            writer.tag(61, WireType.Varint).int32(message.defaultInt32);
        /* optional int64 default_int64 = 62; */
        if (message.defaultInt64 !== undefined)
            writer.tag(62, WireType.Varint).int64(message.defaultInt64);
        /* optional uint32 default_uint32 = 63; */
        if (message.defaultUint32 !== undefined)
            writer.tag(63, WireType.Varint).uint32(message.defaultUint32);
        /* optional uint64 default_uint64 = 64; */
        if (message.defaultUint64 !== undefined)
            writer.tag(64, WireType.Varint).uint64(message.defaultUint64);
        /* optional sint32 default_sint32 = 65; */
        if (message.defaultSint32 !== undefined)
            writer.tag(65, WireType.Varint).sint32(message.defaultSint32);
        /* optional sint64 default_sint64 = 66; */
        if (message.defaultSint64 !== undefined)
            writer.tag(66, WireType.Varint).sint64(message.defaultSint64);
        /* optional fixed32 default_fixed32 = 67; */
        if (message.defaultFixed32 !== undefined)
            writer.tag(67, WireType.Bit32).fixed32(message.defaultFixed32);
        /* optional fixed64 default_fixed64 = 68; */
        if (message.defaultFixed64 !== undefined)
            writer.tag(68, WireType.Bit64).fixed64(message.defaultFixed64);
        /* optional sfixed32 default_sfixed32 = 69; */
        if (message.defaultSfixed32 !== undefined)
            writer.tag(69, WireType.Bit32).sfixed32(message.defaultSfixed32);
        /* optional sfixed64 default_sfixed64 = 70; */
        if (message.defaultSfixed64 !== undefined)
            writer.tag(70, WireType.Bit64).sfixed64(message.defaultSfixed64);
        /* optional float default_float = 71; */
        if (message.defaultFloat !== undefined)
            writer.tag(71, WireType.Bit32).float(message.defaultFloat);
        /* optional double default_double = 72; */
        if (message.defaultDouble !== undefined)
            writer.tag(72, WireType.Bit64).double(message.defaultDouble);
        /* optional bool default_bool = 73; */
        if (message.defaultBool !== undefined)
            writer.tag(73, WireType.Varint).bool(message.defaultBool);
        /* optional string default_string = 74; */
        if (message.defaultString !== undefined)
            writer.tag(74, WireType.LengthDelimited).string(message.defaultString);
        /* optional bytes default_bytes = 75; */
        if (message.defaultBytes !== undefined)
            writer.tag(75, WireType.LengthDelimited).bytes(message.defaultBytes);
        /* optional protobuf_unittest.TestAllTypesLite.NestedEnum default_nested_enum = 81; */
        if (message.defaultNestedEnum !== undefined)
            writer.tag(81, WireType.Varint).int32(message.defaultNestedEnum);
        /* optional protobuf_unittest.ForeignEnumLite default_foreign_enum = 82; */
        if (message.defaultForeignEnum !== undefined)
            writer.tag(82, WireType.Varint).int32(message.defaultForeignEnum);
        /* optional protobuf_unittest_import.ImportEnumLite default_import_enum = 83; */
        if (message.defaultImportEnum !== undefined)
            writer.tag(83, WireType.Varint).int32(message.defaultImportEnum);
        /* optional string default_string_piece = 84; */
        if (message.defaultStringPiece !== undefined)
            writer.tag(84, WireType.LengthDelimited).string(message.defaultStringPiece);
        /* optional string default_cord = 85; */
        if (message.defaultCord !== undefined)
            writer.tag(85, WireType.LengthDelimited).string(message.defaultCord);
        /* uint32 oneof_uint32 = 111; */
        if (message.oneofField.oneofKind === "oneofUint32")
            writer.tag(111, WireType.Varint).uint32(message.oneofField.oneofUint32);
        /* protobuf_unittest.TestAllTypesLite.NestedMessage oneof_nested_message = 112; */
        if (message.oneofField.oneofKind === "oneofNestedMessage")
            TestAllTypesLite_NestedMessage.internalBinaryWrite(message.oneofField.oneofNestedMessage, writer.tag(112, WireType.LengthDelimited).fork(), options).join();
        /* string oneof_string = 113; */
        if (message.oneofField.oneofKind === "oneofString")
            writer.tag(113, WireType.LengthDelimited).string(message.oneofField.oneofString);
        /* bytes oneof_bytes = 114; */
        if (message.oneofField.oneofKind === "oneofBytes")
            writer.tag(114, WireType.LengthDelimited).bytes(message.oneofField.oneofBytes);
        /* protobuf_unittest.TestAllTypesLite.NestedMessage oneof_lazy_nested_message = 115; */
        if (message.oneofField.oneofKind === "oneofLazyNestedMessage")
            TestAllTypesLite_NestedMessage.internalBinaryWrite(message.oneofField.oneofLazyNestedMessage, writer.tag(115, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 deceptively_named_list = 116; */
        if (message.deceptivelyNamedList !== undefined)
            writer.tag(116, WireType.Varint).int32(message.deceptivelyNamedList);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestAllTypesLite
 */
export const TestAllTypesLite = new TestAllTypesLite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestAllTypesLite_NestedMessage$Type extends MessageType<TestAllTypesLite_NestedMessage> {
    constructor() {
        super("protobuf_unittest.TestAllTypesLite.NestedMessage", [
            { no: 1, name: "bb", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "cc", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<TestAllTypesLite_NestedMessage>): TestAllTypesLite_NestedMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestAllTypesLite_NestedMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestAllTypesLite_NestedMessage): TestAllTypesLite_NestedMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 bb */ 1:
                    message.bb = reader.int32();
                    break;
                case /* optional int64 cc */ 2:
                    message.cc = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestAllTypesLite_NestedMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 bb = 1; */
        if (message.bb !== undefined)
            writer.tag(1, WireType.Varint).int32(message.bb);
        /* optional int64 cc = 2; */
        if (message.cc !== undefined)
            writer.tag(2, WireType.Varint).int64(message.cc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestAllTypesLite.NestedMessage
 */
export const TestAllTypesLite_NestedMessage = new TestAllTypesLite_NestedMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestAllTypesLite_OptionalGroup$Type extends MessageType<TestAllTypesLite_OptionalGroup> {
    constructor() {
        super("protobuf_unittest.TestAllTypesLite.OptionalGroup", [
            { no: 17, name: "a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestAllTypesLite_OptionalGroup>): TestAllTypesLite_OptionalGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestAllTypesLite_OptionalGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestAllTypesLite_OptionalGroup): TestAllTypesLite_OptionalGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 a */ 17:
                    message.a = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestAllTypesLite_OptionalGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 a = 17; */
        if (message.a !== undefined)
            writer.tag(17, WireType.Varint).int32(message.a);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestAllTypesLite.OptionalGroup
 */
export const TestAllTypesLite_OptionalGroup = new TestAllTypesLite_OptionalGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestAllTypesLite_RepeatedGroup$Type extends MessageType<TestAllTypesLite_RepeatedGroup> {
    constructor() {
        super("protobuf_unittest.TestAllTypesLite.RepeatedGroup", [
            { no: 47, name: "a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestAllTypesLite_RepeatedGroup>): TestAllTypesLite_RepeatedGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestAllTypesLite_RepeatedGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestAllTypesLite_RepeatedGroup): TestAllTypesLite_RepeatedGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 a */ 47:
                    message.a = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestAllTypesLite_RepeatedGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 a = 47; */
        if (message.a !== undefined)
            writer.tag(47, WireType.Varint).int32(message.a);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestAllTypesLite.RepeatedGroup
 */
export const TestAllTypesLite_RepeatedGroup = new TestAllTypesLite_RepeatedGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForeignMessageLite$Type extends MessageType<ForeignMessageLite> {
    constructor() {
        super("protobuf_unittest.ForeignMessageLite", [
            { no: 1, name: "c", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ForeignMessageLite>): ForeignMessageLite {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ForeignMessageLite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForeignMessageLite): ForeignMessageLite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 c */ 1:
                    message.c = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForeignMessageLite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 c = 1; */
        if (message.c !== undefined)
            writer.tag(1, WireType.Varint).int32(message.c);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.ForeignMessageLite
 */
export const ForeignMessageLite = new ForeignMessageLite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestPackedTypesLite$Type extends MessageType<TestPackedTypesLite> {
    constructor() {
        super("protobuf_unittest.TestPackedTypesLite", [
            { no: 90, name: "packed_int32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 91, name: "packed_int64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/ },
            { no: 92, name: "packed_uint32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 93, name: "packed_uint64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ },
            { no: 94, name: "packed_sint32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 17 /*ScalarType.SINT32*/ },
            { no: 95, name: "packed_sint64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 18 /*ScalarType.SINT64*/ },
            { no: 96, name: "packed_fixed32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 7 /*ScalarType.FIXED32*/ },
            { no: 97, name: "packed_fixed64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 6 /*ScalarType.FIXED64*/ },
            { no: 98, name: "packed_sfixed32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 15 /*ScalarType.SFIXED32*/ },
            { no: 99, name: "packed_sfixed64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 16 /*ScalarType.SFIXED64*/ },
            { no: 100, name: "packed_float", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 101, name: "packed_double", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 102, name: "packed_bool", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 103, name: "packed_enum", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["protobuf_unittest.ForeignEnumLite", ForeignEnumLite] }
        ]);
    }
    create(value?: PartialMessage<TestPackedTypesLite>): TestPackedTypesLite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.packedInt32 = [];
        message.packedInt64 = [];
        message.packedUint32 = [];
        message.packedUint64 = [];
        message.packedSint32 = [];
        message.packedSint64 = [];
        message.packedFixed32 = [];
        message.packedFixed64 = [];
        message.packedSfixed32 = [];
        message.packedSfixed64 = [];
        message.packedFloat = [];
        message.packedDouble = [];
        message.packedBool = [];
        message.packedEnum = [];
        if (value !== undefined)
            reflectionMergePartial<TestPackedTypesLite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestPackedTypesLite): TestPackedTypesLite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 packed_int32 = 90 [packed = true];*/ 90:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedInt32.push(reader.int32());
                    else
                        message.packedInt32.push(reader.int32());
                    break;
                case /* repeated int64 packed_int64 = 91 [packed = true];*/ 91:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedInt64.push(reader.int64().toString());
                    else
                        message.packedInt64.push(reader.int64().toString());
                    break;
                case /* repeated uint32 packed_uint32 = 92 [packed = true];*/ 92:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedUint32.push(reader.uint32());
                    else
                        message.packedUint32.push(reader.uint32());
                    break;
                case /* repeated uint64 packed_uint64 = 93 [packed = true];*/ 93:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedUint64.push(reader.uint64().toString());
                    else
                        message.packedUint64.push(reader.uint64().toString());
                    break;
                case /* repeated sint32 packed_sint32 = 94 [packed = true];*/ 94:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedSint32.push(reader.sint32());
                    else
                        message.packedSint32.push(reader.sint32());
                    break;
                case /* repeated sint64 packed_sint64 = 95 [packed = true];*/ 95:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedSint64.push(reader.sint64().toString());
                    else
                        message.packedSint64.push(reader.sint64().toString());
                    break;
                case /* repeated fixed32 packed_fixed32 = 96 [packed = true];*/ 96:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedFixed32.push(reader.fixed32());
                    else
                        message.packedFixed32.push(reader.fixed32());
                    break;
                case /* repeated fixed64 packed_fixed64 = 97 [packed = true];*/ 97:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedFixed64.push(reader.fixed64().toString());
                    else
                        message.packedFixed64.push(reader.fixed64().toString());
                    break;
                case /* repeated sfixed32 packed_sfixed32 = 98 [packed = true];*/ 98:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedSfixed32.push(reader.sfixed32());
                    else
                        message.packedSfixed32.push(reader.sfixed32());
                    break;
                case /* repeated sfixed64 packed_sfixed64 = 99 [packed = true];*/ 99:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedSfixed64.push(reader.sfixed64().toString());
                    else
                        message.packedSfixed64.push(reader.sfixed64().toString());
                    break;
                case /* repeated float packed_float = 100 [packed = true];*/ 100:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedFloat.push(reader.float());
                    else
                        message.packedFloat.push(reader.float());
                    break;
                case /* repeated double packed_double = 101 [packed = true];*/ 101:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedDouble.push(reader.double());
                    else
                        message.packedDouble.push(reader.double());
                    break;
                case /* repeated bool packed_bool = 102 [packed = true];*/ 102:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedBool.push(reader.bool());
                    else
                        message.packedBool.push(reader.bool());
                    break;
                case /* repeated protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];*/ 103:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedEnum.push(reader.int32());
                    else
                        message.packedEnum.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestPackedTypesLite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 packed_int32 = 90 [packed = true]; */
        if (message.packedInt32.length) {
            writer.tag(90, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedInt32.length; i++)
                writer.int32(message.packedInt32[i]);
            writer.join();
        }
        /* repeated int64 packed_int64 = 91 [packed = true]; */
        if (message.packedInt64.length) {
            writer.tag(91, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedInt64.length; i++)
                writer.int64(message.packedInt64[i]);
            writer.join();
        }
        /* repeated uint32 packed_uint32 = 92 [packed = true]; */
        if (message.packedUint32.length) {
            writer.tag(92, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedUint32.length; i++)
                writer.uint32(message.packedUint32[i]);
            writer.join();
        }
        /* repeated uint64 packed_uint64 = 93 [packed = true]; */
        if (message.packedUint64.length) {
            writer.tag(93, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedUint64.length; i++)
                writer.uint64(message.packedUint64[i]);
            writer.join();
        }
        /* repeated sint32 packed_sint32 = 94 [packed = true]; */
        if (message.packedSint32.length) {
            writer.tag(94, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedSint32.length; i++)
                writer.sint32(message.packedSint32[i]);
            writer.join();
        }
        /* repeated sint64 packed_sint64 = 95 [packed = true]; */
        if (message.packedSint64.length) {
            writer.tag(95, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedSint64.length; i++)
                writer.sint64(message.packedSint64[i]);
            writer.join();
        }
        /* repeated fixed32 packed_fixed32 = 96 [packed = true]; */
        if (message.packedFixed32.length) {
            writer.tag(96, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedFixed32.length; i++)
                writer.fixed32(message.packedFixed32[i]);
            writer.join();
        }
        /* repeated fixed64 packed_fixed64 = 97 [packed = true]; */
        if (message.packedFixed64.length) {
            writer.tag(97, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedFixed64.length; i++)
                writer.fixed64(message.packedFixed64[i]);
            writer.join();
        }
        /* repeated sfixed32 packed_sfixed32 = 98 [packed = true]; */
        if (message.packedSfixed32.length) {
            writer.tag(98, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedSfixed32.length; i++)
                writer.sfixed32(message.packedSfixed32[i]);
            writer.join();
        }
        /* repeated sfixed64 packed_sfixed64 = 99 [packed = true]; */
        if (message.packedSfixed64.length) {
            writer.tag(99, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedSfixed64.length; i++)
                writer.sfixed64(message.packedSfixed64[i]);
            writer.join();
        }
        /* repeated float packed_float = 100 [packed = true]; */
        if (message.packedFloat.length) {
            writer.tag(100, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedFloat.length; i++)
                writer.float(message.packedFloat[i]);
            writer.join();
        }
        /* repeated double packed_double = 101 [packed = true]; */
        if (message.packedDouble.length) {
            writer.tag(101, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedDouble.length; i++)
                writer.double(message.packedDouble[i]);
            writer.join();
        }
        /* repeated bool packed_bool = 102 [packed = true]; */
        if (message.packedBool.length) {
            writer.tag(102, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedBool.length; i++)
                writer.bool(message.packedBool[i]);
            writer.join();
        }
        /* repeated protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true]; */
        if (message.packedEnum.length) {
            writer.tag(103, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedEnum.length; i++)
                writer.int32(message.packedEnum[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestPackedTypesLite
 */
export const TestPackedTypesLite = new TestPackedTypesLite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestAllExtensionsLite$Type extends MessageType<TestAllExtensionsLite> {
    constructor() {
        super("protobuf_unittest.TestAllExtensionsLite", []);
    }
    create(value?: PartialMessage<TestAllExtensionsLite>): TestAllExtensionsLite {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestAllExtensionsLite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestAllExtensionsLite): TestAllExtensionsLite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestAllExtensionsLite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestAllExtensionsLite
 */
export const TestAllExtensionsLite = new TestAllExtensionsLite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OptionalGroup_extension_lite$Type extends MessageType<OptionalGroup_extension_lite> {
    constructor() {
        super("protobuf_unittest.OptionalGroup_extension_lite", [
            { no: 17, name: "a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<OptionalGroup_extension_lite>): OptionalGroup_extension_lite {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OptionalGroup_extension_lite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OptionalGroup_extension_lite): OptionalGroup_extension_lite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 a */ 17:
                    message.a = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OptionalGroup_extension_lite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 a = 17; */
        if (message.a !== undefined)
            writer.tag(17, WireType.Varint).int32(message.a);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.OptionalGroup_extension_lite
 */
export const OptionalGroup_extension_lite = new OptionalGroup_extension_lite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RepeatedGroup_extension_lite$Type extends MessageType<RepeatedGroup_extension_lite> {
    constructor() {
        super("protobuf_unittest.RepeatedGroup_extension_lite", [
            { no: 47, name: "a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RepeatedGroup_extension_lite>): RepeatedGroup_extension_lite {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RepeatedGroup_extension_lite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RepeatedGroup_extension_lite): RepeatedGroup_extension_lite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 a */ 47:
                    message.a = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RepeatedGroup_extension_lite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 a = 47; */
        if (message.a !== undefined)
            writer.tag(47, WireType.Varint).int32(message.a);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.RepeatedGroup_extension_lite
 */
export const RepeatedGroup_extension_lite = new RepeatedGroup_extension_lite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestPackedExtensionsLite$Type extends MessageType<TestPackedExtensionsLite> {
    constructor() {
        super("protobuf_unittest.TestPackedExtensionsLite", []);
    }
    create(value?: PartialMessage<TestPackedExtensionsLite>): TestPackedExtensionsLite {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestPackedExtensionsLite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestPackedExtensionsLite): TestPackedExtensionsLite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestPackedExtensionsLite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestPackedExtensionsLite
 */
export const TestPackedExtensionsLite = new TestPackedExtensionsLite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestNestedExtensionLite$Type extends MessageType<TestNestedExtensionLite> {
    constructor() {
        super("protobuf_unittest.TestNestedExtensionLite", []);
    }
    create(value?: PartialMessage<TestNestedExtensionLite>): TestNestedExtensionLite {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestNestedExtensionLite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestNestedExtensionLite): TestNestedExtensionLite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestNestedExtensionLite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestNestedExtensionLite
 */
export const TestNestedExtensionLite = new TestNestedExtensionLite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestDeprecatedLite$Type extends MessageType<TestDeprecatedLite> {
    constructor() {
        super("protobuf_unittest.TestDeprecatedLite", [
            { no: 1, name: "deprecated_field", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "deprecated_field2", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "deprecated_field3", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "deprecated_field4", kind: "message", T: () => TestDeprecatedLite }
        ]);
    }
    create(value?: PartialMessage<TestDeprecatedLite>): TestDeprecatedLite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.deprecatedField2 = 0;
        if (value !== undefined)
            reflectionMergePartial<TestDeprecatedLite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestDeprecatedLite): TestDeprecatedLite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 deprecated_field = 1 [deprecated = true];*/ 1:
                    message.deprecatedField = reader.int32();
                    break;
                case /* int32 deprecated_field2 = 2 [deprecated = true];*/ 2:
                    message.deprecatedField2 = reader.int32();
                    break;
                case /* optional string deprecated_field3 = 3 [deprecated = true];*/ 3:
                    message.deprecatedField3 = reader.string();
                    break;
                case /* optional protobuf_unittest.TestDeprecatedLite deprecated_field4 = 4 [deprecated = true];*/ 4:
                    message.deprecatedField4 = TestDeprecatedLite.internalBinaryRead(reader, reader.uint32(), options, message.deprecatedField4);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestDeprecatedLite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 deprecated_field = 1 [deprecated = true]; */
        if (message.deprecatedField !== undefined)
            writer.tag(1, WireType.Varint).int32(message.deprecatedField);
        /* int32 deprecated_field2 = 2 [deprecated = true]; */
        if (message.deprecatedField2 !== 0)
            writer.tag(2, WireType.Varint).int32(message.deprecatedField2);
        /* optional string deprecated_field3 = 3 [deprecated = true]; */
        if (message.deprecatedField3 !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.deprecatedField3);
        /* optional protobuf_unittest.TestDeprecatedLite deprecated_field4 = 4 [deprecated = true]; */
        if (message.deprecatedField4)
            TestDeprecatedLite.internalBinaryWrite(message.deprecatedField4, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestDeprecatedLite
 */
export const TestDeprecatedLite = new TestDeprecatedLite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestParsingMergeLite$Type extends MessageType<TestParsingMergeLite> {
    constructor() {
        super("protobuf_unittest.TestParsingMergeLite", [
            { no: 1, name: "required_all_types", kind: "message", T: () => TestAllTypesLite },
            { no: 2, name: "optional_all_types", kind: "message", T: () => TestAllTypesLite },
            { no: 3, name: "repeated_all_types", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestAllTypesLite }
        ]);
    }
    create(value?: PartialMessage<TestParsingMergeLite>): TestParsingMergeLite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.repeatedAllTypes = [];
        if (value !== undefined)
            reflectionMergePartial<TestParsingMergeLite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestParsingMergeLite): TestParsingMergeLite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protobuf_unittest.TestAllTypesLite required_all_types */ 1:
                    message.requiredAllTypes = TestAllTypesLite.internalBinaryRead(reader, reader.uint32(), options, message.requiredAllTypes);
                    break;
                case /* optional protobuf_unittest.TestAllTypesLite optional_all_types */ 2:
                    message.optionalAllTypes = TestAllTypesLite.internalBinaryRead(reader, reader.uint32(), options, message.optionalAllTypes);
                    break;
                case /* repeated protobuf_unittest.TestAllTypesLite repeated_all_types */ 3:
                    message.repeatedAllTypes.push(TestAllTypesLite.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestParsingMergeLite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protobuf_unittest.TestAllTypesLite required_all_types = 1; */
        if (message.requiredAllTypes)
            TestAllTypesLite.internalBinaryWrite(message.requiredAllTypes, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional protobuf_unittest.TestAllTypesLite optional_all_types = 2; */
        if (message.optionalAllTypes)
            TestAllTypesLite.internalBinaryWrite(message.optionalAllTypes, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated protobuf_unittest.TestAllTypesLite repeated_all_types = 3; */
        for (let i = 0; i < message.repeatedAllTypes.length; i++)
            TestAllTypesLite.internalBinaryWrite(message.repeatedAllTypes[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestParsingMergeLite
 */
export const TestParsingMergeLite = new TestParsingMergeLite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestParsingMergeLite_RepeatedFieldsGenerator$Type extends MessageType<TestParsingMergeLite_RepeatedFieldsGenerator> {
    constructor() {
        super("protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator", [
            { no: 1, name: "field1", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestAllTypesLite },
            { no: 2, name: "field2", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestAllTypesLite },
            { no: 3, name: "field3", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestAllTypesLite },
            { no: 1000, name: "ext1", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestAllTypesLite },
            { no: 1001, name: "ext2", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestAllTypesLite }
        ]);
    }
    create(value?: PartialMessage<TestParsingMergeLite_RepeatedFieldsGenerator>): TestParsingMergeLite_RepeatedFieldsGenerator {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.field1 = [];
        message.field2 = [];
        message.field3 = [];
        message.ext1 = [];
        message.ext2 = [];
        if (value !== undefined)
            reflectionMergePartial<TestParsingMergeLite_RepeatedFieldsGenerator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestParsingMergeLite_RepeatedFieldsGenerator): TestParsingMergeLite_RepeatedFieldsGenerator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated protobuf_unittest.TestAllTypesLite field1 */ 1:
                    message.field1.push(TestAllTypesLite.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated protobuf_unittest.TestAllTypesLite field2 */ 2:
                    message.field2.push(TestAllTypesLite.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated protobuf_unittest.TestAllTypesLite field3 */ 3:
                    message.field3.push(TestAllTypesLite.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated protobuf_unittest.TestAllTypesLite ext1 */ 1000:
                    message.ext1.push(TestAllTypesLite.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated protobuf_unittest.TestAllTypesLite ext2 */ 1001:
                    message.ext2.push(TestAllTypesLite.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestParsingMergeLite_RepeatedFieldsGenerator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated protobuf_unittest.TestAllTypesLite field1 = 1; */
        for (let i = 0; i < message.field1.length; i++)
            TestAllTypesLite.internalBinaryWrite(message.field1[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated protobuf_unittest.TestAllTypesLite field2 = 2; */
        for (let i = 0; i < message.field2.length; i++)
            TestAllTypesLite.internalBinaryWrite(message.field2[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated protobuf_unittest.TestAllTypesLite field3 = 3; */
        for (let i = 0; i < message.field3.length; i++)
            TestAllTypesLite.internalBinaryWrite(message.field3[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated protobuf_unittest.TestAllTypesLite ext1 = 1000; */
        for (let i = 0; i < message.ext1.length; i++)
            TestAllTypesLite.internalBinaryWrite(message.ext1[i], writer.tag(1000, WireType.LengthDelimited).fork(), options).join();
        /* repeated protobuf_unittest.TestAllTypesLite ext2 = 1001; */
        for (let i = 0; i < message.ext2.length; i++)
            TestAllTypesLite.internalBinaryWrite(message.ext2[i], writer.tag(1001, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator
 */
export const TestParsingMergeLite_RepeatedFieldsGenerator = new TestParsingMergeLite_RepeatedFieldsGenerator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestParsingMergeLite_RepeatedFieldsGenerator_Group1$Type extends MessageType<TestParsingMergeLite_RepeatedFieldsGenerator_Group1> {
    constructor() {
        super("protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1", [
            { no: 11, name: "field1", kind: "message", T: () => TestAllTypesLite }
        ]);
    }
    create(value?: PartialMessage<TestParsingMergeLite_RepeatedFieldsGenerator_Group1>): TestParsingMergeLite_RepeatedFieldsGenerator_Group1 {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestParsingMergeLite_RepeatedFieldsGenerator_Group1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestParsingMergeLite_RepeatedFieldsGenerator_Group1): TestParsingMergeLite_RepeatedFieldsGenerator_Group1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional protobuf_unittest.TestAllTypesLite field1 */ 11:
                    message.field1 = TestAllTypesLite.internalBinaryRead(reader, reader.uint32(), options, message.field1);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestParsingMergeLite_RepeatedFieldsGenerator_Group1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional protobuf_unittest.TestAllTypesLite field1 = 11; */
        if (message.field1)
            TestAllTypesLite.internalBinaryWrite(message.field1, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1
 */
export const TestParsingMergeLite_RepeatedFieldsGenerator_Group1 = new TestParsingMergeLite_RepeatedFieldsGenerator_Group1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestParsingMergeLite_RepeatedFieldsGenerator_Group2$Type extends MessageType<TestParsingMergeLite_RepeatedFieldsGenerator_Group2> {
    constructor() {
        super("protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2", [
            { no: 21, name: "field1", kind: "message", T: () => TestAllTypesLite }
        ]);
    }
    create(value?: PartialMessage<TestParsingMergeLite_RepeatedFieldsGenerator_Group2>): TestParsingMergeLite_RepeatedFieldsGenerator_Group2 {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestParsingMergeLite_RepeatedFieldsGenerator_Group2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestParsingMergeLite_RepeatedFieldsGenerator_Group2): TestParsingMergeLite_RepeatedFieldsGenerator_Group2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional protobuf_unittest.TestAllTypesLite field1 */ 21:
                    message.field1 = TestAllTypesLite.internalBinaryRead(reader, reader.uint32(), options, message.field1);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestParsingMergeLite_RepeatedFieldsGenerator_Group2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional protobuf_unittest.TestAllTypesLite field1 = 21; */
        if (message.field1)
            TestAllTypesLite.internalBinaryWrite(message.field1, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2
 */
export const TestParsingMergeLite_RepeatedFieldsGenerator_Group2 = new TestParsingMergeLite_RepeatedFieldsGenerator_Group2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestParsingMergeLite_OptionalGroup$Type extends MessageType<TestParsingMergeLite_OptionalGroup> {
    constructor() {
        super("protobuf_unittest.TestParsingMergeLite.OptionalGroup", [
            { no: 11, name: "optional_group_all_types", kind: "message", T: () => TestAllTypesLite }
        ]);
    }
    create(value?: PartialMessage<TestParsingMergeLite_OptionalGroup>): TestParsingMergeLite_OptionalGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestParsingMergeLite_OptionalGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestParsingMergeLite_OptionalGroup): TestParsingMergeLite_OptionalGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional protobuf_unittest.TestAllTypesLite optional_group_all_types */ 11:
                    message.optionalGroupAllTypes = TestAllTypesLite.internalBinaryRead(reader, reader.uint32(), options, message.optionalGroupAllTypes);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestParsingMergeLite_OptionalGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional protobuf_unittest.TestAllTypesLite optional_group_all_types = 11; */
        if (message.optionalGroupAllTypes)
            TestAllTypesLite.internalBinaryWrite(message.optionalGroupAllTypes, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestParsingMergeLite.OptionalGroup
 */
export const TestParsingMergeLite_OptionalGroup = new TestParsingMergeLite_OptionalGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestParsingMergeLite_RepeatedGroup$Type extends MessageType<TestParsingMergeLite_RepeatedGroup> {
    constructor() {
        super("protobuf_unittest.TestParsingMergeLite.RepeatedGroup", [
            { no: 21, name: "repeated_group_all_types", kind: "message", T: () => TestAllTypesLite }
        ]);
    }
    create(value?: PartialMessage<TestParsingMergeLite_RepeatedGroup>): TestParsingMergeLite_RepeatedGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestParsingMergeLite_RepeatedGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestParsingMergeLite_RepeatedGroup): TestParsingMergeLite_RepeatedGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional protobuf_unittest.TestAllTypesLite repeated_group_all_types */ 21:
                    message.repeatedGroupAllTypes = TestAllTypesLite.internalBinaryRead(reader, reader.uint32(), options, message.repeatedGroupAllTypes);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestParsingMergeLite_RepeatedGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional protobuf_unittest.TestAllTypesLite repeated_group_all_types = 21; */
        if (message.repeatedGroupAllTypes)
            TestAllTypesLite.internalBinaryWrite(message.repeatedGroupAllTypes, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestParsingMergeLite.RepeatedGroup
 */
export const TestParsingMergeLite_RepeatedGroup = new TestParsingMergeLite_RepeatedGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestEmptyMessageLite$Type extends MessageType<TestEmptyMessageLite> {
    constructor() {
        super("protobuf_unittest.TestEmptyMessageLite", []);
    }
    create(value?: PartialMessage<TestEmptyMessageLite>): TestEmptyMessageLite {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestEmptyMessageLite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestEmptyMessageLite): TestEmptyMessageLite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestEmptyMessageLite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestEmptyMessageLite
 */
export const TestEmptyMessageLite = new TestEmptyMessageLite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestEmptyMessageWithExtensionsLite$Type extends MessageType<TestEmptyMessageWithExtensionsLite> {
    constructor() {
        super("protobuf_unittest.TestEmptyMessageWithExtensionsLite", []);
    }
    create(value?: PartialMessage<TestEmptyMessageWithExtensionsLite>): TestEmptyMessageWithExtensionsLite {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestEmptyMessageWithExtensionsLite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestEmptyMessageWithExtensionsLite): TestEmptyMessageWithExtensionsLite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestEmptyMessageWithExtensionsLite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestEmptyMessageWithExtensionsLite
 */
export const TestEmptyMessageWithExtensionsLite = new TestEmptyMessageWithExtensionsLite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class V1MessageLite$Type extends MessageType<V1MessageLite> {
    constructor() {
        super("protobuf_unittest.V1MessageLite", [
            { no: 1, name: "int_field", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "enum_field", kind: "enum", opt: true, T: () => ["protobuf_unittest.V1EnumLite", V1EnumLite] }
        ]);
    }
    create(value?: PartialMessage<V1MessageLite>): V1MessageLite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.intField = 0;
        if (value !== undefined)
            reflectionMergePartial<V1MessageLite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: V1MessageLite): V1MessageLite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 int_field */ 1:
                    message.intField = reader.int32();
                    break;
                case /* optional protobuf_unittest.V1EnumLite enum_field */ 2:
                    message.enumField = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: V1MessageLite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 int_field = 1; */
        if (message.intField !== 0)
            writer.tag(1, WireType.Varint).int32(message.intField);
        /* optional protobuf_unittest.V1EnumLite enum_field = 2; */
        if (message.enumField !== undefined)
            writer.tag(2, WireType.Varint).int32(message.enumField);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.V1MessageLite
 */
export const V1MessageLite = new V1MessageLite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class V2MessageLite$Type extends MessageType<V2MessageLite> {
    constructor() {
        super("protobuf_unittest.V2MessageLite", [
            { no: 1, name: "int_field", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "enum_field", kind: "enum", opt: true, T: () => ["protobuf_unittest.V2EnumLite", V2EnumLite] }
        ]);
    }
    create(value?: PartialMessage<V2MessageLite>): V2MessageLite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.intField = 0;
        if (value !== undefined)
            reflectionMergePartial<V2MessageLite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: V2MessageLite): V2MessageLite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 int_field */ 1:
                    message.intField = reader.int32();
                    break;
                case /* optional protobuf_unittest.V2EnumLite enum_field */ 2:
                    message.enumField = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: V2MessageLite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 int_field = 1; */
        if (message.intField !== 0)
            writer.tag(1, WireType.Varint).int32(message.intField);
        /* optional protobuf_unittest.V2EnumLite enum_field = 2; */
        if (message.enumField !== undefined)
            writer.tag(2, WireType.Varint).int32(message.enumField);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.V2MessageLite
 */
export const V2MessageLite = new V2MessageLite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestHugeFieldNumbersLite$Type extends MessageType<TestHugeFieldNumbersLite> {
    constructor() {
        super("protobuf_unittest.TestHugeFieldNumbersLite", [
            { no: 536870000, name: "optional_int32", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 536870001, name: "fixed_32", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 536870002, name: "repeated_int32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 536870003, name: "packed_int32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 536870004, name: "optional_enum", kind: "enum", opt: true, T: () => ["protobuf_unittest.ForeignEnumLite", ForeignEnumLite] },
            { no: 536870005, name: "optional_string", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 536870006, name: "optional_bytes", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 536870007, name: "optional_message", kind: "message", T: () => ForeignMessageLite },
            { no: 536870010, name: "string_string_map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 536870011, name: "oneof_uint32", kind: "scalar", oneof: "oneofField", T: 13 /*ScalarType.UINT32*/ },
            { no: 536870012, name: "oneof_test_all_types", kind: "message", oneof: "oneofField", T: () => TestAllTypesLite },
            { no: 536870013, name: "oneof_string", kind: "scalar", oneof: "oneofField", T: 9 /*ScalarType.STRING*/ },
            { no: 536870014, name: "oneof_bytes", kind: "scalar", oneof: "oneofField", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<TestHugeFieldNumbersLite>): TestHugeFieldNumbersLite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.repeatedInt32 = [];
        message.packedInt32 = [];
        message.stringStringMap = {};
        message.oneofField = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<TestHugeFieldNumbersLite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestHugeFieldNumbersLite): TestHugeFieldNumbersLite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 optional_int32 */ 536870000:
                    message.optionalInt32 = reader.int32();
                    break;
                case /* optional int32 fixed_32 */ 536870001:
                    message.fixed32 = reader.int32();
                    break;
                case /* repeated int32 repeated_int32 = 536870002 [packed = false];*/ 536870002:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedInt32.push(reader.int32());
                    else
                        message.repeatedInt32.push(reader.int32());
                    break;
                case /* repeated int32 packed_int32 = 536870003 [packed = true];*/ 536870003:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packedInt32.push(reader.int32());
                    else
                        message.packedInt32.push(reader.int32());
                    break;
                case /* optional protobuf_unittest.ForeignEnumLite optional_enum */ 536870004:
                    message.optionalEnum = reader.int32();
                    break;
                case /* optional string optional_string */ 536870005:
                    message.optionalString = reader.string();
                    break;
                case /* optional bytes optional_bytes */ 536870006:
                    message.optionalBytes = reader.bytes();
                    break;
                case /* optional protobuf_unittest.ForeignMessageLite optional_message */ 536870007:
                    message.optionalMessage = ForeignMessageLite.internalBinaryRead(reader, reader.uint32(), options, message.optionalMessage);
                    break;
                case /* map<string, string> string_string_map */ 536870010:
                    this.binaryReadMap536870010(message.stringStringMap, reader, options);
                    break;
                case /* uint32 oneof_uint32 */ 536870011:
                    message.oneofField = {
                        oneofKind: "oneofUint32",
                        oneofUint32: reader.uint32()
                    };
                    break;
                case /* protobuf_unittest.TestAllTypesLite oneof_test_all_types */ 536870012:
                    message.oneofField = {
                        oneofKind: "oneofTestAllTypes",
                        oneofTestAllTypes: TestAllTypesLite.internalBinaryRead(reader, reader.uint32(), options, (message.oneofField as any).oneofTestAllTypes)
                    };
                    break;
                case /* string oneof_string */ 536870013:
                    message.oneofField = {
                        oneofKind: "oneofString",
                        oneofString: reader.string()
                    };
                    break;
                case /* bytes oneof_bytes */ 536870014:
                    message.oneofField = {
                        oneofKind: "oneofBytes",
                        oneofBytes: reader.bytes()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap536870010(map: TestHugeFieldNumbersLite["stringStringMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestHugeFieldNumbersLite["stringStringMap"] | undefined, val: TestHugeFieldNumbersLite["stringStringMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_unittest.TestHugeFieldNumbersLite.string_string_map");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: TestHugeFieldNumbersLite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 optional_int32 = 536870000; */
        if (message.optionalInt32 !== undefined)
            writer.tag(536870000, WireType.Varint).int32(message.optionalInt32);
        /* optional int32 fixed_32 = 536870001; */
        if (message.fixed32 !== undefined)
            writer.tag(536870001, WireType.Varint).int32(message.fixed32);
        /* repeated int32 repeated_int32 = 536870002 [packed = false]; */
        for (let i = 0; i < message.repeatedInt32.length; i++)
            writer.tag(536870002, WireType.Varint).int32(message.repeatedInt32[i]);
        /* repeated int32 packed_int32 = 536870003 [packed = true]; */
        if (message.packedInt32.length) {
            writer.tag(536870003, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packedInt32.length; i++)
                writer.int32(message.packedInt32[i]);
            writer.join();
        }
        /* optional protobuf_unittest.ForeignEnumLite optional_enum = 536870004; */
        if (message.optionalEnum !== undefined)
            writer.tag(536870004, WireType.Varint).int32(message.optionalEnum);
        /* optional string optional_string = 536870005; */
        if (message.optionalString !== undefined)
            writer.tag(536870005, WireType.LengthDelimited).string(message.optionalString);
        /* optional bytes optional_bytes = 536870006; */
        if (message.optionalBytes !== undefined)
            writer.tag(536870006, WireType.LengthDelimited).bytes(message.optionalBytes);
        /* optional protobuf_unittest.ForeignMessageLite optional_message = 536870007; */
        if (message.optionalMessage)
            ForeignMessageLite.internalBinaryWrite(message.optionalMessage, writer.tag(536870007, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> string_string_map = 536870010; */
        for (let k of globalThis.Object.keys(message.stringStringMap))
            writer.tag(536870010, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.stringStringMap[k]).join();
        /* uint32 oneof_uint32 = 536870011; */
        if (message.oneofField.oneofKind === "oneofUint32")
            writer.tag(536870011, WireType.Varint).uint32(message.oneofField.oneofUint32);
        /* protobuf_unittest.TestAllTypesLite oneof_test_all_types = 536870012; */
        if (message.oneofField.oneofKind === "oneofTestAllTypes")
            TestAllTypesLite.internalBinaryWrite(message.oneofField.oneofTestAllTypes, writer.tag(536870012, WireType.LengthDelimited).fork(), options).join();
        /* string oneof_string = 536870013; */
        if (message.oneofField.oneofKind === "oneofString")
            writer.tag(536870013, WireType.LengthDelimited).string(message.oneofField.oneofString);
        /* bytes oneof_bytes = 536870014; */
        if (message.oneofField.oneofKind === "oneofBytes")
            writer.tag(536870014, WireType.LengthDelimited).bytes(message.oneofField.oneofBytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestHugeFieldNumbersLite
 */
export const TestHugeFieldNumbersLite = new TestHugeFieldNumbersLite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestHugeFieldNumbersLite_OptionalGroup$Type extends MessageType<TestHugeFieldNumbersLite_OptionalGroup> {
    constructor() {
        super("protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup", [
            { no: 536870009, name: "group_a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestHugeFieldNumbersLite_OptionalGroup>): TestHugeFieldNumbersLite_OptionalGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestHugeFieldNumbersLite_OptionalGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestHugeFieldNumbersLite_OptionalGroup): TestHugeFieldNumbersLite_OptionalGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 group_a */ 536870009:
                    message.groupA = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestHugeFieldNumbersLite_OptionalGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 group_a = 536870009; */
        if (message.groupA !== undefined)
            writer.tag(536870009, WireType.Varint).int32(message.groupA);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup
 */
export const TestHugeFieldNumbersLite_OptionalGroup = new TestHugeFieldNumbersLite_OptionalGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestOneofParsingLite$Type extends MessageType<TestOneofParsingLite> {
    constructor() {
        super("protobuf_unittest.TestOneofParsingLite", [
            { no: 1, name: "oneof_int32", kind: "scalar", oneof: "oneofField", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "oneof_submessage", kind: "message", oneof: "oneofField", T: () => TestAllTypesLite },
            { no: 3, name: "oneof_string", kind: "scalar", oneof: "oneofField", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "oneof_bytes", kind: "scalar", oneof: "oneofField", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "oneof_string_cord", kind: "scalar", oneof: "oneofField", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "oneof_bytes_cord", kind: "scalar", oneof: "oneofField", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "oneof_string_string_piece", kind: "scalar", oneof: "oneofField", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "oneof_bytes_string_piece", kind: "scalar", oneof: "oneofField", T: 12 /*ScalarType.BYTES*/ },
            { no: 9, name: "oneof_enum", kind: "enum", oneof: "oneofField", T: () => ["protobuf_unittest.V2EnumLite", V2EnumLite] }
        ]);
    }
    create(value?: PartialMessage<TestOneofParsingLite>): TestOneofParsingLite {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.oneofField = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<TestOneofParsingLite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestOneofParsingLite): TestOneofParsingLite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 oneof_int32 */ 1:
                    message.oneofField = {
                        oneofKind: "oneofInt32",
                        oneofInt32: reader.int32()
                    };
                    break;
                case /* protobuf_unittest.TestAllTypesLite oneof_submessage */ 2:
                    message.oneofField = {
                        oneofKind: "oneofSubmessage",
                        oneofSubmessage: TestAllTypesLite.internalBinaryRead(reader, reader.uint32(), options, (message.oneofField as any).oneofSubmessage)
                    };
                    break;
                case /* string oneof_string */ 3:
                    message.oneofField = {
                        oneofKind: "oneofString",
                        oneofString: reader.string()
                    };
                    break;
                case /* bytes oneof_bytes */ 4:
                    message.oneofField = {
                        oneofKind: "oneofBytes",
                        oneofBytes: reader.bytes()
                    };
                    break;
                case /* string oneof_string_cord */ 5:
                    message.oneofField = {
                        oneofKind: "oneofStringCord",
                        oneofStringCord: reader.string()
                    };
                    break;
                case /* bytes oneof_bytes_cord */ 6:
                    message.oneofField = {
                        oneofKind: "oneofBytesCord",
                        oneofBytesCord: reader.bytes()
                    };
                    break;
                case /* string oneof_string_string_piece */ 7:
                    message.oneofField = {
                        oneofKind: "oneofStringStringPiece",
                        oneofStringStringPiece: reader.string()
                    };
                    break;
                case /* bytes oneof_bytes_string_piece */ 8:
                    message.oneofField = {
                        oneofKind: "oneofBytesStringPiece",
                        oneofBytesStringPiece: reader.bytes()
                    };
                    break;
                case /* protobuf_unittest.V2EnumLite oneof_enum */ 9:
                    message.oneofField = {
                        oneofKind: "oneofEnum",
                        oneofEnum: reader.int32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestOneofParsingLite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 oneof_int32 = 1; */
        if (message.oneofField.oneofKind === "oneofInt32")
            writer.tag(1, WireType.Varint).int32(message.oneofField.oneofInt32);
        /* protobuf_unittest.TestAllTypesLite oneof_submessage = 2; */
        if (message.oneofField.oneofKind === "oneofSubmessage")
            TestAllTypesLite.internalBinaryWrite(message.oneofField.oneofSubmessage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string oneof_string = 3; */
        if (message.oneofField.oneofKind === "oneofString")
            writer.tag(3, WireType.LengthDelimited).string(message.oneofField.oneofString);
        /* bytes oneof_bytes = 4; */
        if (message.oneofField.oneofKind === "oneofBytes")
            writer.tag(4, WireType.LengthDelimited).bytes(message.oneofField.oneofBytes);
        /* string oneof_string_cord = 5; */
        if (message.oneofField.oneofKind === "oneofStringCord")
            writer.tag(5, WireType.LengthDelimited).string(message.oneofField.oneofStringCord);
        /* bytes oneof_bytes_cord = 6; */
        if (message.oneofField.oneofKind === "oneofBytesCord")
            writer.tag(6, WireType.LengthDelimited).bytes(message.oneofField.oneofBytesCord);
        /* string oneof_string_string_piece = 7; */
        if (message.oneofField.oneofKind === "oneofStringStringPiece")
            writer.tag(7, WireType.LengthDelimited).string(message.oneofField.oneofStringStringPiece);
        /* bytes oneof_bytes_string_piece = 8; */
        if (message.oneofField.oneofKind === "oneofBytesStringPiece")
            writer.tag(8, WireType.LengthDelimited).bytes(message.oneofField.oneofBytesStringPiece);
        /* protobuf_unittest.V2EnumLite oneof_enum = 9; */
        if (message.oneofField.oneofKind === "oneofEnum")
            writer.tag(9, WireType.Varint).int32(message.oneofField.oneofEnum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestOneofParsingLite
 */
export const TestOneofParsingLite = new TestOneofParsingLite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PackedInt32$Type extends MessageType<PackedInt32> {
    constructor() {
        super("protobuf_unittest.PackedInt32", [
            { no: 2048, name: "repeated_int32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PackedInt32>): PackedInt32 {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.repeatedInt32 = [];
        if (value !== undefined)
            reflectionMergePartial<PackedInt32>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PackedInt32): PackedInt32 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 repeated_int32 = 2048 [packed = true];*/ 2048:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedInt32.push(reader.int32());
                    else
                        message.repeatedInt32.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PackedInt32, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 repeated_int32 = 2048 [packed = true]; */
        if (message.repeatedInt32.length) {
            writer.tag(2048, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedInt32.length; i++)
                writer.int32(message.repeatedInt32[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.PackedInt32
 */
export const PackedInt32 = new PackedInt32$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NonPackedInt32$Type extends MessageType<NonPackedInt32> {
    constructor() {
        super("protobuf_unittest.NonPackedInt32", [
            { no: 2048, name: "repeated_int32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<NonPackedInt32>): NonPackedInt32 {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.repeatedInt32 = [];
        if (value !== undefined)
            reflectionMergePartial<NonPackedInt32>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NonPackedInt32): NonPackedInt32 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 repeated_int32 */ 2048:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedInt32.push(reader.int32());
                    else
                        message.repeatedInt32.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NonPackedInt32, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 repeated_int32 = 2048; */
        for (let i = 0; i < message.repeatedInt32.length; i++)
            writer.tag(2048, WireType.Varint).int32(message.repeatedInt32[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.NonPackedInt32
 */
export const NonPackedInt32 = new NonPackedInt32$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PackedFixed32$Type extends MessageType<PackedFixed32> {
    constructor() {
        super("protobuf_unittest.PackedFixed32", [
            { no: 2048, name: "repeated_fixed32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 7 /*ScalarType.FIXED32*/ }
        ]);
    }
    create(value?: PartialMessage<PackedFixed32>): PackedFixed32 {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.repeatedFixed32 = [];
        if (value !== undefined)
            reflectionMergePartial<PackedFixed32>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PackedFixed32): PackedFixed32 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated fixed32 repeated_fixed32 = 2048 [packed = true];*/ 2048:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFixed32.push(reader.fixed32());
                    else
                        message.repeatedFixed32.push(reader.fixed32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PackedFixed32, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated fixed32 repeated_fixed32 = 2048 [packed = true]; */
        if (message.repeatedFixed32.length) {
            writer.tag(2048, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedFixed32.length; i++)
                writer.fixed32(message.repeatedFixed32[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.PackedFixed32
 */
export const PackedFixed32 = new PackedFixed32$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NonPackedFixed32$Type extends MessageType<NonPackedFixed32> {
    constructor() {
        super("protobuf_unittest.NonPackedFixed32", [
            { no: 2048, name: "repeated_fixed32", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 7 /*ScalarType.FIXED32*/ }
        ]);
    }
    create(value?: PartialMessage<NonPackedFixed32>): NonPackedFixed32 {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.repeatedFixed32 = [];
        if (value !== undefined)
            reflectionMergePartial<NonPackedFixed32>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NonPackedFixed32): NonPackedFixed32 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated fixed32 repeated_fixed32 */ 2048:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFixed32.push(reader.fixed32());
                    else
                        message.repeatedFixed32.push(reader.fixed32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NonPackedFixed32, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated fixed32 repeated_fixed32 = 2048; */
        for (let i = 0; i < message.repeatedFixed32.length; i++)
            writer.tag(2048, WireType.Bit32).fixed32(message.repeatedFixed32[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.NonPackedFixed32
 */
export const NonPackedFixed32 = new NonPackedFixed32$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DupEnum$Type extends MessageType<DupEnum> {
    constructor() {
        super("protobuf_unittest.DupEnum", []);
    }
    create(value?: PartialMessage<DupEnum>): DupEnum {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DupEnum>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DupEnum): DupEnum {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DupEnum, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.DupEnum
 */
export const DupEnum = new DupEnum$Type();
