// @generated by protobuf-ts 2.9.5 with parameter force_optimize_speed,long_type_string
// @generated from protobuf file "google/protobuf/util/json_format.proto" (package "protobuf_unittest", syntax proto2)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//
// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// A proto file we will use for unit testing.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message protobuf_unittest.TestFlagsAndStrings
 */
export interface TestFlagsAndStrings {
    /**
     * @generated from protobuf field: int32 A = 1 [json_name = "A"];
     */
    a: number;
}
/**
 * @generated from protobuf message protobuf_unittest.TestFlagsAndStrings.RepeatedGroup
 */
export interface TestFlagsAndStrings_RepeatedGroup {
    /**
     * @generated from protobuf field: string f = 3;
     */
    f: string;
}
/**
 * @generated from protobuf message protobuf_unittest.TestBase64ByteArrays
 */
export interface TestBase64ByteArrays {
    /**
     * @generated from protobuf field: bytes a = 1;
     */
    a: Uint8Array;
}
/**
 * @generated from protobuf message protobuf_unittest.TestJavaScriptJSON
 */
export interface TestJavaScriptJSON {
    /**
     * @generated from protobuf field: optional int32 a = 1;
     */
    a?: number;
    /**
     * @generated from protobuf field: optional float final = 2;
     */
    final?: number;
    /**
     * @generated from protobuf field: optional string in = 3;
     */
    in?: string;
    /**
     * @generated from protobuf field: optional string Var = 4 [json_name = "Var"];
     */
    var?: string;
}
/**
 * @generated from protobuf message protobuf_unittest.TestJavaScriptOrderJSON1
 */
export interface TestJavaScriptOrderJSON1 {
    /**
     * @generated from protobuf field: optional int32 d = 1;
     */
    d?: number;
    /**
     * @generated from protobuf field: optional int32 c = 2;
     */
    c?: number;
    /**
     * @generated from protobuf field: optional bool x = 3;
     */
    x?: boolean;
    /**
     * @generated from protobuf field: optional int32 b = 4;
     */
    b?: number;
    /**
     * @generated from protobuf field: optional int32 a = 5;
     */
    a?: number;
}
/**
 * @generated from protobuf message protobuf_unittest.TestJavaScriptOrderJSON2
 */
export interface TestJavaScriptOrderJSON2 {
    /**
     * @generated from protobuf field: optional int32 d = 1;
     */
    d?: number;
    /**
     * @generated from protobuf field: optional int32 c = 2;
     */
    c?: number;
    /**
     * @generated from protobuf field: optional bool x = 3;
     */
    x?: boolean;
    /**
     * @generated from protobuf field: optional int32 b = 4;
     */
    b?: number;
    /**
     * @generated from protobuf field: optional int32 a = 5;
     */
    a?: number;
    /**
     * @generated from protobuf field: repeated protobuf_unittest.TestJavaScriptOrderJSON1 z = 6;
     */
    z: TestJavaScriptOrderJSON1[];
}
/**
 * @generated from protobuf message protobuf_unittest.TestLargeInt
 */
export interface TestLargeInt {
    /**
     * @generated from protobuf field: int64 a = 1;
     */
    a: string;
    /**
     * @generated from protobuf field: uint64 b = 2;
     */
    b: string;
}
/**
 * @generated from protobuf message protobuf_unittest.TestNumbers
 */
export interface TestNumbers {
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestNumbers.MyType a = 1;
     */
    a?: TestNumbers_MyType;
    /**
     * @generated from protobuf field: optional int32 b = 2;
     */
    b?: number;
    /**
     * @generated from protobuf field: optional float c = 3;
     */
    c?: number;
    /**
     * @generated from protobuf field: optional bool d = 4;
     */
    d?: boolean;
    /**
     * @generated from protobuf field: optional double e = 5;
     */
    e?: number;
    /**
     * @generated from protobuf field: optional uint32 f = 6;
     */
    f?: number;
}
/**
 * @generated from protobuf enum protobuf_unittest.TestNumbers.MyType
 */
export enum TestNumbers_MyType {
    /**
     * @generated from protobuf enum value: OK = 0;
     */
    OK = 0,
    /**
     * @generated from protobuf enum value: WARNING = 1;
     */
    WARNING = 1,
    /**
     * @generated from protobuf enum value: ERROR = 2;
     */
    ERROR = 2
}
/**
 * @generated from protobuf message protobuf_unittest.TestCamelCase
 */
export interface TestCamelCase {
    /**
     * @generated from protobuf field: optional string normal_field = 1;
     */
    normalField?: string;
    /**
     * @generated from protobuf field: optional int32 CAPITAL_FIELD = 2 [json_name = "CAPITALFIELD"];
     */
    cAPITALFIELD?: number;
    /**
     * @generated from protobuf field: optional int32 CamelCaseField = 3 [json_name = "CamelCaseField"];
     */
    camelCaseField?: number;
}
/**
 * @generated from protobuf message protobuf_unittest.TestBoolMap
 */
export interface TestBoolMap {
    /**
     * @generated from protobuf field: map<bool, int32> bool_map = 1;
     */
    boolMap: {
        [key: string]: number;
    };
}
/**
 * @generated from protobuf message protobuf_unittest.TestRecursion
 */
export interface TestRecursion {
    /**
     * @generated from protobuf field: optional int32 value = 1;
     */
    value?: number;
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestRecursion child = 2;
     */
    child?: TestRecursion;
}
/**
 * @generated from protobuf message protobuf_unittest.TestStringMap
 */
export interface TestStringMap {
    /**
     * @generated from protobuf field: map<string, string> string_map = 1;
     */
    stringMap: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message protobuf_unittest.TestStringSerializer
 */
export interface TestStringSerializer {
    /**
     * @generated from protobuf field: optional string scalar_string = 1;
     */
    scalarString?: string;
    /**
     * @generated from protobuf field: repeated string repeated_string = 2;
     */
    repeatedString: string[];
    /**
     * @generated from protobuf field: map<string, string> string_map = 3;
     */
    stringMap: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message protobuf_unittest.TestMessageWithExtension
 */
export interface TestMessageWithExtension {
}
/**
 * @generated from protobuf message protobuf_unittest.TestExtension
 */
export interface TestExtension {
    /**
     * @generated from protobuf field: optional string value = 1;
     */
    value?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class TestFlagsAndStrings$Type extends MessageType<TestFlagsAndStrings> {
    constructor() {
        super("protobuf_unittest.TestFlagsAndStrings", [
            { no: 1, name: "A", kind: "scalar", jsonName: "A", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestFlagsAndStrings>): TestFlagsAndStrings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.a = 0;
        if (value !== undefined)
            reflectionMergePartial<TestFlagsAndStrings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestFlagsAndStrings): TestFlagsAndStrings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 A = 1 [json_name = "A"];*/ 1:
                    message.a = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestFlagsAndStrings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 A = 1 [json_name = "A"]; */
        if (message.a !== 0)
            writer.tag(1, WireType.Varint).int32(message.a);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestFlagsAndStrings
 */
export const TestFlagsAndStrings = new TestFlagsAndStrings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestFlagsAndStrings_RepeatedGroup$Type extends MessageType<TestFlagsAndStrings_RepeatedGroup> {
    constructor() {
        super("protobuf_unittest.TestFlagsAndStrings.RepeatedGroup", [
            { no: 3, name: "f", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TestFlagsAndStrings_RepeatedGroup>): TestFlagsAndStrings_RepeatedGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.f = "";
        if (value !== undefined)
            reflectionMergePartial<TestFlagsAndStrings_RepeatedGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestFlagsAndStrings_RepeatedGroup): TestFlagsAndStrings_RepeatedGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string f */ 3:
                    message.f = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestFlagsAndStrings_RepeatedGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string f = 3; */
        if (message.f !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.f);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestFlagsAndStrings.RepeatedGroup
 */
export const TestFlagsAndStrings_RepeatedGroup = new TestFlagsAndStrings_RepeatedGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestBase64ByteArrays$Type extends MessageType<TestBase64ByteArrays> {
    constructor() {
        super("protobuf_unittest.TestBase64ByteArrays", [
            { no: 1, name: "a", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<TestBase64ByteArrays>): TestBase64ByteArrays {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.a = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<TestBase64ByteArrays>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestBase64ByteArrays): TestBase64ByteArrays {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes a */ 1:
                    message.a = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestBase64ByteArrays, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes a = 1; */
        if (message.a.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.a);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestBase64ByteArrays
 */
export const TestBase64ByteArrays = new TestBase64ByteArrays$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestJavaScriptJSON$Type extends MessageType<TestJavaScriptJSON> {
    constructor() {
        super("protobuf_unittest.TestJavaScriptJSON", [
            { no: 1, name: "a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "final", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "in", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Var", kind: "scalar", jsonName: "Var", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TestJavaScriptJSON>): TestJavaScriptJSON {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestJavaScriptJSON>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestJavaScriptJSON): TestJavaScriptJSON {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 a */ 1:
                    message.a = reader.int32();
                    break;
                case /* optional float final */ 2:
                    message.final = reader.float();
                    break;
                case /* optional string in */ 3:
                    message.in = reader.string();
                    break;
                case /* optional string Var = 4 [json_name = "Var"];*/ 4:
                    message.var = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestJavaScriptJSON, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 a = 1; */
        if (message.a !== undefined)
            writer.tag(1, WireType.Varint).int32(message.a);
        /* optional float final = 2; */
        if (message.final !== undefined)
            writer.tag(2, WireType.Bit32).float(message.final);
        /* optional string in = 3; */
        if (message.in !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.in);
        /* optional string Var = 4 [json_name = "Var"]; */
        if (message.var !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.var);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestJavaScriptJSON
 */
export const TestJavaScriptJSON = new TestJavaScriptJSON$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestJavaScriptOrderJSON1$Type extends MessageType<TestJavaScriptOrderJSON1> {
    constructor() {
        super("protobuf_unittest.TestJavaScriptOrderJSON1", [
            { no: 1, name: "d", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "c", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "x", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "b", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestJavaScriptOrderJSON1>): TestJavaScriptOrderJSON1 {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestJavaScriptOrderJSON1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestJavaScriptOrderJSON1): TestJavaScriptOrderJSON1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 d */ 1:
                    message.d = reader.int32();
                    break;
                case /* optional int32 c */ 2:
                    message.c = reader.int32();
                    break;
                case /* optional bool x */ 3:
                    message.x = reader.bool();
                    break;
                case /* optional int32 b */ 4:
                    message.b = reader.int32();
                    break;
                case /* optional int32 a */ 5:
                    message.a = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestJavaScriptOrderJSON1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 d = 1; */
        if (message.d !== undefined)
            writer.tag(1, WireType.Varint).int32(message.d);
        /* optional int32 c = 2; */
        if (message.c !== undefined)
            writer.tag(2, WireType.Varint).int32(message.c);
        /* optional bool x = 3; */
        if (message.x !== undefined)
            writer.tag(3, WireType.Varint).bool(message.x);
        /* optional int32 b = 4; */
        if (message.b !== undefined)
            writer.tag(4, WireType.Varint).int32(message.b);
        /* optional int32 a = 5; */
        if (message.a !== undefined)
            writer.tag(5, WireType.Varint).int32(message.a);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestJavaScriptOrderJSON1
 */
export const TestJavaScriptOrderJSON1 = new TestJavaScriptOrderJSON1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestJavaScriptOrderJSON2$Type extends MessageType<TestJavaScriptOrderJSON2> {
    constructor() {
        super("protobuf_unittest.TestJavaScriptOrderJSON2", [
            { no: 1, name: "d", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "c", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "x", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "b", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "z", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestJavaScriptOrderJSON1 }
        ]);
    }
    create(value?: PartialMessage<TestJavaScriptOrderJSON2>): TestJavaScriptOrderJSON2 {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.z = [];
        if (value !== undefined)
            reflectionMergePartial<TestJavaScriptOrderJSON2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestJavaScriptOrderJSON2): TestJavaScriptOrderJSON2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 d */ 1:
                    message.d = reader.int32();
                    break;
                case /* optional int32 c */ 2:
                    message.c = reader.int32();
                    break;
                case /* optional bool x */ 3:
                    message.x = reader.bool();
                    break;
                case /* optional int32 b */ 4:
                    message.b = reader.int32();
                    break;
                case /* optional int32 a */ 5:
                    message.a = reader.int32();
                    break;
                case /* repeated protobuf_unittest.TestJavaScriptOrderJSON1 z */ 6:
                    message.z.push(TestJavaScriptOrderJSON1.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestJavaScriptOrderJSON2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 d = 1; */
        if (message.d !== undefined)
            writer.tag(1, WireType.Varint).int32(message.d);
        /* optional int32 c = 2; */
        if (message.c !== undefined)
            writer.tag(2, WireType.Varint).int32(message.c);
        /* optional bool x = 3; */
        if (message.x !== undefined)
            writer.tag(3, WireType.Varint).bool(message.x);
        /* optional int32 b = 4; */
        if (message.b !== undefined)
            writer.tag(4, WireType.Varint).int32(message.b);
        /* optional int32 a = 5; */
        if (message.a !== undefined)
            writer.tag(5, WireType.Varint).int32(message.a);
        /* repeated protobuf_unittest.TestJavaScriptOrderJSON1 z = 6; */
        for (let i = 0; i < message.z.length; i++)
            TestJavaScriptOrderJSON1.internalBinaryWrite(message.z[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestJavaScriptOrderJSON2
 */
export const TestJavaScriptOrderJSON2 = new TestJavaScriptOrderJSON2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestLargeInt$Type extends MessageType<TestLargeInt> {
    constructor() {
        super("protobuf_unittest.TestLargeInt", [
            { no: 1, name: "a", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "b", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<TestLargeInt>): TestLargeInt {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.a = "0";
        message.b = "0";
        if (value !== undefined)
            reflectionMergePartial<TestLargeInt>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestLargeInt): TestLargeInt {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 a */ 1:
                    message.a = reader.int64().toString();
                    break;
                case /* uint64 b */ 2:
                    message.b = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestLargeInt, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 a = 1; */
        if (message.a !== "0")
            writer.tag(1, WireType.Varint).int64(message.a);
        /* uint64 b = 2; */
        if (message.b !== "0")
            writer.tag(2, WireType.Varint).uint64(message.b);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestLargeInt
 */
export const TestLargeInt = new TestLargeInt$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestNumbers$Type extends MessageType<TestNumbers> {
    constructor() {
        super("protobuf_unittest.TestNumbers", [
            { no: 1, name: "a", kind: "enum", opt: true, T: () => ["protobuf_unittest.TestNumbers.MyType", TestNumbers_MyType] },
            { no: 2, name: "b", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "c", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "d", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "e", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "f", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestNumbers>): TestNumbers {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestNumbers>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestNumbers): TestNumbers {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional protobuf_unittest.TestNumbers.MyType a */ 1:
                    message.a = reader.int32();
                    break;
                case /* optional int32 b */ 2:
                    message.b = reader.int32();
                    break;
                case /* optional float c */ 3:
                    message.c = reader.float();
                    break;
                case /* optional bool d */ 4:
                    message.d = reader.bool();
                    break;
                case /* optional double e */ 5:
                    message.e = reader.double();
                    break;
                case /* optional uint32 f */ 6:
                    message.f = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestNumbers, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional protobuf_unittest.TestNumbers.MyType a = 1; */
        if (message.a !== undefined)
            writer.tag(1, WireType.Varint).int32(message.a);
        /* optional int32 b = 2; */
        if (message.b !== undefined)
            writer.tag(2, WireType.Varint).int32(message.b);
        /* optional float c = 3; */
        if (message.c !== undefined)
            writer.tag(3, WireType.Bit32).float(message.c);
        /* optional bool d = 4; */
        if (message.d !== undefined)
            writer.tag(4, WireType.Varint).bool(message.d);
        /* optional double e = 5; */
        if (message.e !== undefined)
            writer.tag(5, WireType.Bit64).double(message.e);
        /* optional uint32 f = 6; */
        if (message.f !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.f);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestNumbers
 */
export const TestNumbers = new TestNumbers$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestCamelCase$Type extends MessageType<TestCamelCase> {
    constructor() {
        super("protobuf_unittest.TestCamelCase", [
            { no: 1, name: "normal_field", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "CAPITAL_FIELD", kind: "scalar", jsonName: "CAPITALFIELD", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "CamelCaseField", kind: "scalar", jsonName: "CamelCaseField", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestCamelCase>): TestCamelCase {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestCamelCase>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestCamelCase): TestCamelCase {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string normal_field */ 1:
                    message.normalField = reader.string();
                    break;
                case /* optional int32 CAPITAL_FIELD = 2 [json_name = "CAPITALFIELD"];*/ 2:
                    message.cAPITALFIELD = reader.int32();
                    break;
                case /* optional int32 CamelCaseField = 3 [json_name = "CamelCaseField"];*/ 3:
                    message.camelCaseField = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestCamelCase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string normal_field = 1; */
        if (message.normalField !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.normalField);
        /* optional int32 CAPITAL_FIELD = 2 [json_name = "CAPITALFIELD"]; */
        if (message.cAPITALFIELD !== undefined)
            writer.tag(2, WireType.Varint).int32(message.cAPITALFIELD);
        /* optional int32 CamelCaseField = 3 [json_name = "CamelCaseField"]; */
        if (message.camelCaseField !== undefined)
            writer.tag(3, WireType.Varint).int32(message.camelCaseField);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestCamelCase
 */
export const TestCamelCase = new TestCamelCase$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestBoolMap$Type extends MessageType<TestBoolMap> {
    constructor() {
        super("protobuf_unittest.TestBoolMap", [
            { no: 1, name: "bool_map", kind: "map", K: 8 /*ScalarType.BOOL*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } }
        ]);
    }
    create(value?: PartialMessage<TestBoolMap>): TestBoolMap {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.boolMap = {};
        if (value !== undefined)
            reflectionMergePartial<TestBoolMap>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestBoolMap): TestBoolMap {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<bool, int32> bool_map */ 1:
                    this.binaryReadMap1(message.boolMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: TestBoolMap["boolMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestBoolMap["boolMap"] | undefined, val: TestBoolMap["boolMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.bool().toString();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_unittest.TestBoolMap.bool_map");
            }
        }
        map[key ?? "false"] = val ?? 0;
    }
    internalBinaryWrite(message: TestBoolMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<bool, int32> bool_map = 1; */
        for (let k of globalThis.Object.keys(message.boolMap))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.Varint).bool(k === "true").tag(2, WireType.Varint).int32(message.boolMap[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestBoolMap
 */
export const TestBoolMap = new TestBoolMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestRecursion$Type extends MessageType<TestRecursion> {
    constructor() {
        super("protobuf_unittest.TestRecursion", [
            { no: 1, name: "value", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "child", kind: "message", T: () => TestRecursion }
        ]);
    }
    create(value?: PartialMessage<TestRecursion>): TestRecursion {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestRecursion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestRecursion): TestRecursion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 value */ 1:
                    message.value = reader.int32();
                    break;
                case /* optional protobuf_unittest.TestRecursion child */ 2:
                    message.child = TestRecursion.internalBinaryRead(reader, reader.uint32(), options, message.child);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestRecursion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 value = 1; */
        if (message.value !== undefined)
            writer.tag(1, WireType.Varint).int32(message.value);
        /* optional protobuf_unittest.TestRecursion child = 2; */
        if (message.child)
            TestRecursion.internalBinaryWrite(message.child, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestRecursion
 */
export const TestRecursion = new TestRecursion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestStringMap$Type extends MessageType<TestStringMap> {
    constructor() {
        super("protobuf_unittest.TestStringMap", [
            { no: 1, name: "string_map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<TestStringMap>): TestStringMap {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stringMap = {};
        if (value !== undefined)
            reflectionMergePartial<TestStringMap>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestStringMap): TestStringMap {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> string_map */ 1:
                    this.binaryReadMap1(message.stringMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: TestStringMap["stringMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestStringMap["stringMap"] | undefined, val: TestStringMap["stringMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_unittest.TestStringMap.string_map");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: TestStringMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> string_map = 1; */
        for (let k of globalThis.Object.keys(message.stringMap))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.stringMap[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestStringMap
 */
export const TestStringMap = new TestStringMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestStringSerializer$Type extends MessageType<TestStringSerializer> {
    constructor() {
        super("protobuf_unittest.TestStringSerializer", [
            { no: 1, name: "scalar_string", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "repeated_string", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "string_map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<TestStringSerializer>): TestStringSerializer {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.repeatedString = [];
        message.stringMap = {};
        if (value !== undefined)
            reflectionMergePartial<TestStringSerializer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestStringSerializer): TestStringSerializer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string scalar_string */ 1:
                    message.scalarString = reader.string();
                    break;
                case /* repeated string repeated_string */ 2:
                    message.repeatedString.push(reader.string());
                    break;
                case /* map<string, string> string_map */ 3:
                    this.binaryReadMap3(message.stringMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: TestStringSerializer["stringMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestStringSerializer["stringMap"] | undefined, val: TestStringSerializer["stringMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protobuf_unittest.TestStringSerializer.string_map");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: TestStringSerializer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string scalar_string = 1; */
        if (message.scalarString !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.scalarString);
        /* repeated string repeated_string = 2; */
        for (let i = 0; i < message.repeatedString.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.repeatedString[i]);
        /* map<string, string> string_map = 3; */
        for (let k of globalThis.Object.keys(message.stringMap))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.stringMap[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestStringSerializer
 */
export const TestStringSerializer = new TestStringSerializer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestMessageWithExtension$Type extends MessageType<TestMessageWithExtension> {
    constructor() {
        super("protobuf_unittest.TestMessageWithExtension", []);
    }
    create(value?: PartialMessage<TestMessageWithExtension>): TestMessageWithExtension {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestMessageWithExtension>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestMessageWithExtension): TestMessageWithExtension {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestMessageWithExtension, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestMessageWithExtension
 */
export const TestMessageWithExtension = new TestMessageWithExtension$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestExtension$Type extends MessageType<TestExtension> {
    constructor() {
        super("protobuf_unittest.TestExtension", [
            { no: 1, name: "value", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TestExtension>): TestExtension {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestExtension>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestExtension): TestExtension {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string value */ 1:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestExtension, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string value = 1; */
        if (message.value !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestExtension
 */
export const TestExtension = new TestExtension$Type();
