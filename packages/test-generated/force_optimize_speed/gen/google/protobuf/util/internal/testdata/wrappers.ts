// @generated by protobuf-ts 2.9.5 with parameter force_optimize_speed,long_type_string
// @generated from protobuf file "google/protobuf/util/internal/testdata/wrappers.proto" (package "proto_util_converter.testing", syntax proto3)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BytesValue } from "../../../wrappers";
import { StringValue } from "../../../wrappers";
import { BoolValue } from "../../../wrappers";
import { UInt32Value } from "../../../wrappers";
import { Int32Value } from "../../../wrappers";
import { UInt64Value } from "../../../wrappers";
import { Int64Value } from "../../../wrappers";
import { FloatValue } from "../../../wrappers";
import { DoubleValue } from "../../../wrappers";
/**
 * Top-level test cases proto used by MarshallingTest. See description
 * at the top of the class MarshallingTest for details on how to write
 * test cases.
 *
 * @generated from protobuf message proto_util_converter.testing.WrappersTestCases
 */
export interface WrappersTestCases {
    /**
     * @generated from protobuf field: proto_util_converter.testing.DoubleWrapper double_wrapper = 1;
     */
    doubleWrapper?: DoubleWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FloatWrapper float_wrapper = 2;
     */
    floatWrapper?: FloatWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.Int64Wrapper int64_wrapper = 3;
     */
    int64Wrapper?: Int64Wrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.UInt64Wrapper uint64_wrapper = 4;
     */
    uint64Wrapper?: UInt64Wrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.Int32Wrapper int32_wrapper = 5;
     */
    int32Wrapper?: Int32Wrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.UInt32Wrapper uint32_wrapper = 6;
     */
    uint32Wrapper?: UInt32Wrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.BoolWrapper bool_wrapper = 7;
     */
    boolWrapper?: BoolWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StringWrapper string_wrapper = 8;
     */
    stringWrapper?: StringWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.BytesWrapper bytes_wrapper = 9;
     */
    bytesWrapper?: BytesWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.DoubleWrapper double_wrapper_default = 10;
     */
    doubleWrapperDefault?: DoubleWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FloatWrapper float_wrapper_default = 11;
     */
    floatWrapperDefault?: FloatWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.Int64Wrapper int64_wrapper_default = 12;
     */
    int64WrapperDefault?: Int64Wrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.UInt64Wrapper uint64_wrapper_default = 13;
     */
    uint64WrapperDefault?: UInt64Wrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.Int32Wrapper int32_wrapper_default = 14;
     */
    int32WrapperDefault?: Int32Wrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.UInt32Wrapper uint32_wrapper_default = 15;
     */
    uint32WrapperDefault?: UInt32Wrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.BoolWrapper bool_wrapper_default = 16;
     */
    boolWrapperDefault?: BoolWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StringWrapper string_wrapper_default = 17;
     */
    stringWrapperDefault?: StringWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.BytesWrapper bytes_wrapper_default = 18;
     */
    bytesWrapperDefault?: BytesWrapper;
}
/**
 * @generated from protobuf message proto_util_converter.testing.DoubleWrapper
 */
export interface DoubleWrapper {
    /**
     * @generated from protobuf field: google.protobuf.DoubleValue double = 1;
     */
    double?: DoubleValue;
}
/**
 * @generated from protobuf message proto_util_converter.testing.FloatWrapper
 */
export interface FloatWrapper {
    /**
     * @generated from protobuf field: google.protobuf.FloatValue float = 1;
     */
    float?: FloatValue;
}
/**
 * @generated from protobuf message proto_util_converter.testing.Int64Wrapper
 */
export interface Int64Wrapper {
    /**
     * @generated from protobuf field: google.protobuf.Int64Value int64 = 1;
     */
    int64?: Int64Value;
}
/**
 * @generated from protobuf message proto_util_converter.testing.UInt64Wrapper
 */
export interface UInt64Wrapper {
    /**
     * @generated from protobuf field: google.protobuf.UInt64Value uint64 = 1;
     */
    uint64?: UInt64Value;
}
/**
 * @generated from protobuf message proto_util_converter.testing.Int32Wrapper
 */
export interface Int32Wrapper {
    /**
     * @generated from protobuf field: google.protobuf.Int32Value int32 = 1;
     */
    int32?: Int32Value;
}
/**
 * @generated from protobuf message proto_util_converter.testing.UInt32Wrapper
 */
export interface UInt32Wrapper {
    /**
     * @generated from protobuf field: google.protobuf.UInt32Value uint32 = 1;
     */
    uint32?: UInt32Value;
}
/**
 * @generated from protobuf message proto_util_converter.testing.BoolWrapper
 */
export interface BoolWrapper {
    /**
     * @generated from protobuf field: google.protobuf.BoolValue bool = 1;
     */
    bool?: BoolValue;
}
/**
 * @generated from protobuf message proto_util_converter.testing.StringWrapper
 */
export interface StringWrapper {
    /**
     * @generated from protobuf field: google.protobuf.StringValue string = 1;
     */
    string?: StringValue;
}
/**
 * @generated from protobuf message proto_util_converter.testing.BytesWrapper
 */
export interface BytesWrapper {
    /**
     * @generated from protobuf field: google.protobuf.BytesValue bytes = 1;
     */
    bytes?: BytesValue;
}
// @generated message type with reflection information, may provide speed optimized methods
class WrappersTestCases$Type extends MessageType<WrappersTestCases> {
    constructor() {
        super("proto_util_converter.testing.WrappersTestCases", [
            { no: 1, name: "double_wrapper", kind: "message", T: () => DoubleWrapper },
            { no: 2, name: "float_wrapper", kind: "message", T: () => FloatWrapper },
            { no: 3, name: "int64_wrapper", kind: "message", T: () => Int64Wrapper },
            { no: 4, name: "uint64_wrapper", kind: "message", T: () => UInt64Wrapper },
            { no: 5, name: "int32_wrapper", kind: "message", T: () => Int32Wrapper },
            { no: 6, name: "uint32_wrapper", kind: "message", T: () => UInt32Wrapper },
            { no: 7, name: "bool_wrapper", kind: "message", T: () => BoolWrapper },
            { no: 8, name: "string_wrapper", kind: "message", T: () => StringWrapper },
            { no: 9, name: "bytes_wrapper", kind: "message", T: () => BytesWrapper },
            { no: 10, name: "double_wrapper_default", kind: "message", T: () => DoubleWrapper },
            { no: 11, name: "float_wrapper_default", kind: "message", T: () => FloatWrapper },
            { no: 12, name: "int64_wrapper_default", kind: "message", T: () => Int64Wrapper },
            { no: 13, name: "uint64_wrapper_default", kind: "message", T: () => UInt64Wrapper },
            { no: 14, name: "int32_wrapper_default", kind: "message", T: () => Int32Wrapper },
            { no: 15, name: "uint32_wrapper_default", kind: "message", T: () => UInt32Wrapper },
            { no: 16, name: "bool_wrapper_default", kind: "message", T: () => BoolWrapper },
            { no: 17, name: "string_wrapper_default", kind: "message", T: () => StringWrapper },
            { no: 18, name: "bytes_wrapper_default", kind: "message", T: () => BytesWrapper }
        ]);
    }
    create(value?: PartialMessage<WrappersTestCases>): WrappersTestCases {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<WrappersTestCases>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WrappersTestCases): WrappersTestCases {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto_util_converter.testing.DoubleWrapper double_wrapper */ 1:
                    message.doubleWrapper = DoubleWrapper.internalBinaryRead(reader, reader.uint32(), options, message.doubleWrapper);
                    break;
                case /* proto_util_converter.testing.FloatWrapper float_wrapper */ 2:
                    message.floatWrapper = FloatWrapper.internalBinaryRead(reader, reader.uint32(), options, message.floatWrapper);
                    break;
                case /* proto_util_converter.testing.Int64Wrapper int64_wrapper */ 3:
                    message.int64Wrapper = Int64Wrapper.internalBinaryRead(reader, reader.uint32(), options, message.int64Wrapper);
                    break;
                case /* proto_util_converter.testing.UInt64Wrapper uint64_wrapper */ 4:
                    message.uint64Wrapper = UInt64Wrapper.internalBinaryRead(reader, reader.uint32(), options, message.uint64Wrapper);
                    break;
                case /* proto_util_converter.testing.Int32Wrapper int32_wrapper */ 5:
                    message.int32Wrapper = Int32Wrapper.internalBinaryRead(reader, reader.uint32(), options, message.int32Wrapper);
                    break;
                case /* proto_util_converter.testing.UInt32Wrapper uint32_wrapper */ 6:
                    message.uint32Wrapper = UInt32Wrapper.internalBinaryRead(reader, reader.uint32(), options, message.uint32Wrapper);
                    break;
                case /* proto_util_converter.testing.BoolWrapper bool_wrapper */ 7:
                    message.boolWrapper = BoolWrapper.internalBinaryRead(reader, reader.uint32(), options, message.boolWrapper);
                    break;
                case /* proto_util_converter.testing.StringWrapper string_wrapper */ 8:
                    message.stringWrapper = StringWrapper.internalBinaryRead(reader, reader.uint32(), options, message.stringWrapper);
                    break;
                case /* proto_util_converter.testing.BytesWrapper bytes_wrapper */ 9:
                    message.bytesWrapper = BytesWrapper.internalBinaryRead(reader, reader.uint32(), options, message.bytesWrapper);
                    break;
                case /* proto_util_converter.testing.DoubleWrapper double_wrapper_default */ 10:
                    message.doubleWrapperDefault = DoubleWrapper.internalBinaryRead(reader, reader.uint32(), options, message.doubleWrapperDefault);
                    break;
                case /* proto_util_converter.testing.FloatWrapper float_wrapper_default */ 11:
                    message.floatWrapperDefault = FloatWrapper.internalBinaryRead(reader, reader.uint32(), options, message.floatWrapperDefault);
                    break;
                case /* proto_util_converter.testing.Int64Wrapper int64_wrapper_default */ 12:
                    message.int64WrapperDefault = Int64Wrapper.internalBinaryRead(reader, reader.uint32(), options, message.int64WrapperDefault);
                    break;
                case /* proto_util_converter.testing.UInt64Wrapper uint64_wrapper_default */ 13:
                    message.uint64WrapperDefault = UInt64Wrapper.internalBinaryRead(reader, reader.uint32(), options, message.uint64WrapperDefault);
                    break;
                case /* proto_util_converter.testing.Int32Wrapper int32_wrapper_default */ 14:
                    message.int32WrapperDefault = Int32Wrapper.internalBinaryRead(reader, reader.uint32(), options, message.int32WrapperDefault);
                    break;
                case /* proto_util_converter.testing.UInt32Wrapper uint32_wrapper_default */ 15:
                    message.uint32WrapperDefault = UInt32Wrapper.internalBinaryRead(reader, reader.uint32(), options, message.uint32WrapperDefault);
                    break;
                case /* proto_util_converter.testing.BoolWrapper bool_wrapper_default */ 16:
                    message.boolWrapperDefault = BoolWrapper.internalBinaryRead(reader, reader.uint32(), options, message.boolWrapperDefault);
                    break;
                case /* proto_util_converter.testing.StringWrapper string_wrapper_default */ 17:
                    message.stringWrapperDefault = StringWrapper.internalBinaryRead(reader, reader.uint32(), options, message.stringWrapperDefault);
                    break;
                case /* proto_util_converter.testing.BytesWrapper bytes_wrapper_default */ 18:
                    message.bytesWrapperDefault = BytesWrapper.internalBinaryRead(reader, reader.uint32(), options, message.bytesWrapperDefault);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WrappersTestCases, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto_util_converter.testing.DoubleWrapper double_wrapper = 1; */
        if (message.doubleWrapper)
            DoubleWrapper.internalBinaryWrite(message.doubleWrapper, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.FloatWrapper float_wrapper = 2; */
        if (message.floatWrapper)
            FloatWrapper.internalBinaryWrite(message.floatWrapper, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.Int64Wrapper int64_wrapper = 3; */
        if (message.int64Wrapper)
            Int64Wrapper.internalBinaryWrite(message.int64Wrapper, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.UInt64Wrapper uint64_wrapper = 4; */
        if (message.uint64Wrapper)
            UInt64Wrapper.internalBinaryWrite(message.uint64Wrapper, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.Int32Wrapper int32_wrapper = 5; */
        if (message.int32Wrapper)
            Int32Wrapper.internalBinaryWrite(message.int32Wrapper, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.UInt32Wrapper uint32_wrapper = 6; */
        if (message.uint32Wrapper)
            UInt32Wrapper.internalBinaryWrite(message.uint32Wrapper, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.BoolWrapper bool_wrapper = 7; */
        if (message.boolWrapper)
            BoolWrapper.internalBinaryWrite(message.boolWrapper, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.StringWrapper string_wrapper = 8; */
        if (message.stringWrapper)
            StringWrapper.internalBinaryWrite(message.stringWrapper, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.BytesWrapper bytes_wrapper = 9; */
        if (message.bytesWrapper)
            BytesWrapper.internalBinaryWrite(message.bytesWrapper, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.DoubleWrapper double_wrapper_default = 10; */
        if (message.doubleWrapperDefault)
            DoubleWrapper.internalBinaryWrite(message.doubleWrapperDefault, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.FloatWrapper float_wrapper_default = 11; */
        if (message.floatWrapperDefault)
            FloatWrapper.internalBinaryWrite(message.floatWrapperDefault, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.Int64Wrapper int64_wrapper_default = 12; */
        if (message.int64WrapperDefault)
            Int64Wrapper.internalBinaryWrite(message.int64WrapperDefault, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.UInt64Wrapper uint64_wrapper_default = 13; */
        if (message.uint64WrapperDefault)
            UInt64Wrapper.internalBinaryWrite(message.uint64WrapperDefault, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.Int32Wrapper int32_wrapper_default = 14; */
        if (message.int32WrapperDefault)
            Int32Wrapper.internalBinaryWrite(message.int32WrapperDefault, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.UInt32Wrapper uint32_wrapper_default = 15; */
        if (message.uint32WrapperDefault)
            UInt32Wrapper.internalBinaryWrite(message.uint32WrapperDefault, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.BoolWrapper bool_wrapper_default = 16; */
        if (message.boolWrapperDefault)
            BoolWrapper.internalBinaryWrite(message.boolWrapperDefault, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.StringWrapper string_wrapper_default = 17; */
        if (message.stringWrapperDefault)
            StringWrapper.internalBinaryWrite(message.stringWrapperDefault, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.BytesWrapper bytes_wrapper_default = 18; */
        if (message.bytesWrapperDefault)
            BytesWrapper.internalBinaryWrite(message.bytesWrapperDefault, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.WrappersTestCases
 */
export const WrappersTestCases = new WrappersTestCases$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoubleWrapper$Type extends MessageType<DoubleWrapper> {
    constructor() {
        super("proto_util_converter.testing.DoubleWrapper", [
            { no: 1, name: "double", kind: "message", T: () => DoubleValue }
        ]);
    }
    create(value?: PartialMessage<DoubleWrapper>): DoubleWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DoubleWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoubleWrapper): DoubleWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.DoubleValue double */ 1:
                    message.double = DoubleValue.internalBinaryRead(reader, reader.uint32(), options, message.double);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoubleWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.DoubleValue double = 1; */
        if (message.double)
            DoubleValue.internalBinaryWrite(message.double, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.DoubleWrapper
 */
export const DoubleWrapper = new DoubleWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FloatWrapper$Type extends MessageType<FloatWrapper> {
    constructor() {
        super("proto_util_converter.testing.FloatWrapper", [
            { no: 1, name: "float", kind: "message", T: () => FloatValue }
        ]);
    }
    create(value?: PartialMessage<FloatWrapper>): FloatWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FloatWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FloatWrapper): FloatWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.FloatValue float */ 1:
                    message.float = FloatValue.internalBinaryRead(reader, reader.uint32(), options, message.float);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FloatWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.FloatValue float = 1; */
        if (message.float)
            FloatValue.internalBinaryWrite(message.float, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.FloatWrapper
 */
export const FloatWrapper = new FloatWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Int64Wrapper$Type extends MessageType<Int64Wrapper> {
    constructor() {
        super("proto_util_converter.testing.Int64Wrapper", [
            { no: 1, name: "int64", kind: "message", T: () => Int64Value }
        ]);
    }
    create(value?: PartialMessage<Int64Wrapper>): Int64Wrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Int64Wrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Int64Wrapper): Int64Wrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Int64Value int64 */ 1:
                    message.int64 = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.int64);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Int64Wrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Int64Value int64 = 1; */
        if (message.int64)
            Int64Value.internalBinaryWrite(message.int64, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.Int64Wrapper
 */
export const Int64Wrapper = new Int64Wrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UInt64Wrapper$Type extends MessageType<UInt64Wrapper> {
    constructor() {
        super("proto_util_converter.testing.UInt64Wrapper", [
            { no: 1, name: "uint64", kind: "message", T: () => UInt64Value }
        ]);
    }
    create(value?: PartialMessage<UInt64Wrapper>): UInt64Wrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UInt64Wrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UInt64Wrapper): UInt64Wrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt64Value uint64 */ 1:
                    message.uint64 = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.uint64);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UInt64Wrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt64Value uint64 = 1; */
        if (message.uint64)
            UInt64Value.internalBinaryWrite(message.uint64, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.UInt64Wrapper
 */
export const UInt64Wrapper = new UInt64Wrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Int32Wrapper$Type extends MessageType<Int32Wrapper> {
    constructor() {
        super("proto_util_converter.testing.Int32Wrapper", [
            { no: 1, name: "int32", kind: "message", T: () => Int32Value }
        ]);
    }
    create(value?: PartialMessage<Int32Wrapper>): Int32Wrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Int32Wrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Int32Wrapper): Int32Wrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Int32Value int32 */ 1:
                    message.int32 = Int32Value.internalBinaryRead(reader, reader.uint32(), options, message.int32);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Int32Wrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Int32Value int32 = 1; */
        if (message.int32)
            Int32Value.internalBinaryWrite(message.int32, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.Int32Wrapper
 */
export const Int32Wrapper = new Int32Wrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UInt32Wrapper$Type extends MessageType<UInt32Wrapper> {
    constructor() {
        super("proto_util_converter.testing.UInt32Wrapper", [
            { no: 1, name: "uint32", kind: "message", T: () => UInt32Value }
        ]);
    }
    create(value?: PartialMessage<UInt32Wrapper>): UInt32Wrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UInt32Wrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UInt32Wrapper): UInt32Wrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.UInt32Value uint32 */ 1:
                    message.uint32 = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.uint32);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UInt32Wrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.UInt32Value uint32 = 1; */
        if (message.uint32)
            UInt32Value.internalBinaryWrite(message.uint32, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.UInt32Wrapper
 */
export const UInt32Wrapper = new UInt32Wrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BoolWrapper$Type extends MessageType<BoolWrapper> {
    constructor() {
        super("proto_util_converter.testing.BoolWrapper", [
            { no: 1, name: "bool", kind: "message", T: () => BoolValue }
        ]);
    }
    create(value?: PartialMessage<BoolWrapper>): BoolWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BoolWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BoolWrapper): BoolWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.BoolValue bool */ 1:
                    message.bool = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.bool);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BoolWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.BoolValue bool = 1; */
        if (message.bool)
            BoolValue.internalBinaryWrite(message.bool, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.BoolWrapper
 */
export const BoolWrapper = new BoolWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StringWrapper$Type extends MessageType<StringWrapper> {
    constructor() {
        super("proto_util_converter.testing.StringWrapper", [
            { no: 1, name: "string", kind: "message", T: () => StringValue }
        ]);
    }
    create(value?: PartialMessage<StringWrapper>): StringWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StringWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StringWrapper): StringWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue string */ 1:
                    message.string = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.string);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StringWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue string = 1; */
        if (message.string)
            StringValue.internalBinaryWrite(message.string, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.StringWrapper
 */
export const StringWrapper = new StringWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BytesWrapper$Type extends MessageType<BytesWrapper> {
    constructor() {
        super("proto_util_converter.testing.BytesWrapper", [
            { no: 1, name: "bytes", kind: "message", T: () => BytesValue }
        ]);
    }
    create(value?: PartialMessage<BytesWrapper>): BytesWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BytesWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BytesWrapper): BytesWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.BytesValue bytes */ 1:
                    message.bytes = BytesValue.internalBinaryRead(reader, reader.uint32(), options, message.bytes);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BytesWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.BytesValue bytes = 1; */
        if (message.bytes)
            BytesValue.internalBinaryWrite(message.bytes, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.BytesWrapper
 */
export const BytesWrapper = new BytesWrapper$Type();
/**
 * @generated ServiceType for protobuf service proto_util_converter.testing.WrappersTestService
 */
export const WrappersTestService = new ServiceType("proto_util_converter.testing.WrappersTestService", [
    { name: "Call", options: {}, I: WrappersTestCases, O: WrappersTestCases }
]);
