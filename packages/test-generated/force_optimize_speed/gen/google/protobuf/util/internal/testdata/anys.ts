// @generated by protobuf-ts 2.9.5 with parameter force_optimize_speed,long_type_string
// @generated from protobuf file "google/protobuf/util/internal/testdata/anys.proto" (package "proto_util_converter.testing", syntax proto3)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Int32Value } from "../../../wrappers";
import { Duration } from "../../../duration";
import { Timestamp } from "../../../timestamp";
import { Struct } from "../../../struct";
import { DoubleValue } from "../../../wrappers";
import { Any } from "../../../any";
/**
 * Top-level test cases proto used by MarshallingTest. See description
 * at the top of the class MarshallingTest for details on how to write
 * test cases.
 *
 * @generated from protobuf message proto_util_converter.testing.AnyTestCases
 */
export interface AnyTestCases {
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper empty_any = 1;
     */
    emptyAny?: AnyWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper type_only_any = 2;
     */
    typeOnlyAny?: AnyWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper wrapper_any = 3;
     */
    wrapperAny?: AnyWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper any_with_timestamp_value = 4;
     */
    anyWithTimestampValue?: AnyWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper any_with_duration_value = 5;
     */
    anyWithDurationValue?: AnyWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper any_with_struct_value = 6;
     */
    anyWithStructValue?: AnyWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper recursive_any = 7;
     */
    recursiveAny?: AnyWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper any_with_message_value = 8;
     */
    anyWithMessageValue?: AnyWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper any_with_nested_message = 9;
     */
    anyWithNestedMessage?: AnyWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper any_with_message_with_wrapper_type = 10;
     */
    anyWithMessageWithWrapperType?: AnyWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper any_with_message_with_timestamp = 11;
     */
    anyWithMessageWithTimestamp?: AnyWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper any_with_message_containing_map = 12;
     */
    anyWithMessageContainingMap?: AnyWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper any_with_message_containing_struct = 13;
     */
    anyWithMessageContainingStruct?: AnyWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper any_with_message_containing_repeated_message = 14;
     */
    anyWithMessageContainingRepeatedMessage?: AnyWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper recursive_any_with_type_field_at_end = 15;
     */
    recursiveAnyWithTypeFieldAtEnd?: AnyWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper repeated_any = 16;
     */
    repeatedAny?: AnyWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.AnyWrapper empty_any_with_null_type_url = 17;
     */
    emptyAnyWithNullTypeUrl?: AnyWrapper;
    /**
     * @generated from protobuf field: google.protobuf.Any top_level_any = 50;
     */
    topLevelAny?: Any;
    /**
     * @generated from protobuf field: google.protobuf.Any top_level_any_with_type_field_at_end = 51;
     */
    topLevelAnyWithTypeFieldAtEnd?: Any;
    /**
     * @generated from protobuf field: google.protobuf.Any top_level_any_with_pivot_one = 52;
     */
    topLevelAnyWithPivotOne?: Any;
    /**
     * @generated from protobuf field: google.protobuf.Any top_level_any_with_pivot_two = 53;
     */
    topLevelAnyWithPivotTwo?: Any;
    /**
     * @generated from protobuf field: google.protobuf.Any top_level_any_unordered = 54;
     */
    topLevelAnyUnordered?: Any;
}
/**
 * @generated from protobuf message proto_util_converter.testing.AnyWrapper
 */
export interface AnyWrapper {
    /**
     * @generated from protobuf field: google.protobuf.Any any = 1;
     */
    any?: Any;
}
/**
 * Hack to make sure the types we put into the any are included in the types.
 * Real solution is to add these types to the service config.
 *
 * @generated from protobuf message proto_util_converter.testing.Imports
 */
export interface Imports {
    /**
     * @generated from protobuf field: google.protobuf.DoubleValue dbl = 1;
     */
    dbl?: DoubleValue;
    /**
     * @generated from protobuf field: google.protobuf.Struct struct = 2;
     */
    struct?: Struct;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 3;
     */
    timestamp?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Duration duration = 4;
     */
    duration?: Duration;
    /**
     * @generated from protobuf field: google.protobuf.Int32Value i32 = 5;
     */
    i32?: Int32Value;
    /**
     * @generated from protobuf field: proto_util_converter.testing.Data data = 100;
     */
    data?: Data;
}
/**
 * @generated from protobuf message proto_util_converter.testing.Data
 */
export interface Data {
    /**
     * @generated from protobuf field: int32 attr = 1;
     */
    attr: number;
    /**
     * @generated from protobuf field: string str = 2;
     */
    str: string;
    /**
     * @generated from protobuf field: repeated string msgs = 3;
     */
    msgs: string[];
    /**
     * @generated from protobuf field: proto_util_converter.testing.Data nested_data = 4;
     */
    nestedData?: Data;
    /**
     * @generated from protobuf field: google.protobuf.Int32Value int_wrapper = 5;
     */
    intWrapper?: Int32Value;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp time = 6;
     */
    time?: Timestamp;
    /**
     * @generated from protobuf field: map<string, string> map_data = 7;
     */
    mapData: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: google.protobuf.Struct struct_data = 8;
     */
    structData?: Struct;
    /**
     * @generated from protobuf field: repeated proto_util_converter.testing.Data repeated_data = 9;
     */
    repeatedData: Data[];
    /**
     * @generated from protobuf field: repeated google.protobuf.Any repeated_any = 10;
     */
    repeatedAny: Any[];
}
/**
 * @generated from protobuf message proto_util_converter.testing.AnyIn
 */
export interface AnyIn {
    /**
     * @generated from protobuf field: string something = 1;
     */
    something: string;
    /**
     * @generated from protobuf field: google.protobuf.Any any = 2;
     */
    any?: Any;
}
/**
 * @generated from protobuf message proto_util_converter.testing.AnyOut
 */
export interface AnyOut {
    /**
     * @generated from protobuf field: google.protobuf.Any any = 1;
     */
    any?: Any;
}
/**
 * @generated from protobuf message proto_util_converter.testing.AnyM
 */
export interface AnyM {
    /**
     * @generated from protobuf field: string foo = 1;
     */
    foo: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class AnyTestCases$Type extends MessageType<AnyTestCases> {
    constructor() {
        super("proto_util_converter.testing.AnyTestCases", [
            { no: 1, name: "empty_any", kind: "message", T: () => AnyWrapper },
            { no: 2, name: "type_only_any", kind: "message", T: () => AnyWrapper },
            { no: 3, name: "wrapper_any", kind: "message", T: () => AnyWrapper },
            { no: 4, name: "any_with_timestamp_value", kind: "message", T: () => AnyWrapper },
            { no: 5, name: "any_with_duration_value", kind: "message", T: () => AnyWrapper },
            { no: 6, name: "any_with_struct_value", kind: "message", T: () => AnyWrapper },
            { no: 7, name: "recursive_any", kind: "message", T: () => AnyWrapper },
            { no: 8, name: "any_with_message_value", kind: "message", T: () => AnyWrapper },
            { no: 9, name: "any_with_nested_message", kind: "message", T: () => AnyWrapper },
            { no: 10, name: "any_with_message_with_wrapper_type", kind: "message", T: () => AnyWrapper },
            { no: 11, name: "any_with_message_with_timestamp", kind: "message", T: () => AnyWrapper },
            { no: 12, name: "any_with_message_containing_map", kind: "message", T: () => AnyWrapper },
            { no: 13, name: "any_with_message_containing_struct", kind: "message", T: () => AnyWrapper },
            { no: 14, name: "any_with_message_containing_repeated_message", kind: "message", T: () => AnyWrapper },
            { no: 15, name: "recursive_any_with_type_field_at_end", kind: "message", T: () => AnyWrapper },
            { no: 16, name: "repeated_any", kind: "message", T: () => AnyWrapper },
            { no: 17, name: "empty_any_with_null_type_url", kind: "message", T: () => AnyWrapper },
            { no: 50, name: "top_level_any", kind: "message", T: () => Any },
            { no: 51, name: "top_level_any_with_type_field_at_end", kind: "message", T: () => Any },
            { no: 52, name: "top_level_any_with_pivot_one", kind: "message", T: () => Any },
            { no: 53, name: "top_level_any_with_pivot_two", kind: "message", T: () => Any },
            { no: 54, name: "top_level_any_unordered", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<AnyTestCases>): AnyTestCases {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AnyTestCases>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnyTestCases): AnyTestCases {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto_util_converter.testing.AnyWrapper empty_any */ 1:
                    message.emptyAny = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.emptyAny);
                    break;
                case /* proto_util_converter.testing.AnyWrapper type_only_any */ 2:
                    message.typeOnlyAny = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.typeOnlyAny);
                    break;
                case /* proto_util_converter.testing.AnyWrapper wrapper_any */ 3:
                    message.wrapperAny = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.wrapperAny);
                    break;
                case /* proto_util_converter.testing.AnyWrapper any_with_timestamp_value */ 4:
                    message.anyWithTimestampValue = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.anyWithTimestampValue);
                    break;
                case /* proto_util_converter.testing.AnyWrapper any_with_duration_value */ 5:
                    message.anyWithDurationValue = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.anyWithDurationValue);
                    break;
                case /* proto_util_converter.testing.AnyWrapper any_with_struct_value */ 6:
                    message.anyWithStructValue = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.anyWithStructValue);
                    break;
                case /* proto_util_converter.testing.AnyWrapper recursive_any */ 7:
                    message.recursiveAny = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.recursiveAny);
                    break;
                case /* proto_util_converter.testing.AnyWrapper any_with_message_value */ 8:
                    message.anyWithMessageValue = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.anyWithMessageValue);
                    break;
                case /* proto_util_converter.testing.AnyWrapper any_with_nested_message */ 9:
                    message.anyWithNestedMessage = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.anyWithNestedMessage);
                    break;
                case /* proto_util_converter.testing.AnyWrapper any_with_message_with_wrapper_type */ 10:
                    message.anyWithMessageWithWrapperType = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.anyWithMessageWithWrapperType);
                    break;
                case /* proto_util_converter.testing.AnyWrapper any_with_message_with_timestamp */ 11:
                    message.anyWithMessageWithTimestamp = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.anyWithMessageWithTimestamp);
                    break;
                case /* proto_util_converter.testing.AnyWrapper any_with_message_containing_map */ 12:
                    message.anyWithMessageContainingMap = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.anyWithMessageContainingMap);
                    break;
                case /* proto_util_converter.testing.AnyWrapper any_with_message_containing_struct */ 13:
                    message.anyWithMessageContainingStruct = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.anyWithMessageContainingStruct);
                    break;
                case /* proto_util_converter.testing.AnyWrapper any_with_message_containing_repeated_message */ 14:
                    message.anyWithMessageContainingRepeatedMessage = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.anyWithMessageContainingRepeatedMessage);
                    break;
                case /* proto_util_converter.testing.AnyWrapper recursive_any_with_type_field_at_end */ 15:
                    message.recursiveAnyWithTypeFieldAtEnd = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.recursiveAnyWithTypeFieldAtEnd);
                    break;
                case /* proto_util_converter.testing.AnyWrapper repeated_any */ 16:
                    message.repeatedAny = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.repeatedAny);
                    break;
                case /* proto_util_converter.testing.AnyWrapper empty_any_with_null_type_url */ 17:
                    message.emptyAnyWithNullTypeUrl = AnyWrapper.internalBinaryRead(reader, reader.uint32(), options, message.emptyAnyWithNullTypeUrl);
                    break;
                case /* google.protobuf.Any top_level_any */ 50:
                    message.topLevelAny = Any.internalBinaryRead(reader, reader.uint32(), options, message.topLevelAny);
                    break;
                case /* google.protobuf.Any top_level_any_with_type_field_at_end */ 51:
                    message.topLevelAnyWithTypeFieldAtEnd = Any.internalBinaryRead(reader, reader.uint32(), options, message.topLevelAnyWithTypeFieldAtEnd);
                    break;
                case /* google.protobuf.Any top_level_any_with_pivot_one */ 52:
                    message.topLevelAnyWithPivotOne = Any.internalBinaryRead(reader, reader.uint32(), options, message.topLevelAnyWithPivotOne);
                    break;
                case /* google.protobuf.Any top_level_any_with_pivot_two */ 53:
                    message.topLevelAnyWithPivotTwo = Any.internalBinaryRead(reader, reader.uint32(), options, message.topLevelAnyWithPivotTwo);
                    break;
                case /* google.protobuf.Any top_level_any_unordered */ 54:
                    message.topLevelAnyUnordered = Any.internalBinaryRead(reader, reader.uint32(), options, message.topLevelAnyUnordered);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnyTestCases, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto_util_converter.testing.AnyWrapper empty_any = 1; */
        if (message.emptyAny)
            AnyWrapper.internalBinaryWrite(message.emptyAny, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.AnyWrapper type_only_any = 2; */
        if (message.typeOnlyAny)
            AnyWrapper.internalBinaryWrite(message.typeOnlyAny, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.AnyWrapper wrapper_any = 3; */
        if (message.wrapperAny)
            AnyWrapper.internalBinaryWrite(message.wrapperAny, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.AnyWrapper any_with_timestamp_value = 4; */
        if (message.anyWithTimestampValue)
            AnyWrapper.internalBinaryWrite(message.anyWithTimestampValue, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.AnyWrapper any_with_duration_value = 5; */
        if (message.anyWithDurationValue)
            AnyWrapper.internalBinaryWrite(message.anyWithDurationValue, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.AnyWrapper any_with_struct_value = 6; */
        if (message.anyWithStructValue)
            AnyWrapper.internalBinaryWrite(message.anyWithStructValue, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.AnyWrapper recursive_any = 7; */
        if (message.recursiveAny)
            AnyWrapper.internalBinaryWrite(message.recursiveAny, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.AnyWrapper any_with_message_value = 8; */
        if (message.anyWithMessageValue)
            AnyWrapper.internalBinaryWrite(message.anyWithMessageValue, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.AnyWrapper any_with_nested_message = 9; */
        if (message.anyWithNestedMessage)
            AnyWrapper.internalBinaryWrite(message.anyWithNestedMessage, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.AnyWrapper any_with_message_with_wrapper_type = 10; */
        if (message.anyWithMessageWithWrapperType)
            AnyWrapper.internalBinaryWrite(message.anyWithMessageWithWrapperType, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.AnyWrapper any_with_message_with_timestamp = 11; */
        if (message.anyWithMessageWithTimestamp)
            AnyWrapper.internalBinaryWrite(message.anyWithMessageWithTimestamp, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.AnyWrapper any_with_message_containing_map = 12; */
        if (message.anyWithMessageContainingMap)
            AnyWrapper.internalBinaryWrite(message.anyWithMessageContainingMap, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.AnyWrapper any_with_message_containing_struct = 13; */
        if (message.anyWithMessageContainingStruct)
            AnyWrapper.internalBinaryWrite(message.anyWithMessageContainingStruct, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.AnyWrapper any_with_message_containing_repeated_message = 14; */
        if (message.anyWithMessageContainingRepeatedMessage)
            AnyWrapper.internalBinaryWrite(message.anyWithMessageContainingRepeatedMessage, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.AnyWrapper recursive_any_with_type_field_at_end = 15; */
        if (message.recursiveAnyWithTypeFieldAtEnd)
            AnyWrapper.internalBinaryWrite(message.recursiveAnyWithTypeFieldAtEnd, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.AnyWrapper repeated_any = 16; */
        if (message.repeatedAny)
            AnyWrapper.internalBinaryWrite(message.repeatedAny, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.AnyWrapper empty_any_with_null_type_url = 17; */
        if (message.emptyAnyWithNullTypeUrl)
            AnyWrapper.internalBinaryWrite(message.emptyAnyWithNullTypeUrl, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any top_level_any = 50; */
        if (message.topLevelAny)
            Any.internalBinaryWrite(message.topLevelAny, writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any top_level_any_with_type_field_at_end = 51; */
        if (message.topLevelAnyWithTypeFieldAtEnd)
            Any.internalBinaryWrite(message.topLevelAnyWithTypeFieldAtEnd, writer.tag(51, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any top_level_any_with_pivot_one = 52; */
        if (message.topLevelAnyWithPivotOne)
            Any.internalBinaryWrite(message.topLevelAnyWithPivotOne, writer.tag(52, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any top_level_any_with_pivot_two = 53; */
        if (message.topLevelAnyWithPivotTwo)
            Any.internalBinaryWrite(message.topLevelAnyWithPivotTwo, writer.tag(53, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any top_level_any_unordered = 54; */
        if (message.topLevelAnyUnordered)
            Any.internalBinaryWrite(message.topLevelAnyUnordered, writer.tag(54, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.AnyTestCases
 */
export const AnyTestCases = new AnyTestCases$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnyWrapper$Type extends MessageType<AnyWrapper> {
    constructor() {
        super("proto_util_converter.testing.AnyWrapper", [
            { no: 1, name: "any", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<AnyWrapper>): AnyWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AnyWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnyWrapper): AnyWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any any */ 1:
                    message.any = Any.internalBinaryRead(reader, reader.uint32(), options, message.any);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnyWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any any = 1; */
        if (message.any)
            Any.internalBinaryWrite(message.any, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.AnyWrapper
 */
export const AnyWrapper = new AnyWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Imports$Type extends MessageType<Imports> {
    constructor() {
        super("proto_util_converter.testing.Imports", [
            { no: 1, name: "dbl", kind: "message", T: () => DoubleValue },
            { no: 2, name: "struct", kind: "message", T: () => Struct },
            { no: 3, name: "timestamp", kind: "message", T: () => Timestamp },
            { no: 4, name: "duration", kind: "message", T: () => Duration },
            { no: 5, name: "i32", kind: "message", T: () => Int32Value },
            { no: 100, name: "data", kind: "message", T: () => Data }
        ]);
    }
    create(value?: PartialMessage<Imports>): Imports {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Imports>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Imports): Imports {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.DoubleValue dbl */ 1:
                    message.dbl = DoubleValue.internalBinaryRead(reader, reader.uint32(), options, message.dbl);
                    break;
                case /* google.protobuf.Struct struct */ 2:
                    message.struct = Struct.internalBinaryRead(reader, reader.uint32(), options, message.struct);
                    break;
                case /* google.protobuf.Timestamp timestamp */ 3:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* google.protobuf.Duration duration */ 4:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                case /* google.protobuf.Int32Value i32 */ 5:
                    message.i32 = Int32Value.internalBinaryRead(reader, reader.uint32(), options, message.i32);
                    break;
                case /* proto_util_converter.testing.Data data */ 100:
                    message.data = Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Imports, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.DoubleValue dbl = 1; */
        if (message.dbl)
            DoubleValue.internalBinaryWrite(message.dbl, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Struct struct = 2; */
        if (message.struct)
            Struct.internalBinaryWrite(message.struct, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp timestamp = 3; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration duration = 4; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Int32Value i32 = 5; */
        if (message.i32)
            Int32Value.internalBinaryWrite(message.i32, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* proto_util_converter.testing.Data data = 100; */
        if (message.data)
            Data.internalBinaryWrite(message.data, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.Imports
 */
export const Imports = new Imports$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Data$Type extends MessageType<Data> {
    constructor() {
        super("proto_util_converter.testing.Data", [
            { no: 1, name: "attr", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "msgs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "nested_data", kind: "message", T: () => Data },
            { no: 5, name: "int_wrapper", kind: "message", T: () => Int32Value },
            { no: 6, name: "time", kind: "message", T: () => Timestamp },
            { no: 7, name: "map_data", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 8, name: "struct_data", kind: "message", T: () => Struct },
            { no: 9, name: "repeated_data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Data },
            { no: 10, name: "repeated_any", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Any }
        ]);
    }
    create(value?: PartialMessage<Data>): Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.attr = 0;
        message.str = "";
        message.msgs = [];
        message.mapData = {};
        message.repeatedData = [];
        message.repeatedAny = [];
        if (value !== undefined)
            reflectionMergePartial<Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Data): Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 attr */ 1:
                    message.attr = reader.int32();
                    break;
                case /* string str */ 2:
                    message.str = reader.string();
                    break;
                case /* repeated string msgs */ 3:
                    message.msgs.push(reader.string());
                    break;
                case /* proto_util_converter.testing.Data nested_data */ 4:
                    message.nestedData = Data.internalBinaryRead(reader, reader.uint32(), options, message.nestedData);
                    break;
                case /* google.protobuf.Int32Value int_wrapper */ 5:
                    message.intWrapper = Int32Value.internalBinaryRead(reader, reader.uint32(), options, message.intWrapper);
                    break;
                case /* google.protobuf.Timestamp time */ 6:
                    message.time = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.time);
                    break;
                case /* map<string, string> map_data */ 7:
                    this.binaryReadMap7(message.mapData, reader, options);
                    break;
                case /* google.protobuf.Struct struct_data */ 8:
                    message.structData = Struct.internalBinaryRead(reader, reader.uint32(), options, message.structData);
                    break;
                case /* repeated proto_util_converter.testing.Data repeated_data */ 9:
                    message.repeatedData.push(Data.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.protobuf.Any repeated_any */ 10:
                    message.repeatedAny.push(Any.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap7(map: Data["mapData"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Data["mapData"] | undefined, val: Data["mapData"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field proto_util_converter.testing.Data.map_data");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 attr = 1; */
        if (message.attr !== 0)
            writer.tag(1, WireType.Varint).int32(message.attr);
        /* string str = 2; */
        if (message.str !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.str);
        /* repeated string msgs = 3; */
        for (let i = 0; i < message.msgs.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.msgs[i]);
        /* proto_util_converter.testing.Data nested_data = 4; */
        if (message.nestedData)
            Data.internalBinaryWrite(message.nestedData, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Int32Value int_wrapper = 5; */
        if (message.intWrapper)
            Int32Value.internalBinaryWrite(message.intWrapper, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp time = 6; */
        if (message.time)
            Timestamp.internalBinaryWrite(message.time, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> map_data = 7; */
        for (let k of globalThis.Object.keys(message.mapData))
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.mapData[k]).join();
        /* google.protobuf.Struct struct_data = 8; */
        if (message.structData)
            Struct.internalBinaryWrite(message.structData, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated proto_util_converter.testing.Data repeated_data = 9; */
        for (let i = 0; i < message.repeatedData.length; i++)
            Data.internalBinaryWrite(message.repeatedData[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.Any repeated_any = 10; */
        for (let i = 0; i < message.repeatedAny.length; i++)
            Any.internalBinaryWrite(message.repeatedAny[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.Data
 */
export const Data = new Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnyIn$Type extends MessageType<AnyIn> {
    constructor() {
        super("proto_util_converter.testing.AnyIn", [
            { no: 1, name: "something", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "any", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<AnyIn>): AnyIn {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.something = "";
        if (value !== undefined)
            reflectionMergePartial<AnyIn>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnyIn): AnyIn {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string something */ 1:
                    message.something = reader.string();
                    break;
                case /* google.protobuf.Any any */ 2:
                    message.any = Any.internalBinaryRead(reader, reader.uint32(), options, message.any);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnyIn, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string something = 1; */
        if (message.something !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.something);
        /* google.protobuf.Any any = 2; */
        if (message.any)
            Any.internalBinaryWrite(message.any, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.AnyIn
 */
export const AnyIn = new AnyIn$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnyOut$Type extends MessageType<AnyOut> {
    constructor() {
        super("proto_util_converter.testing.AnyOut", [
            { no: 1, name: "any", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<AnyOut>): AnyOut {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AnyOut>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnyOut): AnyOut {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any any */ 1:
                    message.any = Any.internalBinaryRead(reader, reader.uint32(), options, message.any);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnyOut, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any any = 1; */
        if (message.any)
            Any.internalBinaryWrite(message.any, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.AnyOut
 */
export const AnyOut = new AnyOut$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnyM$Type extends MessageType<AnyM> {
    constructor() {
        super("proto_util_converter.testing.AnyM", [
            { no: 1, name: "foo", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AnyM>): AnyM {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.foo = "";
        if (value !== undefined)
            reflectionMergePartial<AnyM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnyM): AnyM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string foo */ 1:
                    message.foo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnyM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string foo = 1; */
        if (message.foo !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.foo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.AnyM
 */
export const AnyM = new AnyM$Type();
/**
 * @generated ServiceType for protobuf service proto_util_converter.testing.AnyTestService
 */
export const AnyTestService = new ServiceType("proto_util_converter.testing.AnyTestService", [
    { name: "Call", options: {}, I: AnyTestCases, O: AnyTestCases },
    { name: "Call1", options: {}, I: Imports, O: Imports }
]);
