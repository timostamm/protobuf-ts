// @generated by protobuf-ts 2.9.5 with parameter force_optimize_speed,long_type_string
// @generated from protobuf file "google/protobuf/unittest_no_field_presence.proto" (package "proto2_nofieldpresence_unittest", syntax proto3)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//
// A proto file used to test a message type with no explicit field presence.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TestRequired } from "./unittest";
import { TestAllTypes as TestAllTypes$ } from "./unittest";
/**
 * This proto includes every type of field in both singular and repeated
 * forms.
 *
 * @generated from protobuf message proto2_nofieldpresence_unittest.TestAllTypes
 */
export interface TestAllTypes {
    /**
     * Singular
     * TODO: remove 'optional' labels as soon as CL 69188077 is LGTM'd to make
     * 'optional' optional.
     *
     * @generated from protobuf field: int32 optional_int32 = 1;
     */
    optionalInt32: number;
    /**
     * @generated from protobuf field: int64 optional_int64 = 2;
     */
    optionalInt64: string;
    /**
     * @generated from protobuf field: uint32 optional_uint32 = 3;
     */
    optionalUint32: number;
    /**
     * @generated from protobuf field: uint64 optional_uint64 = 4;
     */
    optionalUint64: string;
    /**
     * @generated from protobuf field: sint32 optional_sint32 = 5;
     */
    optionalSint32: number;
    /**
     * @generated from protobuf field: sint64 optional_sint64 = 6;
     */
    optionalSint64: string;
    /**
     * @generated from protobuf field: fixed32 optional_fixed32 = 7;
     */
    optionalFixed32: number;
    /**
     * @generated from protobuf field: fixed64 optional_fixed64 = 8;
     */
    optionalFixed64: string;
    /**
     * @generated from protobuf field: sfixed32 optional_sfixed32 = 9;
     */
    optionalSfixed32: number;
    /**
     * @generated from protobuf field: sfixed64 optional_sfixed64 = 10;
     */
    optionalSfixed64: string;
    /**
     * @generated from protobuf field: float optional_float = 11;
     */
    optionalFloat: number;
    /**
     * @generated from protobuf field: double optional_double = 12;
     */
    optionalDouble: number;
    /**
     * @generated from protobuf field: bool optional_bool = 13;
     */
    optionalBool: boolean;
    /**
     * @generated from protobuf field: string optional_string = 14;
     */
    optionalString: string;
    /**
     * @generated from protobuf field: bytes optional_bytes = 15;
     */
    optionalBytes: Uint8Array;
    /**
     * @generated from protobuf field: proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
     */
    optionalNestedMessage?: TestAllTypes_NestedMessage;
    /**
     * @generated from protobuf field: proto2_nofieldpresence_unittest.ForeignMessage optional_foreign_message = 19;
     */
    optionalForeignMessage?: ForeignMessage;
    /**
     * @generated from protobuf field: protobuf_unittest.TestAllTypes optional_proto2_message = 20;
     */
    optionalProto2Message?: TestAllTypes$;
    /**
     * @generated from protobuf field: proto2_nofieldpresence_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
     */
    optionalNestedEnum: TestAllTypes_NestedEnum;
    /**
     * @generated from protobuf field: proto2_nofieldpresence_unittest.ForeignEnum optional_foreign_enum = 22;
     */
    optionalForeignEnum: ForeignEnum; // N.B.: proto2-enum-type fields not allowed, because their default values
    // might not be zero.
    // optional protobuf_unittest.ForeignEnum          optional_proto2_enum     = 23;
    /**
     * @generated from protobuf field: string optional_string_piece = 24;
     */
    optionalStringPiece: string;
    /**
     * @generated from protobuf field: string optional_cord = 25;
     */
    optionalCord: string;
    /**
     * @generated from protobuf field: proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage optional_lazy_message = 30;
     */
    optionalLazyMessage?: TestAllTypes_NestedMessage;
    /**
     * Repeated
     *
     * @generated from protobuf field: repeated int32 repeated_int32 = 31;
     */
    repeatedInt32: number[];
    /**
     * @generated from protobuf field: repeated int64 repeated_int64 = 32;
     */
    repeatedInt64: string[];
    /**
     * @generated from protobuf field: repeated uint32 repeated_uint32 = 33;
     */
    repeatedUint32: number[];
    /**
     * @generated from protobuf field: repeated uint64 repeated_uint64 = 34;
     */
    repeatedUint64: string[];
    /**
     * @generated from protobuf field: repeated sint32 repeated_sint32 = 35;
     */
    repeatedSint32: number[];
    /**
     * @generated from protobuf field: repeated sint64 repeated_sint64 = 36;
     */
    repeatedSint64: string[];
    /**
     * @generated from protobuf field: repeated fixed32 repeated_fixed32 = 37;
     */
    repeatedFixed32: number[];
    /**
     * @generated from protobuf field: repeated fixed64 repeated_fixed64 = 38;
     */
    repeatedFixed64: string[];
    /**
     * @generated from protobuf field: repeated sfixed32 repeated_sfixed32 = 39;
     */
    repeatedSfixed32: number[];
    /**
     * @generated from protobuf field: repeated sfixed64 repeated_sfixed64 = 40;
     */
    repeatedSfixed64: string[];
    /**
     * @generated from protobuf field: repeated float repeated_float = 41;
     */
    repeatedFloat: number[];
    /**
     * @generated from protobuf field: repeated double repeated_double = 42;
     */
    repeatedDouble: number[];
    /**
     * @generated from protobuf field: repeated bool repeated_bool = 43;
     */
    repeatedBool: boolean[];
    /**
     * @generated from protobuf field: repeated string repeated_string = 44;
     */
    repeatedString: string[];
    /**
     * @generated from protobuf field: repeated bytes repeated_bytes = 45;
     */
    repeatedBytes: Uint8Array[];
    /**
     * @generated from protobuf field: repeated proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
     */
    repeatedNestedMessage: TestAllTypes_NestedMessage[];
    /**
     * @generated from protobuf field: repeated proto2_nofieldpresence_unittest.ForeignMessage repeated_foreign_message = 49;
     */
    repeatedForeignMessage: ForeignMessage[];
    /**
     * @generated from protobuf field: repeated protobuf_unittest.TestAllTypes repeated_proto2_message = 50;
     */
    repeatedProto2Message: TestAllTypes$[];
    /**
     * @generated from protobuf field: repeated proto2_nofieldpresence_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
     */
    repeatedNestedEnum: TestAllTypes_NestedEnum[];
    /**
     * @generated from protobuf field: repeated proto2_nofieldpresence_unittest.ForeignEnum repeated_foreign_enum = 52;
     */
    repeatedForeignEnum: ForeignEnum[];
    /**
     * @generated from protobuf field: repeated string repeated_string_piece = 54;
     */
    repeatedStringPiece: string[];
    /**
     * @generated from protobuf field: repeated string repeated_cord = 55;
     */
    repeatedCord: string[];
    /**
     * @generated from protobuf field: repeated proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57;
     */
    repeatedLazyMessage: TestAllTypes_NestedMessage[];
    /**
     * @generated from protobuf oneof: oneof_field
     */
    oneofField: {
        oneofKind: "oneofUint32";
        /**
         * @generated from protobuf field: uint32 oneof_uint32 = 111;
         */
        oneofUint32: number;
    } | {
        oneofKind: "oneofNestedMessage";
        /**
         * @generated from protobuf field: proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;
         */
        oneofNestedMessage: TestAllTypes_NestedMessage;
    } | {
        oneofKind: "oneofString";
        /**
         * @generated from protobuf field: string oneof_string = 113;
         */
        oneofString: string;
    } | {
        oneofKind: "oneofEnum";
        /**
         * @generated from protobuf field: proto2_nofieldpresence_unittest.TestAllTypes.NestedEnum oneof_enum = 114;
         */
        oneofEnum: TestAllTypes_NestedEnum;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage
 */
export interface TestAllTypes_NestedMessage {
    /**
     * @generated from protobuf field: int32 bb = 1;
     */
    bb: number;
}
/**
 * @generated from protobuf enum proto2_nofieldpresence_unittest.TestAllTypes.NestedEnum
 */
export enum TestAllTypes_NestedEnum {
    /**
     * @generated from protobuf enum value: FOO = 0;
     */
    FOO = 0,
    /**
     * @generated from protobuf enum value: BAR = 1;
     */
    BAR = 1,
    /**
     * @generated from protobuf enum value: BAZ = 2;
     */
    BAZ = 2
}
/**
 * @generated from protobuf message proto2_nofieldpresence_unittest.TestProto2Required
 */
export interface TestProto2Required {
    /**
     * @generated from protobuf field: protobuf_unittest.TestRequired proto2 = 1;
     */
    proto2?: TestRequired;
}
/**
 * Define these after TestAllTypes to make sure the compiler can handle
 * that.
 *
 * @generated from protobuf message proto2_nofieldpresence_unittest.ForeignMessage
 */
export interface ForeignMessage {
    /**
     * @generated from protobuf field: int32 c = 1;
     */
    c: number;
}
/**
 * @generated from protobuf enum proto2_nofieldpresence_unittest.ForeignEnum
 */
export enum ForeignEnum {
    /**
     * @generated from protobuf enum value: FOREIGN_FOO = 0;
     */
    FOREIGN_FOO = 0,
    /**
     * @generated from protobuf enum value: FOREIGN_BAR = 1;
     */
    FOREIGN_BAR = 1,
    /**
     * @generated from protobuf enum value: FOREIGN_BAZ = 2;
     */
    FOREIGN_BAZ = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class TestAllTypes$Type extends MessageType<TestAllTypes> {
    constructor() {
        super("proto2_nofieldpresence_unittest.TestAllTypes", [
            { no: 1, name: "optional_int32", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "optional_int64", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 3, name: "optional_uint32", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "optional_uint64", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "optional_sint32", kind: "scalar", T: 17 /*ScalarType.SINT32*/ },
            { no: 6, name: "optional_sint64", kind: "scalar", T: 18 /*ScalarType.SINT64*/ },
            { no: 7, name: "optional_fixed32", kind: "scalar", T: 7 /*ScalarType.FIXED32*/ },
            { no: 8, name: "optional_fixed64", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ },
            { no: 9, name: "optional_sfixed32", kind: "scalar", T: 15 /*ScalarType.SFIXED32*/ },
            { no: 10, name: "optional_sfixed64", kind: "scalar", T: 16 /*ScalarType.SFIXED64*/ },
            { no: 11, name: "optional_float", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "optional_double", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "optional_bool", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "optional_string", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "optional_bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 18, name: "optional_nested_message", kind: "message", T: () => TestAllTypes_NestedMessage },
            { no: 19, name: "optional_foreign_message", kind: "message", T: () => ForeignMessage },
            { no: 20, name: "optional_proto2_message", kind: "message", T: () => TestAllTypes$ },
            { no: 21, name: "optional_nested_enum", kind: "enum", T: () => ["proto2_nofieldpresence_unittest.TestAllTypes.NestedEnum", TestAllTypes_NestedEnum] },
            { no: 22, name: "optional_foreign_enum", kind: "enum", T: () => ["proto2_nofieldpresence_unittest.ForeignEnum", ForeignEnum] },
            { no: 24, name: "optional_string_piece", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "optional_cord", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 30, name: "optional_lazy_message", kind: "message", T: () => TestAllTypes_NestedMessage },
            { no: 31, name: "repeated_int32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 32, name: "repeated_int64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/ },
            { no: 33, name: "repeated_uint32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 34, name: "repeated_uint64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ },
            { no: 35, name: "repeated_sint32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 17 /*ScalarType.SINT32*/ },
            { no: 36, name: "repeated_sint64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 18 /*ScalarType.SINT64*/ },
            { no: 37, name: "repeated_fixed32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 7 /*ScalarType.FIXED32*/ },
            { no: 38, name: "repeated_fixed64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 6 /*ScalarType.FIXED64*/ },
            { no: 39, name: "repeated_sfixed32", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 15 /*ScalarType.SFIXED32*/ },
            { no: 40, name: "repeated_sfixed64", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 16 /*ScalarType.SFIXED64*/ },
            { no: 41, name: "repeated_float", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 42, name: "repeated_double", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 43, name: "repeated_bool", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 44, name: "repeated_string", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 45, name: "repeated_bytes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },
            { no: 48, name: "repeated_nested_message", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TestAllTypes_NestedMessage },
            { no: 49, name: "repeated_foreign_message", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ForeignMessage },
            { no: 50, name: "repeated_proto2_message", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TestAllTypes$ },
            { no: 51, name: "repeated_nested_enum", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["proto2_nofieldpresence_unittest.TestAllTypes.NestedEnum", TestAllTypes_NestedEnum] },
            { no: 52, name: "repeated_foreign_enum", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["proto2_nofieldpresence_unittest.ForeignEnum", ForeignEnum] },
            { no: 54, name: "repeated_string_piece", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 55, name: "repeated_cord", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 57, name: "repeated_lazy_message", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TestAllTypes_NestedMessage },
            { no: 111, name: "oneof_uint32", kind: "scalar", oneof: "oneofField", T: 13 /*ScalarType.UINT32*/ },
            { no: 112, name: "oneof_nested_message", kind: "message", oneof: "oneofField", T: () => TestAllTypes_NestedMessage },
            { no: 113, name: "oneof_string", kind: "scalar", oneof: "oneofField", T: 9 /*ScalarType.STRING*/ },
            { no: 114, name: "oneof_enum", kind: "enum", oneof: "oneofField", T: () => ["proto2_nofieldpresence_unittest.TestAllTypes.NestedEnum", TestAllTypes_NestedEnum] }
        ]);
    }
    create(value?: PartialMessage<TestAllTypes>): TestAllTypes {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.optionalInt32 = 0;
        message.optionalInt64 = "0";
        message.optionalUint32 = 0;
        message.optionalUint64 = "0";
        message.optionalSint32 = 0;
        message.optionalSint64 = "0";
        message.optionalFixed32 = 0;
        message.optionalFixed64 = "0";
        message.optionalSfixed32 = 0;
        message.optionalSfixed64 = "0";
        message.optionalFloat = 0;
        message.optionalDouble = 0;
        message.optionalBool = false;
        message.optionalString = "";
        message.optionalBytes = new Uint8Array(0);
        message.optionalNestedEnum = 0;
        message.optionalForeignEnum = 0;
        message.optionalStringPiece = "";
        message.optionalCord = "";
        message.repeatedInt32 = [];
        message.repeatedInt64 = [];
        message.repeatedUint32 = [];
        message.repeatedUint64 = [];
        message.repeatedSint32 = [];
        message.repeatedSint64 = [];
        message.repeatedFixed32 = [];
        message.repeatedFixed64 = [];
        message.repeatedSfixed32 = [];
        message.repeatedSfixed64 = [];
        message.repeatedFloat = [];
        message.repeatedDouble = [];
        message.repeatedBool = [];
        message.repeatedString = [];
        message.repeatedBytes = [];
        message.repeatedNestedMessage = [];
        message.repeatedForeignMessage = [];
        message.repeatedProto2Message = [];
        message.repeatedNestedEnum = [];
        message.repeatedForeignEnum = [];
        message.repeatedStringPiece = [];
        message.repeatedCord = [];
        message.repeatedLazyMessage = [];
        message.oneofField = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<TestAllTypes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestAllTypes): TestAllTypes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 optional_int32 */ 1:
                    message.optionalInt32 = reader.int32();
                    break;
                case /* int64 optional_int64 */ 2:
                    message.optionalInt64 = reader.int64().toString();
                    break;
                case /* uint32 optional_uint32 */ 3:
                    message.optionalUint32 = reader.uint32();
                    break;
                case /* uint64 optional_uint64 */ 4:
                    message.optionalUint64 = reader.uint64().toString();
                    break;
                case /* sint32 optional_sint32 */ 5:
                    message.optionalSint32 = reader.sint32();
                    break;
                case /* sint64 optional_sint64 */ 6:
                    message.optionalSint64 = reader.sint64().toString();
                    break;
                case /* fixed32 optional_fixed32 */ 7:
                    message.optionalFixed32 = reader.fixed32();
                    break;
                case /* fixed64 optional_fixed64 */ 8:
                    message.optionalFixed64 = reader.fixed64().toString();
                    break;
                case /* sfixed32 optional_sfixed32 */ 9:
                    message.optionalSfixed32 = reader.sfixed32();
                    break;
                case /* sfixed64 optional_sfixed64 */ 10:
                    message.optionalSfixed64 = reader.sfixed64().toString();
                    break;
                case /* float optional_float */ 11:
                    message.optionalFloat = reader.float();
                    break;
                case /* double optional_double */ 12:
                    message.optionalDouble = reader.double();
                    break;
                case /* bool optional_bool */ 13:
                    message.optionalBool = reader.bool();
                    break;
                case /* string optional_string */ 14:
                    message.optionalString = reader.string();
                    break;
                case /* bytes optional_bytes */ 15:
                    message.optionalBytes = reader.bytes();
                    break;
                case /* proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage optional_nested_message */ 18:
                    message.optionalNestedMessage = TestAllTypes_NestedMessage.internalBinaryRead(reader, reader.uint32(), options, message.optionalNestedMessage);
                    break;
                case /* proto2_nofieldpresence_unittest.ForeignMessage optional_foreign_message */ 19:
                    message.optionalForeignMessage = ForeignMessage.internalBinaryRead(reader, reader.uint32(), options, message.optionalForeignMessage);
                    break;
                case /* protobuf_unittest.TestAllTypes optional_proto2_message */ 20:
                    message.optionalProto2Message = TestAllTypes$.internalBinaryRead(reader, reader.uint32(), options, message.optionalProto2Message);
                    break;
                case /* proto2_nofieldpresence_unittest.TestAllTypes.NestedEnum optional_nested_enum */ 21:
                    message.optionalNestedEnum = reader.int32();
                    break;
                case /* proto2_nofieldpresence_unittest.ForeignEnum optional_foreign_enum */ 22:
                    message.optionalForeignEnum = reader.int32();
                    break;
                case /* string optional_string_piece */ 24:
                    message.optionalStringPiece = reader.string();
                    break;
                case /* string optional_cord */ 25:
                    message.optionalCord = reader.string();
                    break;
                case /* proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage optional_lazy_message */ 30:
                    message.optionalLazyMessage = TestAllTypes_NestedMessage.internalBinaryRead(reader, reader.uint32(), options, message.optionalLazyMessage);
                    break;
                case /* repeated int32 repeated_int32 */ 31:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedInt32.push(reader.int32());
                    else
                        message.repeatedInt32.push(reader.int32());
                    break;
                case /* repeated int64 repeated_int64 */ 32:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedInt64.push(reader.int64().toString());
                    else
                        message.repeatedInt64.push(reader.int64().toString());
                    break;
                case /* repeated uint32 repeated_uint32 */ 33:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedUint32.push(reader.uint32());
                    else
                        message.repeatedUint32.push(reader.uint32());
                    break;
                case /* repeated uint64 repeated_uint64 */ 34:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedUint64.push(reader.uint64().toString());
                    else
                        message.repeatedUint64.push(reader.uint64().toString());
                    break;
                case /* repeated sint32 repeated_sint32 */ 35:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSint32.push(reader.sint32());
                    else
                        message.repeatedSint32.push(reader.sint32());
                    break;
                case /* repeated sint64 repeated_sint64 */ 36:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSint64.push(reader.sint64().toString());
                    else
                        message.repeatedSint64.push(reader.sint64().toString());
                    break;
                case /* repeated fixed32 repeated_fixed32 */ 37:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFixed32.push(reader.fixed32());
                    else
                        message.repeatedFixed32.push(reader.fixed32());
                    break;
                case /* repeated fixed64 repeated_fixed64 */ 38:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFixed64.push(reader.fixed64().toString());
                    else
                        message.repeatedFixed64.push(reader.fixed64().toString());
                    break;
                case /* repeated sfixed32 repeated_sfixed32 */ 39:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSfixed32.push(reader.sfixed32());
                    else
                        message.repeatedSfixed32.push(reader.sfixed32());
                    break;
                case /* repeated sfixed64 repeated_sfixed64 */ 40:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedSfixed64.push(reader.sfixed64().toString());
                    else
                        message.repeatedSfixed64.push(reader.sfixed64().toString());
                    break;
                case /* repeated float repeated_float */ 41:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedFloat.push(reader.float());
                    else
                        message.repeatedFloat.push(reader.float());
                    break;
                case /* repeated double repeated_double */ 42:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedDouble.push(reader.double());
                    else
                        message.repeatedDouble.push(reader.double());
                    break;
                case /* repeated bool repeated_bool */ 43:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedBool.push(reader.bool());
                    else
                        message.repeatedBool.push(reader.bool());
                    break;
                case /* repeated string repeated_string */ 44:
                    message.repeatedString.push(reader.string());
                    break;
                case /* repeated bytes repeated_bytes */ 45:
                    message.repeatedBytes.push(reader.bytes());
                    break;
                case /* repeated proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage repeated_nested_message */ 48:
                    message.repeatedNestedMessage.push(TestAllTypes_NestedMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated proto2_nofieldpresence_unittest.ForeignMessage repeated_foreign_message */ 49:
                    message.repeatedForeignMessage.push(ForeignMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated protobuf_unittest.TestAllTypes repeated_proto2_message */ 50:
                    message.repeatedProto2Message.push(TestAllTypes$.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated proto2_nofieldpresence_unittest.TestAllTypes.NestedEnum repeated_nested_enum */ 51:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedNestedEnum.push(reader.int32());
                    else
                        message.repeatedNestedEnum.push(reader.int32());
                    break;
                case /* repeated proto2_nofieldpresence_unittest.ForeignEnum repeated_foreign_enum */ 52:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.repeatedForeignEnum.push(reader.int32());
                    else
                        message.repeatedForeignEnum.push(reader.int32());
                    break;
                case /* repeated string repeated_string_piece */ 54:
                    message.repeatedStringPiece.push(reader.string());
                    break;
                case /* repeated string repeated_cord */ 55:
                    message.repeatedCord.push(reader.string());
                    break;
                case /* repeated proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage repeated_lazy_message */ 57:
                    message.repeatedLazyMessage.push(TestAllTypes_NestedMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 oneof_uint32 */ 111:
                    message.oneofField = {
                        oneofKind: "oneofUint32",
                        oneofUint32: reader.uint32()
                    };
                    break;
                case /* proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage oneof_nested_message */ 112:
                    message.oneofField = {
                        oneofKind: "oneofNestedMessage",
                        oneofNestedMessage: TestAllTypes_NestedMessage.internalBinaryRead(reader, reader.uint32(), options, (message.oneofField as any).oneofNestedMessage)
                    };
                    break;
                case /* string oneof_string */ 113:
                    message.oneofField = {
                        oneofKind: "oneofString",
                        oneofString: reader.string()
                    };
                    break;
                case /* proto2_nofieldpresence_unittest.TestAllTypes.NestedEnum oneof_enum */ 114:
                    message.oneofField = {
                        oneofKind: "oneofEnum",
                        oneofEnum: reader.int32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestAllTypes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 optional_int32 = 1; */
        if (message.optionalInt32 !== 0)
            writer.tag(1, WireType.Varint).int32(message.optionalInt32);
        /* int64 optional_int64 = 2; */
        if (message.optionalInt64 !== "0")
            writer.tag(2, WireType.Varint).int64(message.optionalInt64);
        /* uint32 optional_uint32 = 3; */
        if (message.optionalUint32 !== 0)
            writer.tag(3, WireType.Varint).uint32(message.optionalUint32);
        /* uint64 optional_uint64 = 4; */
        if (message.optionalUint64 !== "0")
            writer.tag(4, WireType.Varint).uint64(message.optionalUint64);
        /* sint32 optional_sint32 = 5; */
        if (message.optionalSint32 !== 0)
            writer.tag(5, WireType.Varint).sint32(message.optionalSint32);
        /* sint64 optional_sint64 = 6; */
        if (message.optionalSint64 !== "0")
            writer.tag(6, WireType.Varint).sint64(message.optionalSint64);
        /* fixed32 optional_fixed32 = 7; */
        if (message.optionalFixed32 !== 0)
            writer.tag(7, WireType.Bit32).fixed32(message.optionalFixed32);
        /* fixed64 optional_fixed64 = 8; */
        if (message.optionalFixed64 !== "0")
            writer.tag(8, WireType.Bit64).fixed64(message.optionalFixed64);
        /* sfixed32 optional_sfixed32 = 9; */
        if (message.optionalSfixed32 !== 0)
            writer.tag(9, WireType.Bit32).sfixed32(message.optionalSfixed32);
        /* sfixed64 optional_sfixed64 = 10; */
        if (message.optionalSfixed64 !== "0")
            writer.tag(10, WireType.Bit64).sfixed64(message.optionalSfixed64);
        /* float optional_float = 11; */
        if (message.optionalFloat !== 0)
            writer.tag(11, WireType.Bit32).float(message.optionalFloat);
        /* double optional_double = 12; */
        if (message.optionalDouble !== 0)
            writer.tag(12, WireType.Bit64).double(message.optionalDouble);
        /* bool optional_bool = 13; */
        if (message.optionalBool !== false)
            writer.tag(13, WireType.Varint).bool(message.optionalBool);
        /* string optional_string = 14; */
        if (message.optionalString !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.optionalString);
        /* bytes optional_bytes = 15; */
        if (message.optionalBytes.length)
            writer.tag(15, WireType.LengthDelimited).bytes(message.optionalBytes);
        /* proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage optional_nested_message = 18; */
        if (message.optionalNestedMessage)
            TestAllTypes_NestedMessage.internalBinaryWrite(message.optionalNestedMessage, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* proto2_nofieldpresence_unittest.ForeignMessage optional_foreign_message = 19; */
        if (message.optionalForeignMessage)
            ForeignMessage.internalBinaryWrite(message.optionalForeignMessage, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* protobuf_unittest.TestAllTypes optional_proto2_message = 20; */
        if (message.optionalProto2Message)
            TestAllTypes$.internalBinaryWrite(message.optionalProto2Message, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* proto2_nofieldpresence_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21; */
        if (message.optionalNestedEnum !== 0)
            writer.tag(21, WireType.Varint).int32(message.optionalNestedEnum);
        /* proto2_nofieldpresence_unittest.ForeignEnum optional_foreign_enum = 22; */
        if (message.optionalForeignEnum !== 0)
            writer.tag(22, WireType.Varint).int32(message.optionalForeignEnum);
        /* string optional_string_piece = 24; */
        if (message.optionalStringPiece !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.optionalStringPiece);
        /* string optional_cord = 25; */
        if (message.optionalCord !== "")
            writer.tag(25, WireType.LengthDelimited).string(message.optionalCord);
        /* proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage optional_lazy_message = 30; */
        if (message.optionalLazyMessage)
            TestAllTypes_NestedMessage.internalBinaryWrite(message.optionalLazyMessage, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 repeated_int32 = 31; */
        if (message.repeatedInt32.length) {
            writer.tag(31, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedInt32.length; i++)
                writer.int32(message.repeatedInt32[i]);
            writer.join();
        }
        /* repeated int64 repeated_int64 = 32; */
        if (message.repeatedInt64.length) {
            writer.tag(32, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedInt64.length; i++)
                writer.int64(message.repeatedInt64[i]);
            writer.join();
        }
        /* repeated uint32 repeated_uint32 = 33; */
        if (message.repeatedUint32.length) {
            writer.tag(33, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedUint32.length; i++)
                writer.uint32(message.repeatedUint32[i]);
            writer.join();
        }
        /* repeated uint64 repeated_uint64 = 34; */
        if (message.repeatedUint64.length) {
            writer.tag(34, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedUint64.length; i++)
                writer.uint64(message.repeatedUint64[i]);
            writer.join();
        }
        /* repeated sint32 repeated_sint32 = 35; */
        if (message.repeatedSint32.length) {
            writer.tag(35, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedSint32.length; i++)
                writer.sint32(message.repeatedSint32[i]);
            writer.join();
        }
        /* repeated sint64 repeated_sint64 = 36; */
        if (message.repeatedSint64.length) {
            writer.tag(36, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedSint64.length; i++)
                writer.sint64(message.repeatedSint64[i]);
            writer.join();
        }
        /* repeated fixed32 repeated_fixed32 = 37; */
        if (message.repeatedFixed32.length) {
            writer.tag(37, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedFixed32.length; i++)
                writer.fixed32(message.repeatedFixed32[i]);
            writer.join();
        }
        /* repeated fixed64 repeated_fixed64 = 38; */
        if (message.repeatedFixed64.length) {
            writer.tag(38, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedFixed64.length; i++)
                writer.fixed64(message.repeatedFixed64[i]);
            writer.join();
        }
        /* repeated sfixed32 repeated_sfixed32 = 39; */
        if (message.repeatedSfixed32.length) {
            writer.tag(39, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedSfixed32.length; i++)
                writer.sfixed32(message.repeatedSfixed32[i]);
            writer.join();
        }
        /* repeated sfixed64 repeated_sfixed64 = 40; */
        if (message.repeatedSfixed64.length) {
            writer.tag(40, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedSfixed64.length; i++)
                writer.sfixed64(message.repeatedSfixed64[i]);
            writer.join();
        }
        /* repeated float repeated_float = 41; */
        if (message.repeatedFloat.length) {
            writer.tag(41, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedFloat.length; i++)
                writer.float(message.repeatedFloat[i]);
            writer.join();
        }
        /* repeated double repeated_double = 42; */
        if (message.repeatedDouble.length) {
            writer.tag(42, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedDouble.length; i++)
                writer.double(message.repeatedDouble[i]);
            writer.join();
        }
        /* repeated bool repeated_bool = 43; */
        if (message.repeatedBool.length) {
            writer.tag(43, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedBool.length; i++)
                writer.bool(message.repeatedBool[i]);
            writer.join();
        }
        /* repeated string repeated_string = 44; */
        for (let i = 0; i < message.repeatedString.length; i++)
            writer.tag(44, WireType.LengthDelimited).string(message.repeatedString[i]);
        /* repeated bytes repeated_bytes = 45; */
        for (let i = 0; i < message.repeatedBytes.length; i++)
            writer.tag(45, WireType.LengthDelimited).bytes(message.repeatedBytes[i]);
        /* repeated proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48; */
        for (let i = 0; i < message.repeatedNestedMessage.length; i++)
            TestAllTypes_NestedMessage.internalBinaryWrite(message.repeatedNestedMessage[i], writer.tag(48, WireType.LengthDelimited).fork(), options).join();
        /* repeated proto2_nofieldpresence_unittest.ForeignMessage repeated_foreign_message = 49; */
        for (let i = 0; i < message.repeatedForeignMessage.length; i++)
            ForeignMessage.internalBinaryWrite(message.repeatedForeignMessage[i], writer.tag(49, WireType.LengthDelimited).fork(), options).join();
        /* repeated protobuf_unittest.TestAllTypes repeated_proto2_message = 50; */
        for (let i = 0; i < message.repeatedProto2Message.length; i++)
            TestAllTypes$.internalBinaryWrite(message.repeatedProto2Message[i], writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        /* repeated proto2_nofieldpresence_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51; */
        if (message.repeatedNestedEnum.length) {
            writer.tag(51, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedNestedEnum.length; i++)
                writer.int32(message.repeatedNestedEnum[i]);
            writer.join();
        }
        /* repeated proto2_nofieldpresence_unittest.ForeignEnum repeated_foreign_enum = 52; */
        if (message.repeatedForeignEnum.length) {
            writer.tag(52, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.repeatedForeignEnum.length; i++)
                writer.int32(message.repeatedForeignEnum[i]);
            writer.join();
        }
        /* repeated string repeated_string_piece = 54; */
        for (let i = 0; i < message.repeatedStringPiece.length; i++)
            writer.tag(54, WireType.LengthDelimited).string(message.repeatedStringPiece[i]);
        /* repeated string repeated_cord = 55; */
        for (let i = 0; i < message.repeatedCord.length; i++)
            writer.tag(55, WireType.LengthDelimited).string(message.repeatedCord[i]);
        /* repeated proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57; */
        for (let i = 0; i < message.repeatedLazyMessage.length; i++)
            TestAllTypes_NestedMessage.internalBinaryWrite(message.repeatedLazyMessage[i], writer.tag(57, WireType.LengthDelimited).fork(), options).join();
        /* uint32 oneof_uint32 = 111; */
        if (message.oneofField.oneofKind === "oneofUint32")
            writer.tag(111, WireType.Varint).uint32(message.oneofField.oneofUint32);
        /* proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112; */
        if (message.oneofField.oneofKind === "oneofNestedMessage")
            TestAllTypes_NestedMessage.internalBinaryWrite(message.oneofField.oneofNestedMessage, writer.tag(112, WireType.LengthDelimited).fork(), options).join();
        /* string oneof_string = 113; */
        if (message.oneofField.oneofKind === "oneofString")
            writer.tag(113, WireType.LengthDelimited).string(message.oneofField.oneofString);
        /* proto2_nofieldpresence_unittest.TestAllTypes.NestedEnum oneof_enum = 114; */
        if (message.oneofField.oneofKind === "oneofEnum")
            writer.tag(114, WireType.Varint).int32(message.oneofField.oneofEnum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto2_nofieldpresence_unittest.TestAllTypes
 */
export const TestAllTypes = new TestAllTypes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestAllTypes_NestedMessage$Type extends MessageType<TestAllTypes_NestedMessage> {
    constructor() {
        super("proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage", [
            { no: 1, name: "bb", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestAllTypes_NestedMessage>): TestAllTypes_NestedMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bb = 0;
        if (value !== undefined)
            reflectionMergePartial<TestAllTypes_NestedMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestAllTypes_NestedMessage): TestAllTypes_NestedMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 bb */ 1:
                    message.bb = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestAllTypes_NestedMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 bb = 1; */
        if (message.bb !== 0)
            writer.tag(1, WireType.Varint).int32(message.bb);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto2_nofieldpresence_unittest.TestAllTypes.NestedMessage
 */
export const TestAllTypes_NestedMessage = new TestAllTypes_NestedMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestProto2Required$Type extends MessageType<TestProto2Required> {
    constructor() {
        super("proto2_nofieldpresence_unittest.TestProto2Required", [
            { no: 1, name: "proto2", kind: "message", T: () => TestRequired }
        ]);
    }
    create(value?: PartialMessage<TestProto2Required>): TestProto2Required {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TestProto2Required>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestProto2Required): TestProto2Required {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protobuf_unittest.TestRequired proto2 */ 1:
                    message.proto2 = TestRequired.internalBinaryRead(reader, reader.uint32(), options, message.proto2);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestProto2Required, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protobuf_unittest.TestRequired proto2 = 1; */
        if (message.proto2)
            TestRequired.internalBinaryWrite(message.proto2, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto2_nofieldpresence_unittest.TestProto2Required
 */
export const TestProto2Required = new TestProto2Required$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForeignMessage$Type extends MessageType<ForeignMessage> {
    constructor() {
        super("proto2_nofieldpresence_unittest.ForeignMessage", [
            { no: 1, name: "c", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ForeignMessage>): ForeignMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.c = 0;
        if (value !== undefined)
            reflectionMergePartial<ForeignMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForeignMessage): ForeignMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 c */ 1:
                    message.c = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForeignMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 c = 1; */
        if (message.c !== 0)
            writer.tag(1, WireType.Varint).int32(message.c);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto2_nofieldpresence_unittest.ForeignMessage
 */
export const ForeignMessage = new ForeignMessage$Type();
