// @generated by protobuf-ts 2.9.5 with parameter force_optimize_speed,long_type_string
// @generated from protobuf file "service-annotated.proto" (package "spec", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message spec.AnnoGetRequest
 */
export interface AnnoGetRequest {
}
/**
 * @generated from protobuf message spec.AnnoGetResponse
 */
export interface AnnoGetResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class AnnoGetRequest$Type extends MessageType<AnnoGetRequest> {
    constructor() {
        super("spec.AnnoGetRequest", []);
    }
    create(value?: PartialMessage<AnnoGetRequest>): AnnoGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AnnoGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnnoGetRequest): AnnoGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnnoGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.AnnoGetRequest
 */
export const AnnoGetRequest = new AnnoGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnnoGetResponse$Type extends MessageType<AnnoGetResponse> {
    constructor() {
        super("spec.AnnoGetResponse", []);
    }
    create(value?: PartialMessage<AnnoGetResponse>): AnnoGetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AnnoGetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnnoGetResponse): AnnoGetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnnoGetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.AnnoGetResponse
 */
export const AnnoGetResponse = new AnnoGetResponse$Type();
/**
 * @generated ServiceType for protobuf service spec.AnnotatedService
 */
export const AnnotatedService = new ServiceType("spec.AnnotatedService", [
    { name: "Get", idempotency: "NO_SIDE_EFFECTS", options: { "google.api.http": { get: "/v1/{name=messages/*}", additionalBindings: [{ get: "xxx" }, { get: "yyy" }] }, "spec.rpc_foo": true, "spec.rpc_bar": "hello", "spec.rpc_baz": 9, "spec.rpc_bay": 10 }, I: AnnoGetRequest, O: AnnoGetResponse }
], { "spec.service_foo": true });
