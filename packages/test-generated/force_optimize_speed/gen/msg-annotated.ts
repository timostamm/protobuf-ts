// @generated by protobuf-ts 2.9.5 with parameter force_optimize_speed,long_type_string
// @generated from protobuf file "msg-annotated.proto" (package "spec", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * An annotation message, used by the extension field "spec.field_ui"
 * which extends google.protobuf.FieldOptions
 *
 * @generated from protobuf message spec.FieldUiBehaviour
 */
export interface FieldUiBehaviour {
    /**
     * @generated from protobuf field: string label = 2;
     */
    label: string;
    /**
     * @generated from protobuf field: bool required = 3;
     */
    required: boolean;
    /**
     * @generated from protobuf field: spec.FieldUiBehaviour.DataSource autocomplete = 4;
     */
    autocomplete?: FieldUiBehaviour_DataSource;
}
/**
 * @generated from protobuf message spec.FieldUiBehaviour.DataSource
 */
export interface FieldUiBehaviour_DataSource {
    /**
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
    /**
     * @generated from protobuf field: string method_name = 2;
     */
    methodName: string;
    /**
     * @generated from protobuf field: string request_field_name = 3;
     */
    requestFieldName: string;
}
/**
 * shows the usage of custom field options
 *
 * @generated from protobuf message spec.AnnotatedMessage
 */
export interface AnnotatedMessage {
    /**
     * @generated from protobuf field: int32 not_annotated = 1;
     */
    notAnnotated: number;
    /**
     * annotated with the "spec.field_ui" field option
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * scalar annotations
     *
     * @generated from protobuf field: int32 ann_scalar = 3;
     */
    annScalar: number;
    /**
     * @generated from protobuf field: int32 ann_repeated_scalar = 4;
     */
    annRepeatedScalar: number;
    /**
     * enum annotations
     *
     * @generated from protobuf field: int32 ann_enum = 5;
     */
    annEnum: number;
    /**
     * @generated from protobuf field: int32 ann_enum_zero = 6;
     */
    annEnumZero: number;
    /**
     * @generated from protobuf field: int32 ann_repeated_enum = 7;
     */
    annRepeatedEnum: number;
    /**
     * annotated with a field option defined right in the message
     *
     * @generated from protobuf field: int32 ann_local = 10;
     */
    annLocal: number;
}
/**
 * Used for options
 *
 * @generated from protobuf enum spec.OptionEnum
 */
export enum OptionEnum {
    /**
     * @generated from protobuf enum value: OPTION_ENUM_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: OPTION_ENUM_YES = 1;
     */
    YES = 1,
    /**
     * @generated from protobuf enum value: OPTION_ENUM_NO = 2;
     */
    NO = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class FieldUiBehaviour$Type extends MessageType<FieldUiBehaviour> {
    constructor() {
        super("spec.FieldUiBehaviour", [
            { no: 2, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "autocomplete", kind: "message", T: () => FieldUiBehaviour_DataSource }
        ]);
    }
    create(value?: PartialMessage<FieldUiBehaviour>): FieldUiBehaviour {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.label = "";
        message.required = false;
        if (value !== undefined)
            reflectionMergePartial<FieldUiBehaviour>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldUiBehaviour): FieldUiBehaviour {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string label */ 2:
                    message.label = reader.string();
                    break;
                case /* bool required */ 3:
                    message.required = reader.bool();
                    break;
                case /* spec.FieldUiBehaviour.DataSource autocomplete */ 4:
                    message.autocomplete = FieldUiBehaviour_DataSource.internalBinaryRead(reader, reader.uint32(), options, message.autocomplete);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldUiBehaviour, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string label = 2; */
        if (message.label !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.label);
        /* bool required = 3; */
        if (message.required !== false)
            writer.tag(3, WireType.Varint).bool(message.required);
        /* spec.FieldUiBehaviour.DataSource autocomplete = 4; */
        if (message.autocomplete)
            FieldUiBehaviour_DataSource.internalBinaryWrite(message.autocomplete, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.FieldUiBehaviour
 */
export const FieldUiBehaviour = new FieldUiBehaviour$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldUiBehaviour_DataSource$Type extends MessageType<FieldUiBehaviour_DataSource> {
    constructor() {
        super("spec.FieldUiBehaviour.DataSource", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "method_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "request_field_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FieldUiBehaviour_DataSource>): FieldUiBehaviour_DataSource {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceName = "";
        message.methodName = "";
        message.requestFieldName = "";
        if (value !== undefined)
            reflectionMergePartial<FieldUiBehaviour_DataSource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldUiBehaviour_DataSource): FieldUiBehaviour_DataSource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                case /* string method_name */ 2:
                    message.methodName = reader.string();
                    break;
                case /* string request_field_name */ 3:
                    message.requestFieldName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldUiBehaviour_DataSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        /* string method_name = 2; */
        if (message.methodName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.methodName);
        /* string request_field_name = 3; */
        if (message.requestFieldName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.requestFieldName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.FieldUiBehaviour.DataSource
 */
export const FieldUiBehaviour_DataSource = new FieldUiBehaviour_DataSource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnnotatedMessage$Type extends MessageType<AnnotatedMessage> {
    constructor() {
        super("spec.AnnotatedMessage", [
            { no: 1, name: "not_annotated", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "spec.field_ui": { label: "User name", required: true, autocomplete: { serviceName: "example.SomeService", methodName: "autocompleteUsername", requestFieldName: "entered_text" } } } },
            { no: 3, name: "ann_scalar", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "spec.opt_bool": true, "spec.opt_uint32": 123, "spec.opt_uint64": "123456", "spec.opt_string": "my string" } },
            { no: 4, name: "ann_repeated_scalar", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "spec.opt_repeated_bool": [true, false], "spec.opt_repeated_uint32": [123, 456], "spec.opt_repeated_uint64": ["123456", "789101112"], "spec.opt_repeated_string": ["hello...", "...world"] } },
            { no: 5, name: "ann_enum", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "spec.opt_enum": "OPTION_ENUM_YES" } },
            { no: 6, name: "ann_enum_zero", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "spec.opt_enum": "OPTION_ENUM_UNSPECIFIED" } },
            { no: 7, name: "ann_repeated_enum", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "spec.opt_repeated_enum": ["OPTION_ENUM_YES", "OPTION_ENUM_NO"] } },
            { no: 10, name: "ann_local", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "spec.AnnotatedMessage.local_opt": true } }
        ], { "spec.opt_example": true });
    }
    create(value?: PartialMessage<AnnotatedMessage>): AnnotatedMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notAnnotated = 0;
        message.userName = "";
        message.annScalar = 0;
        message.annRepeatedScalar = 0;
        message.annEnum = 0;
        message.annEnumZero = 0;
        message.annRepeatedEnum = 0;
        message.annLocal = 0;
        if (value !== undefined)
            reflectionMergePartial<AnnotatedMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnnotatedMessage): AnnotatedMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 not_annotated */ 1:
                    message.notAnnotated = reader.int32();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* int32 ann_scalar */ 3:
                    message.annScalar = reader.int32();
                    break;
                case /* int32 ann_repeated_scalar */ 4:
                    message.annRepeatedScalar = reader.int32();
                    break;
                case /* int32 ann_enum */ 5:
                    message.annEnum = reader.int32();
                    break;
                case /* int32 ann_enum_zero */ 6:
                    message.annEnumZero = reader.int32();
                    break;
                case /* int32 ann_repeated_enum */ 7:
                    message.annRepeatedEnum = reader.int32();
                    break;
                case /* int32 ann_local */ 10:
                    message.annLocal = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnnotatedMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 not_annotated = 1; */
        if (message.notAnnotated !== 0)
            writer.tag(1, WireType.Varint).int32(message.notAnnotated);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* int32 ann_scalar = 3; */
        if (message.annScalar !== 0)
            writer.tag(3, WireType.Varint).int32(message.annScalar);
        /* int32 ann_repeated_scalar = 4; */
        if (message.annRepeatedScalar !== 0)
            writer.tag(4, WireType.Varint).int32(message.annRepeatedScalar);
        /* int32 ann_enum = 5; */
        if (message.annEnum !== 0)
            writer.tag(5, WireType.Varint).int32(message.annEnum);
        /* int32 ann_enum_zero = 6; */
        if (message.annEnumZero !== 0)
            writer.tag(6, WireType.Varint).int32(message.annEnumZero);
        /* int32 ann_repeated_enum = 7; */
        if (message.annRepeatedEnum !== 0)
            writer.tag(7, WireType.Varint).int32(message.annRepeatedEnum);
        /* int32 ann_local = 10; */
        if (message.annLocal !== 0)
            writer.tag(10, WireType.Varint).int32(message.annLocal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.AnnotatedMessage
 */
export const AnnotatedMessage = new AnnotatedMessage$Type();
