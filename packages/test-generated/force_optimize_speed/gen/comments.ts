// @generated by protobuf-ts 2.9.5 with parameter force_optimize_speed,long_type_string
// @generated from protobuf file "comments.proto" (package "spec", syntax proto3)
// tslint:disable
//
// @formatter:off
//
//
// Comment after syntax.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// Comment after package.

// Comment between package and message.

/**
 * Comment before message.
 *
 * @generated from protobuf message spec.MessageWithComments
 */
export interface MessageWithComments {
    // 
    // Comment after start of message,
    // with funny indentation,
    // and empty lines on start and end.
    // 

    /**
     * Comment before field with 5 lines:
     * line 2, next is empty
     *
     * line 4, next is empty
     *
     *
     * @generated from protobuf field: string foo = 1;
     */
    foo: string; // Comment next to field.
    /**
     * @generated from protobuf oneof: result
     */
    result: {
        oneofKind: "value";
        /**
         * @generated from protobuf field: int32 value = 2;
         */
        value: number;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: string error = 3;
         */
        error: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: string this_field_has_an_empty_comment = 4;
     */
    thisFieldHasAnEmptyComment: string;
    /**
     * @deprecated
     * @generated from protobuf field: string this_field_is_deprecated = 5 [deprecated = true, json_name = "sdf"];
     */
    thisFieldIsDeprecated: string;
}
/**
 * Comment within empty message.
 *
 * @generated from protobuf message spec.EmptyMessageWithComment
 */
export interface EmptyMessageWithComment {
}
/**
 * see https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/descriptor.proto
 *
 * @generated from protobuf message spec.GoogleCommentExample
 */
export interface GoogleCommentExample {
    /**
     * @generated from protobuf field: int32 foo = 1;
     */
    foo: number; // Comment attached to foo.
    /**
     * Comment attached to bar.
     *
     * @generated from protobuf field: int32 bar = 2;
     */
    bar: number;
    /**
     * @generated from protobuf field: string baz = 3;
     */
    baz: string; // Comment attached to baz.
    // Another line attached to baz.
    /**
     * Comment attached to qux.
     *
     * Another line attached to qux.
     *
     * @generated from protobuf field: double qux = 4;
     */
    qux: number;
    // Detached comment for corge. This is not leading or trailing comments
    // to qux or corge because there are blank lines separating it from
    // both.

    // Detached comment for corge paragraph 2.

    /**
     * @generated from protobuf field: string corge = 5;
     */
    corge: string; // Block comment attached
    // to corge.  Leading asterisks
    // will be removed. 
    /**
     * Block comment attached to
     * grault.
     *
     * @generated from protobuf field: int32 grault = 6;
     */
    grault: number;
}
// Comment between message and enum.

/**
 * Leading comment for enum.
 *
 * Comment between start of enum and first value.
 *
 * @generated from protobuf enum spec.EnumWithComments
 */
export enum EnumWithComments {
    /**
     * Comment before enum value.
     *
     * Comment next to enum value.
     *
     * @generated from protobuf enum value: VALUE = 0;
     */
    VALUE = 0
}
/**
 * Leading comment for deprecated enum
 *
 * @deprecated
 * @generated from protobuf enum spec.DeprecatedEnumWithComment
 */
export enum DeprecatedEnumWithComment {
    /**
     * @generated from protobuf enum value: DEPRECATED_ENUM_WITH_COMMENT_A = 0;
     */
    DEPRECATED_ENUM_WITH_COMMENT_A = 0,
    /**
     * @generated from protobuf enum value: DEPRECATED_ENUM_WITH_COMMENT_B = 1;
     */
    DEPRECATED_ENUM_WITH_COMMENT_B = 1
}
/**
 * @deprecated
 * @generated from protobuf enum spec.DeprecatedEnumNoComment
 */
export enum DeprecatedEnumNoComment {
    /**
     * @generated from protobuf enum value: DEPRECATED_ENUM_NO_COMMENT_A = 0;
     */
    DEPRECATED_ENUM_NO_COMMENT_A = 0,
    /**
     * @generated from protobuf enum value: DEPRECATED_ENUM_NO_COMMENT_B = 1;
     */
    DEPRECATED_ENUM_NO_COMMENT_B = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class MessageWithComments$Type extends MessageType<MessageWithComments> {
    constructor() {
        super("spec.MessageWithComments", [
            { no: 1, name: "foo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", oneof: "result", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "error", kind: "scalar", oneof: "result", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "this_field_has_an_empty_comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "this_field_is_deprecated", kind: "scalar", jsonName: "sdf", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MessageWithComments>): MessageWithComments {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.foo = "";
        message.result = { oneofKind: undefined };
        message.thisFieldHasAnEmptyComment = "";
        message.thisFieldIsDeprecated = "";
        if (value !== undefined)
            reflectionMergePartial<MessageWithComments>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageWithComments): MessageWithComments {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string foo */ 1:
                    message.foo = reader.string();
                    break;
                case /* int32 value */ 2:
                    message.result = {
                        oneofKind: "value",
                        value: reader.int32()
                    };
                    break;
                case /* string error */ 3:
                    message.result = {
                        oneofKind: "error",
                        error: reader.string()
                    };
                    break;
                case /* string this_field_has_an_empty_comment */ 4:
                    message.thisFieldHasAnEmptyComment = reader.string();
                    break;
                case /* string this_field_is_deprecated = 5 [deprecated = true, json_name = "sdf"];*/ 5:
                    message.thisFieldIsDeprecated = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageWithComments, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string foo = 1; */
        if (message.foo !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.foo);
        /* int32 value = 2; */
        if (message.result.oneofKind === "value")
            writer.tag(2, WireType.Varint).int32(message.result.value);
        /* string error = 3; */
        if (message.result.oneofKind === "error")
            writer.tag(3, WireType.LengthDelimited).string(message.result.error);
        /* string this_field_has_an_empty_comment = 4; */
        if (message.thisFieldHasAnEmptyComment !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.thisFieldHasAnEmptyComment);
        /* string this_field_is_deprecated = 5 [deprecated = true, json_name = "sdf"]; */
        if (message.thisFieldIsDeprecated !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.thisFieldIsDeprecated);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.MessageWithComments
 */
export const MessageWithComments = new MessageWithComments$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmptyMessageWithComment$Type extends MessageType<EmptyMessageWithComment> {
    constructor() {
        super("spec.EmptyMessageWithComment", []);
    }
    create(value?: PartialMessage<EmptyMessageWithComment>): EmptyMessageWithComment {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EmptyMessageWithComment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmptyMessageWithComment): EmptyMessageWithComment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmptyMessageWithComment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.EmptyMessageWithComment
 */
export const EmptyMessageWithComment = new EmptyMessageWithComment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GoogleCommentExample$Type extends MessageType<GoogleCommentExample> {
    constructor() {
        super("spec.GoogleCommentExample", [
            { no: 1, name: "foo", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "bar", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "baz", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "qux", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "corge", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "grault", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GoogleCommentExample>): GoogleCommentExample {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.foo = 0;
        message.bar = 0;
        message.baz = "";
        message.qux = 0;
        message.corge = "";
        message.grault = 0;
        if (value !== undefined)
            reflectionMergePartial<GoogleCommentExample>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GoogleCommentExample): GoogleCommentExample {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 foo */ 1:
                    message.foo = reader.int32();
                    break;
                case /* int32 bar */ 2:
                    message.bar = reader.int32();
                    break;
                case /* string baz */ 3:
                    message.baz = reader.string();
                    break;
                case /* double qux */ 4:
                    message.qux = reader.double();
                    break;
                case /* string corge */ 5:
                    message.corge = reader.string();
                    break;
                case /* int32 grault */ 6:
                    message.grault = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GoogleCommentExample, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 foo = 1; */
        if (message.foo !== 0)
            writer.tag(1, WireType.Varint).int32(message.foo);
        /* int32 bar = 2; */
        if (message.bar !== 0)
            writer.tag(2, WireType.Varint).int32(message.bar);
        /* string baz = 3; */
        if (message.baz !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.baz);
        /* double qux = 4; */
        if (message.qux !== 0)
            writer.tag(4, WireType.Bit64).double(message.qux);
        /* string corge = 5; */
        if (message.corge !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.corge);
        /* int32 grault = 6; */
        if (message.grault !== 0)
            writer.tag(6, WireType.Varint).int32(message.grault);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.GoogleCommentExample
 */
export const GoogleCommentExample = new GoogleCommentExample$Type();
