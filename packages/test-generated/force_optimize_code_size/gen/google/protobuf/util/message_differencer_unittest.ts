// @generated by protobuf-ts 2.9.5 with parameter force_optimize_code_size
// @generated from protobuf file "google/protobuf/util/message_differencer_unittest.proto" (package "protobuf_unittest", syntax proto2)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//
// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// This file contains messages for testing repeated field comparison
//
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../any";
/**
 * @generated from protobuf message protobuf_unittest.TestField
 */
export interface TestField {
    /**
     * @generated from protobuf field: optional int32 a = 3;
     */
    a?: number;
    /**
     * @generated from protobuf field: optional int32 b = 4;
     */
    b?: number;
    /**
     * @generated from protobuf field: optional int32 c = 1;
     */
    c?: number;
    /**
     * @generated from protobuf field: repeated int32 rc = 2;
     */
    rc: number[];
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestField m = 5;
     */
    m?: TestField;
}
/**
 * @generated from protobuf message protobuf_unittest.TestDiffMessage
 */
export interface TestDiffMessage {
    /**
     * @deprecated
     * @generated from protobuf field: optional int32 v = 13 [deprecated = true];
     */
    v?: number;
    /**
     * @generated from protobuf field: optional string w = 14;
     */
    w?: string;
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestField m = 15;
     */
    m?: TestField;
    /**
     * @generated from protobuf field: repeated int32 rv = 11;
     */
    rv: number[]; // Test for combinations
    /**
     * @generated from protobuf field: repeated string rw = 10;
     */
    rw: string[]; // Test for combinations
    /**
     * @deprecated
     * @generated from protobuf field: repeated protobuf_unittest.TestField rm = 12 [deprecated = true];
     */
    rm: TestField[]; // Test for combinations
    /**
     * @generated from protobuf field: repeated google.protobuf.Any rany = 16;
     */
    rany: Any[]; // Test for repeated Any type resolution
}
/**
 * @generated from protobuf message protobuf_unittest.TestDiffMessage.Item
 */
export interface TestDiffMessage_Item {
    /**
     * @generated from protobuf field: optional int32 a = 2;
     */
    a?: number; // Test basic repeated field comparison.
    /**
     * @generated from protobuf field: optional string b = 4;
     */
    b?: string; // Test basic repeated field comparison.
    /**
     * @generated from protobuf field: repeated int32 ra = 3;
     */
    ra: number[]; // Test SetOfSet Comparison.
    /**
     * @generated from protobuf field: repeated string rb = 5;
     */
    rb: string[]; // Test TreatAsMap when key is repeated
    /**
     * @generated from protobuf field: optional protobuf_unittest.TestField m = 6;
     */
    m?: TestField; // Test TreatAsMap when key is a message
    /**
     * @generated from protobuf field: repeated protobuf_unittest.TestField rm = 7;
     */
    rm: TestField[]; // Test TreatAsMap when key is a repeated
}
// @generated message type with reflection information, may provide speed optimized methods
class TestField$Type extends MessageType<TestField> {
    constructor() {
        super("protobuf_unittest.TestField", [
            { no: 3, name: "a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "b", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "c", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "rc", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "m", kind: "message", T: () => TestField }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestField
 */
export const TestField = new TestField$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestDiffMessage$Type extends MessageType<TestDiffMessage> {
    constructor() {
        super("protobuf_unittest.TestDiffMessage", [
            { no: 13, name: "v", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "w", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "m", kind: "message", T: () => TestField },
            { no: 11, name: "rv", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "rw", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "rm", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestField },
            { no: 16, name: "rany", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Any }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestDiffMessage
 */
export const TestDiffMessage = new TestDiffMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestDiffMessage_Item$Type extends MessageType<TestDiffMessage_Item> {
    constructor() {
        super("protobuf_unittest.TestDiffMessage.Item", [
            { no: 2, name: "a", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "b", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ra", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "rb", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "m", kind: "message", T: () => TestField },
            { no: 7, name: "rm", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestField }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protobuf_unittest.TestDiffMessage.Item
 */
export const TestDiffMessage_Item = new TestDiffMessage_Item$Type();
