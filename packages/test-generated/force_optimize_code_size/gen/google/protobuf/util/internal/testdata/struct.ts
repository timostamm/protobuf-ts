// @generated by protobuf-ts 2.9.5 with parameter force_optimize_code_size
// @generated from protobuf file "google/protobuf/util/internal/testdata/struct.proto" (package "proto_util_converter.testing", syntax proto3)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { ListValue } from "../../../struct";
import { Value } from "../../../struct";
import { Struct } from "../../../struct";
/**
 * @generated from protobuf message proto_util_converter.testing.StructTestCases
 */
export interface StructTestCases {
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructWrapper empty_value = 1;
     */
    emptyValue?: StructWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructWrapper empty_value2 = 2;
     */
    emptyValue2?: StructWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructWrapper null_value = 3;
     */
    nullValue?: StructWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructWrapper simple_struct = 4;
     */
    simpleStruct?: StructWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructWrapper longer_struct = 5;
     */
    longerStruct?: StructWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructWrapper struct_with_nested_struct = 6;
     */
    structWithNestedStruct?: StructWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructWrapper struct_with_nested_list = 7;
     */
    structWithNestedList?: StructWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructWrapper struct_with_list_of_nulls = 8;
     */
    structWithListOfNulls?: StructWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructWrapper struct_with_list_of_lists = 9;
     */
    structWithListOfLists?: StructWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructWrapper struct_with_list_of_structs = 10;
     */
    structWithListOfStructs?: StructWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructWrapper struct_with_empty_list = 11;
     */
    structWithEmptyList?: StructWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StructWrapper struct_with_list_with_empty_struct = 12;
     */
    structWithListWithEmptyStruct?: StructWrapper;
    /**
     * @generated from protobuf field: google.protobuf.Struct top_level_struct = 13;
     */
    topLevelStruct?: Struct;
    /**
     * @generated from protobuf field: google.protobuf.Struct top_level_struct_with_empty_list = 14;
     */
    topLevelStructWithEmptyList?: Struct;
    /**
     * @generated from protobuf field: google.protobuf.Struct top_level_struct_with_list_with_empty_struct = 15;
     */
    topLevelStructWithListWithEmptyStruct?: Struct;
    /**
     * @generated from protobuf field: proto_util_converter.testing.ValueWrapper value_wrapper_simple = 16;
     */
    valueWrapperSimple?: ValueWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.ValueWrapper value_wrapper_with_struct = 17;
     */
    valueWrapperWithStruct?: ValueWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.ValueWrapper value_wrapper_with_list = 18;
     */
    valueWrapperWithList?: ValueWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.ValueWrapper value_wrapper_with_empty_list = 19;
     */
    valueWrapperWithEmptyList?: ValueWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.ValueWrapper value_wrapper_with_list_with_empty_struct = 20;
     */
    valueWrapperWithListWithEmptyStruct?: ValueWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.ListValueWrapper list_value_wrapper = 21;
     */
    listValueWrapper?: ListValueWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.ListValueWrapper list_value_wrapper_with_empty_list = 22;
     */
    listValueWrapperWithEmptyList?: ListValueWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.ListValueWrapper list_value_wrapper_with_list_with_empty_struct = 23;
     */
    listValueWrapperWithListWithEmptyStruct?: ListValueWrapper;
    /**
     * @generated from protobuf field: google.protobuf.Value top_level_value_simple = 24;
     */
    topLevelValueSimple?: Value;
    /**
     * @generated from protobuf field: google.protobuf.Value top_level_value_with_struct = 25;
     */
    topLevelValueWithStruct?: Value;
    /**
     * @generated from protobuf field: google.protobuf.Value top_level_value_with_list = 26;
     */
    topLevelValueWithList?: Value;
    /**
     * @generated from protobuf field: google.protobuf.Value top_level_value_with_empty_list = 27;
     */
    topLevelValueWithEmptyList?: Value;
    /**
     * @generated from protobuf field: google.protobuf.Value top_level_value_with_list_with_empty_struct = 28;
     */
    topLevelValueWithListWithEmptyStruct?: Value;
    /**
     * @generated from protobuf field: google.protobuf.ListValue top_level_listvalue = 29;
     */
    topLevelListvalue?: ListValue;
    /**
     * @generated from protobuf field: google.protobuf.ListValue top_level_empty_listvalue = 30;
     */
    topLevelEmptyListvalue?: ListValue;
    /**
     * @generated from protobuf field: google.protobuf.ListValue top_level_listvalue_with_empty_struct = 31;
     */
    topLevelListvalueWithEmptyStruct?: ListValue;
    /**
     * @generated from protobuf field: proto_util_converter.testing.RepeatedValueWrapper repeated_value = 32;
     */
    repeatedValue?: RepeatedValueWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list = 33;
     */
    repeatedValueNestedList?: RepeatedValueWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list2 = 34;
     */
    repeatedValueNestedList2?: RepeatedValueWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list3 = 35;
     */
    repeatedValueNestedList3?: RepeatedValueWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.RepeatedListValueWrapper repeated_listvalue = 36;
     */
    repeatedListvalue?: RepeatedListValueWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.MapOfStruct map_of_struct = 37;
     */
    mapOfStruct?: MapOfStruct;
    /**
     * @generated from protobuf field: proto_util_converter.testing.MapOfStruct map_of_struct_value = 38;
     */
    mapOfStructValue?: MapOfStruct;
    /**
     * @generated from protobuf field: proto_util_converter.testing.MapOfStruct map_of_listvalue = 39;
     */
    mapOfListvalue?: MapOfStruct;
}
/**
 * @generated from protobuf message proto_util_converter.testing.StructWrapper
 */
export interface StructWrapper {
    /**
     * @generated from protobuf field: google.protobuf.Struct struct = 1;
     */
    struct?: Struct;
}
/**
 * @generated from protobuf message proto_util_converter.testing.ValueWrapper
 */
export interface ValueWrapper {
    /**
     * @generated from protobuf field: google.protobuf.Value value = 1;
     */
    value?: Value;
}
/**
 * @generated from protobuf message proto_util_converter.testing.RepeatedValueWrapper
 */
export interface RepeatedValueWrapper {
    /**
     * @generated from protobuf field: repeated google.protobuf.Value values = 1;
     */
    values: Value[];
}
/**
 * @generated from protobuf message proto_util_converter.testing.ListValueWrapper
 */
export interface ListValueWrapper {
    /**
     * @generated from protobuf field: google.protobuf.ListValue shopping_list = 1;
     */
    shoppingList?: ListValue;
}
/**
 * @generated from protobuf message proto_util_converter.testing.RepeatedListValueWrapper
 */
export interface RepeatedListValueWrapper {
    /**
     * @generated from protobuf field: repeated google.protobuf.ListValue dimensions = 1;
     */
    dimensions: ListValue[];
}
/**
 * @generated from protobuf message proto_util_converter.testing.MapOfStruct
 */
export interface MapOfStruct {
    /**
     * @generated from protobuf field: map<string, google.protobuf.Struct> struct_map = 1;
     */
    structMap: {
        [key: string]: Struct;
    };
    /**
     * @generated from protobuf field: map<string, google.protobuf.Value> value_map = 2;
     */
    valueMap: {
        [key: string]: Value;
    };
    /**
     * @generated from protobuf field: map<string, google.protobuf.ListValue> listvalue_map = 3;
     */
    listvalueMap: {
        [key: string]: ListValue;
    };
}
/**
 * Hack to test return types with Struct as top-level message. Struct typers
 * cannot be directly used in API requests. Hence using Dummy as request type.
 *
 * @generated from protobuf message proto_util_converter.testing.Dummy
 */
export interface Dummy {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
}
/**
 * @generated from protobuf message proto_util_converter.testing.StructType
 */
export interface StructType {
    /**
     * @generated from protobuf field: google.protobuf.Struct object = 1;
     */
    object?: Struct;
}
// @generated message type with reflection information, may provide speed optimized methods
class StructTestCases$Type extends MessageType<StructTestCases> {
    constructor() {
        super("proto_util_converter.testing.StructTestCases", [
            { no: 1, name: "empty_value", kind: "message", T: () => StructWrapper },
            { no: 2, name: "empty_value2", kind: "message", T: () => StructWrapper },
            { no: 3, name: "null_value", kind: "message", T: () => StructWrapper },
            { no: 4, name: "simple_struct", kind: "message", T: () => StructWrapper },
            { no: 5, name: "longer_struct", kind: "message", T: () => StructWrapper },
            { no: 6, name: "struct_with_nested_struct", kind: "message", T: () => StructWrapper },
            { no: 7, name: "struct_with_nested_list", kind: "message", T: () => StructWrapper },
            { no: 8, name: "struct_with_list_of_nulls", kind: "message", T: () => StructWrapper },
            { no: 9, name: "struct_with_list_of_lists", kind: "message", T: () => StructWrapper },
            { no: 10, name: "struct_with_list_of_structs", kind: "message", T: () => StructWrapper },
            { no: 11, name: "struct_with_empty_list", kind: "message", T: () => StructWrapper },
            { no: 12, name: "struct_with_list_with_empty_struct", kind: "message", T: () => StructWrapper },
            { no: 13, name: "top_level_struct", kind: "message", T: () => Struct },
            { no: 14, name: "top_level_struct_with_empty_list", kind: "message", T: () => Struct },
            { no: 15, name: "top_level_struct_with_list_with_empty_struct", kind: "message", T: () => Struct },
            { no: 16, name: "value_wrapper_simple", kind: "message", T: () => ValueWrapper },
            { no: 17, name: "value_wrapper_with_struct", kind: "message", T: () => ValueWrapper },
            { no: 18, name: "value_wrapper_with_list", kind: "message", T: () => ValueWrapper },
            { no: 19, name: "value_wrapper_with_empty_list", kind: "message", T: () => ValueWrapper },
            { no: 20, name: "value_wrapper_with_list_with_empty_struct", kind: "message", T: () => ValueWrapper },
            { no: 21, name: "list_value_wrapper", kind: "message", T: () => ListValueWrapper },
            { no: 22, name: "list_value_wrapper_with_empty_list", kind: "message", T: () => ListValueWrapper },
            { no: 23, name: "list_value_wrapper_with_list_with_empty_struct", kind: "message", T: () => ListValueWrapper },
            { no: 24, name: "top_level_value_simple", kind: "message", T: () => Value },
            { no: 25, name: "top_level_value_with_struct", kind: "message", T: () => Value },
            { no: 26, name: "top_level_value_with_list", kind: "message", T: () => Value },
            { no: 27, name: "top_level_value_with_empty_list", kind: "message", T: () => Value },
            { no: 28, name: "top_level_value_with_list_with_empty_struct", kind: "message", T: () => Value },
            { no: 29, name: "top_level_listvalue", kind: "message", T: () => ListValue },
            { no: 30, name: "top_level_empty_listvalue", kind: "message", T: () => ListValue },
            { no: 31, name: "top_level_listvalue_with_empty_struct", kind: "message", T: () => ListValue },
            { no: 32, name: "repeated_value", kind: "message", T: () => RepeatedValueWrapper },
            { no: 33, name: "repeated_value_nested_list", kind: "message", T: () => RepeatedValueWrapper },
            { no: 34, name: "repeated_value_nested_list2", kind: "message", T: () => RepeatedValueWrapper },
            { no: 35, name: "repeated_value_nested_list3", kind: "message", T: () => RepeatedValueWrapper },
            { no: 36, name: "repeated_listvalue", kind: "message", T: () => RepeatedListValueWrapper },
            { no: 37, name: "map_of_struct", kind: "message", T: () => MapOfStruct },
            { no: 38, name: "map_of_struct_value", kind: "message", T: () => MapOfStruct },
            { no: 39, name: "map_of_listvalue", kind: "message", T: () => MapOfStruct }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.StructTestCases
 */
export const StructTestCases = new StructTestCases$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StructWrapper$Type extends MessageType<StructWrapper> {
    constructor() {
        super("proto_util_converter.testing.StructWrapper", [
            { no: 1, name: "struct", kind: "message", T: () => Struct }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.StructWrapper
 */
export const StructWrapper = new StructWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValueWrapper$Type extends MessageType<ValueWrapper> {
    constructor() {
        super("proto_util_converter.testing.ValueWrapper", [
            { no: 1, name: "value", kind: "message", T: () => Value }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.ValueWrapper
 */
export const ValueWrapper = new ValueWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RepeatedValueWrapper$Type extends MessageType<RepeatedValueWrapper> {
    constructor() {
        super("proto_util_converter.testing.RepeatedValueWrapper", [
            { no: 1, name: "values", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Value }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.RepeatedValueWrapper
 */
export const RepeatedValueWrapper = new RepeatedValueWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListValueWrapper$Type extends MessageType<ListValueWrapper> {
    constructor() {
        super("proto_util_converter.testing.ListValueWrapper", [
            { no: 1, name: "shopping_list", kind: "message", T: () => ListValue }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.ListValueWrapper
 */
export const ListValueWrapper = new ListValueWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RepeatedListValueWrapper$Type extends MessageType<RepeatedListValueWrapper> {
    constructor() {
        super("proto_util_converter.testing.RepeatedListValueWrapper", [
            { no: 1, name: "dimensions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListValue }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.RepeatedListValueWrapper
 */
export const RepeatedListValueWrapper = new RepeatedListValueWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MapOfStruct$Type extends MessageType<MapOfStruct> {
    constructor() {
        super("proto_util_converter.testing.MapOfStruct", [
            { no: 1, name: "struct_map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Struct } },
            { no: 2, name: "value_map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Value } },
            { no: 3, name: "listvalue_map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ListValue } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.MapOfStruct
 */
export const MapOfStruct = new MapOfStruct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Dummy$Type extends MessageType<Dummy> {
    constructor() {
        super("proto_util_converter.testing.Dummy", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.Dummy
 */
export const Dummy = new Dummy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StructType$Type extends MessageType<StructType> {
    constructor() {
        super("proto_util_converter.testing.StructType", [
            { no: 1, name: "object", kind: "message", T: () => Struct }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.StructType
 */
export const StructType = new StructType$Type();
/**
 * @generated ServiceType for protobuf service proto_util_converter.testing.StructTestService
 */
export const StructTestService = new ServiceType("proto_util_converter.testing.StructTestService", [
    { name: "Call", options: {}, I: Dummy, O: StructTestCases }
]);
