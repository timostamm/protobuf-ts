// @generated by protobuf-ts 2.9.5 with parameter force_optimize_code_size
// @generated from protobuf file "google/protobuf/util/internal/testdata/wrappers.proto" (package "proto_util_converter.testing", syntax proto3)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { BytesValue } from "../../../wrappers";
import { StringValue } from "../../../wrappers";
import { BoolValue } from "../../../wrappers";
import { UInt32Value } from "../../../wrappers";
import { Int32Value } from "../../../wrappers";
import { UInt64Value } from "../../../wrappers";
import { Int64Value } from "../../../wrappers";
import { FloatValue } from "../../../wrappers";
import { DoubleValue } from "../../../wrappers";
/**
 * Top-level test cases proto used by MarshallingTest. See description
 * at the top of the class MarshallingTest for details on how to write
 * test cases.
 *
 * @generated from protobuf message proto_util_converter.testing.WrappersTestCases
 */
export interface WrappersTestCases {
    /**
     * @generated from protobuf field: proto_util_converter.testing.DoubleWrapper double_wrapper = 1;
     */
    doubleWrapper?: DoubleWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FloatWrapper float_wrapper = 2;
     */
    floatWrapper?: FloatWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.Int64Wrapper int64_wrapper = 3;
     */
    int64Wrapper?: Int64Wrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.UInt64Wrapper uint64_wrapper = 4;
     */
    uint64Wrapper?: UInt64Wrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.Int32Wrapper int32_wrapper = 5;
     */
    int32Wrapper?: Int32Wrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.UInt32Wrapper uint32_wrapper = 6;
     */
    uint32Wrapper?: UInt32Wrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.BoolWrapper bool_wrapper = 7;
     */
    boolWrapper?: BoolWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StringWrapper string_wrapper = 8;
     */
    stringWrapper?: StringWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.BytesWrapper bytes_wrapper = 9;
     */
    bytesWrapper?: BytesWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.DoubleWrapper double_wrapper_default = 10;
     */
    doubleWrapperDefault?: DoubleWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FloatWrapper float_wrapper_default = 11;
     */
    floatWrapperDefault?: FloatWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.Int64Wrapper int64_wrapper_default = 12;
     */
    int64WrapperDefault?: Int64Wrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.UInt64Wrapper uint64_wrapper_default = 13;
     */
    uint64WrapperDefault?: UInt64Wrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.Int32Wrapper int32_wrapper_default = 14;
     */
    int32WrapperDefault?: Int32Wrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.UInt32Wrapper uint32_wrapper_default = 15;
     */
    uint32WrapperDefault?: UInt32Wrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.BoolWrapper bool_wrapper_default = 16;
     */
    boolWrapperDefault?: BoolWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.StringWrapper string_wrapper_default = 17;
     */
    stringWrapperDefault?: StringWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.BytesWrapper bytes_wrapper_default = 18;
     */
    bytesWrapperDefault?: BytesWrapper;
}
/**
 * @generated from protobuf message proto_util_converter.testing.DoubleWrapper
 */
export interface DoubleWrapper {
    /**
     * @generated from protobuf field: google.protobuf.DoubleValue double = 1;
     */
    double?: DoubleValue;
}
/**
 * @generated from protobuf message proto_util_converter.testing.FloatWrapper
 */
export interface FloatWrapper {
    /**
     * @generated from protobuf field: google.protobuf.FloatValue float = 1;
     */
    float?: FloatValue;
}
/**
 * @generated from protobuf message proto_util_converter.testing.Int64Wrapper
 */
export interface Int64Wrapper {
    /**
     * @generated from protobuf field: google.protobuf.Int64Value int64 = 1;
     */
    int64?: Int64Value;
}
/**
 * @generated from protobuf message proto_util_converter.testing.UInt64Wrapper
 */
export interface UInt64Wrapper {
    /**
     * @generated from protobuf field: google.protobuf.UInt64Value uint64 = 1;
     */
    uint64?: UInt64Value;
}
/**
 * @generated from protobuf message proto_util_converter.testing.Int32Wrapper
 */
export interface Int32Wrapper {
    /**
     * @generated from protobuf field: google.protobuf.Int32Value int32 = 1;
     */
    int32?: Int32Value;
}
/**
 * @generated from protobuf message proto_util_converter.testing.UInt32Wrapper
 */
export interface UInt32Wrapper {
    /**
     * @generated from protobuf field: google.protobuf.UInt32Value uint32 = 1;
     */
    uint32?: UInt32Value;
}
/**
 * @generated from protobuf message proto_util_converter.testing.BoolWrapper
 */
export interface BoolWrapper {
    /**
     * @generated from protobuf field: google.protobuf.BoolValue bool = 1;
     */
    bool?: BoolValue;
}
/**
 * @generated from protobuf message proto_util_converter.testing.StringWrapper
 */
export interface StringWrapper {
    /**
     * @generated from protobuf field: google.protobuf.StringValue string = 1;
     */
    string?: StringValue;
}
/**
 * @generated from protobuf message proto_util_converter.testing.BytesWrapper
 */
export interface BytesWrapper {
    /**
     * @generated from protobuf field: google.protobuf.BytesValue bytes = 1;
     */
    bytes?: BytesValue;
}
// @generated message type with reflection information, may provide speed optimized methods
class WrappersTestCases$Type extends MessageType<WrappersTestCases> {
    constructor() {
        super("proto_util_converter.testing.WrappersTestCases", [
            { no: 1, name: "double_wrapper", kind: "message", T: () => DoubleWrapper },
            { no: 2, name: "float_wrapper", kind: "message", T: () => FloatWrapper },
            { no: 3, name: "int64_wrapper", kind: "message", T: () => Int64Wrapper },
            { no: 4, name: "uint64_wrapper", kind: "message", T: () => UInt64Wrapper },
            { no: 5, name: "int32_wrapper", kind: "message", T: () => Int32Wrapper },
            { no: 6, name: "uint32_wrapper", kind: "message", T: () => UInt32Wrapper },
            { no: 7, name: "bool_wrapper", kind: "message", T: () => BoolWrapper },
            { no: 8, name: "string_wrapper", kind: "message", T: () => StringWrapper },
            { no: 9, name: "bytes_wrapper", kind: "message", T: () => BytesWrapper },
            { no: 10, name: "double_wrapper_default", kind: "message", T: () => DoubleWrapper },
            { no: 11, name: "float_wrapper_default", kind: "message", T: () => FloatWrapper },
            { no: 12, name: "int64_wrapper_default", kind: "message", T: () => Int64Wrapper },
            { no: 13, name: "uint64_wrapper_default", kind: "message", T: () => UInt64Wrapper },
            { no: 14, name: "int32_wrapper_default", kind: "message", T: () => Int32Wrapper },
            { no: 15, name: "uint32_wrapper_default", kind: "message", T: () => UInt32Wrapper },
            { no: 16, name: "bool_wrapper_default", kind: "message", T: () => BoolWrapper },
            { no: 17, name: "string_wrapper_default", kind: "message", T: () => StringWrapper },
            { no: 18, name: "bytes_wrapper_default", kind: "message", T: () => BytesWrapper }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.WrappersTestCases
 */
export const WrappersTestCases = new WrappersTestCases$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoubleWrapper$Type extends MessageType<DoubleWrapper> {
    constructor() {
        super("proto_util_converter.testing.DoubleWrapper", [
            { no: 1, name: "double", kind: "message", T: () => DoubleValue }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.DoubleWrapper
 */
export const DoubleWrapper = new DoubleWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FloatWrapper$Type extends MessageType<FloatWrapper> {
    constructor() {
        super("proto_util_converter.testing.FloatWrapper", [
            { no: 1, name: "float", kind: "message", T: () => FloatValue }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.FloatWrapper
 */
export const FloatWrapper = new FloatWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Int64Wrapper$Type extends MessageType<Int64Wrapper> {
    constructor() {
        super("proto_util_converter.testing.Int64Wrapper", [
            { no: 1, name: "int64", kind: "message", T: () => Int64Value }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.Int64Wrapper
 */
export const Int64Wrapper = new Int64Wrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UInt64Wrapper$Type extends MessageType<UInt64Wrapper> {
    constructor() {
        super("proto_util_converter.testing.UInt64Wrapper", [
            { no: 1, name: "uint64", kind: "message", T: () => UInt64Value }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.UInt64Wrapper
 */
export const UInt64Wrapper = new UInt64Wrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Int32Wrapper$Type extends MessageType<Int32Wrapper> {
    constructor() {
        super("proto_util_converter.testing.Int32Wrapper", [
            { no: 1, name: "int32", kind: "message", T: () => Int32Value }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.Int32Wrapper
 */
export const Int32Wrapper = new Int32Wrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UInt32Wrapper$Type extends MessageType<UInt32Wrapper> {
    constructor() {
        super("proto_util_converter.testing.UInt32Wrapper", [
            { no: 1, name: "uint32", kind: "message", T: () => UInt32Value }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.UInt32Wrapper
 */
export const UInt32Wrapper = new UInt32Wrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BoolWrapper$Type extends MessageType<BoolWrapper> {
    constructor() {
        super("proto_util_converter.testing.BoolWrapper", [
            { no: 1, name: "bool", kind: "message", T: () => BoolValue }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.BoolWrapper
 */
export const BoolWrapper = new BoolWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StringWrapper$Type extends MessageType<StringWrapper> {
    constructor() {
        super("proto_util_converter.testing.StringWrapper", [
            { no: 1, name: "string", kind: "message", T: () => StringValue }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.StringWrapper
 */
export const StringWrapper = new StringWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BytesWrapper$Type extends MessageType<BytesWrapper> {
    constructor() {
        super("proto_util_converter.testing.BytesWrapper", [
            { no: 1, name: "bytes", kind: "message", T: () => BytesValue }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.BytesWrapper
 */
export const BytesWrapper = new BytesWrapper$Type();
/**
 * @generated ServiceType for protobuf service proto_util_converter.testing.WrappersTestService
 */
export const WrappersTestService = new ServiceType("proto_util_converter.testing.WrappersTestService", [
    { name: "Call", options: {}, I: WrappersTestCases, O: WrappersTestCases }
]);
