// @generated by protobuf-ts 2.9.5 with parameter force_optimize_code_size
// @generated from protobuf file "google/protobuf/util/internal/testdata/field_mask.proto" (package "proto_util_converter.testing", syntax proto3)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { FieldMask } from "../../../field_mask";
/**
 * @generated from protobuf message proto_util_converter.testing.NestedFieldMask
 */
export interface NestedFieldMask {
    /**
     * @generated from protobuf field: string data = 1;
     */
    data: string;
    /**
     * @generated from protobuf field: google.protobuf.FieldMask single_mask = 2;
     */
    singleMask?: FieldMask;
    /**
     * @generated from protobuf field: repeated google.protobuf.FieldMask repeated_mask = 3;
     */
    repeatedMask: FieldMask[];
}
/**
 * @generated from protobuf message proto_util_converter.testing.FieldMaskTest
 */
export interface FieldMaskTest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: google.protobuf.FieldMask single_mask = 2;
     */
    singleMask?: FieldMask;
    /**
     * @generated from protobuf field: repeated google.protobuf.FieldMask repeated_mask = 3;
     */
    repeatedMask: FieldMask[];
    /**
     * @generated from protobuf field: repeated proto_util_converter.testing.NestedFieldMask nested_mask = 4;
     */
    nestedMask: NestedFieldMask[];
}
/**
 * @generated from protobuf message proto_util_converter.testing.FieldMaskTestCases
 */
export interface FieldMaskTestCases {
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper single_mask = 1;
     */
    singleMask?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper multiple_mask = 2;
     */
    multipleMask?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper snake_camel = 3;
     */
    snakeCamel?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper empty_field = 4;
     */
    emptyField?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper apiary_format1 = 5;
     */
    apiaryFormat1?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper apiary_format2 = 6;
     */
    apiaryFormat2?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper apiary_format3 = 7;
     */
    apiaryFormat3?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper map_key1 = 8;
     */
    mapKey1?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper map_key2 = 9;
     */
    mapKey2?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper map_key3 = 10;
     */
    mapKey3?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper map_key4 = 11;
     */
    mapKey4?: FieldMaskWrapper;
    /**
     * @generated from protobuf field: proto_util_converter.testing.FieldMaskWrapper map_key5 = 12;
     */
    mapKey5?: FieldMaskWrapper;
}
/**
 * @generated from protobuf message proto_util_converter.testing.FieldMaskWrapper
 */
export interface FieldMaskWrapper {
    /**
     * @generated from protobuf field: google.protobuf.FieldMask mask = 1;
     */
    mask?: FieldMask;
}
// @generated message type with reflection information, may provide speed optimized methods
class NestedFieldMask$Type extends MessageType<NestedFieldMask> {
    constructor() {
        super("proto_util_converter.testing.NestedFieldMask", [
            { no: 1, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "single_mask", kind: "message", T: () => FieldMask },
            { no: 3, name: "repeated_mask", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FieldMask }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.NestedFieldMask
 */
export const NestedFieldMask = new NestedFieldMask$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldMaskTest$Type extends MessageType<FieldMaskTest> {
    constructor() {
        super("proto_util_converter.testing.FieldMaskTest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "single_mask", kind: "message", T: () => FieldMask },
            { no: 3, name: "repeated_mask", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FieldMask },
            { no: 4, name: "nested_mask", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NestedFieldMask }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.FieldMaskTest
 */
export const FieldMaskTest = new FieldMaskTest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldMaskTestCases$Type extends MessageType<FieldMaskTestCases> {
    constructor() {
        super("proto_util_converter.testing.FieldMaskTestCases", [
            { no: 1, name: "single_mask", kind: "message", T: () => FieldMaskWrapper },
            { no: 2, name: "multiple_mask", kind: "message", T: () => FieldMaskWrapper },
            { no: 3, name: "snake_camel", kind: "message", T: () => FieldMaskWrapper },
            { no: 4, name: "empty_field", kind: "message", T: () => FieldMaskWrapper },
            { no: 5, name: "apiary_format1", kind: "message", T: () => FieldMaskWrapper },
            { no: 6, name: "apiary_format2", kind: "message", T: () => FieldMaskWrapper },
            { no: 7, name: "apiary_format3", kind: "message", T: () => FieldMaskWrapper },
            { no: 8, name: "map_key1", kind: "message", T: () => FieldMaskWrapper },
            { no: 9, name: "map_key2", kind: "message", T: () => FieldMaskWrapper },
            { no: 10, name: "map_key3", kind: "message", T: () => FieldMaskWrapper },
            { no: 11, name: "map_key4", kind: "message", T: () => FieldMaskWrapper },
            { no: 12, name: "map_key5", kind: "message", T: () => FieldMaskWrapper }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.FieldMaskTestCases
 */
export const FieldMaskTestCases = new FieldMaskTestCases$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldMaskWrapper$Type extends MessageType<FieldMaskWrapper> {
    constructor() {
        super("proto_util_converter.testing.FieldMaskWrapper", [
            { no: 1, name: "mask", kind: "message", T: () => FieldMask }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message proto_util_converter.testing.FieldMaskWrapper
 */
export const FieldMaskWrapper = new FieldMaskWrapper$Type();
/**
 * @generated ServiceType for protobuf service proto_util_converter.testing.FieldMaskTestService
 */
export const FieldMaskTestService = new ServiceType("proto_util_converter.testing.FieldMaskTestService", [
    { name: "Call", options: {}, I: FieldMaskTestCases, O: FieldMaskTestCases }
]);
