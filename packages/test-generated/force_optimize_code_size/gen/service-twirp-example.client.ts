// @generated by protobuf-ts 2.9.5 with parameter force_optimize_code_size
// @generated from protobuf file "service-twirp-example.proto" (package "spec.haberdasher", syntax proto3)
// tslint:disable
//
// Twirp example RPC
// https://github.com/twitchtv/twirp-example/blob/c1501aeb89609a522db7d79d4c2e71b6c032af28/rpc/haberdasher/haberdasher.proto
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Haberdasher } from "./service-twirp-example";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Hat } from "./service-twirp-example";
import type { Size } from "./service-twirp-example";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * A Haberdasher makes hats for clients.
 *
 * @generated from protobuf service spec.haberdasher.Haberdasher
 */
export interface IHaberdasherClient {
    /**
     * MakeHat produces a hat of mysterious, randomly-selected color!
     *
     * @generated from protobuf rpc: MakeHat(spec.haberdasher.Size) returns (spec.haberdasher.Hat);
     */
    makeHat(input: Size, options?: RpcOptions): UnaryCall<Size, Hat>;
}
/**
 * A Haberdasher makes hats for clients.
 *
 * @generated from protobuf service spec.haberdasher.Haberdasher
 */
export class HaberdasherClient implements IHaberdasherClient, ServiceInfo {
    typeName = Haberdasher.typeName;
    methods = Haberdasher.methods;
    options = Haberdasher.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * MakeHat produces a hat of mysterious, randomly-selected color!
     *
     * @generated from protobuf rpc: MakeHat(spec.haberdasher.Size) returns (spec.haberdasher.Hat);
     */
    makeHat(input: Size, options?: RpcOptions): UnaryCall<Size, Hat> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Size, Hat>("unary", this._transport, method, opt, input);
    }
}
