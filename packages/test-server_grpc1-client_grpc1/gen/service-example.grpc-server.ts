// @generated by protobuf-ts 2.10.0 with parameter server_grpc1,client_grpc1,optimize_code_size
// @generated from protobuf file "service-example.proto" (package "spec", syntax proto3)
// tslint:disable
import { ExampleResponse } from "./service-example";
import { ExampleRequest } from "./service-example";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service spec.ExampleService
 */
export interface IExampleService extends grpc.UntypedServiceImplementation {
    /**
     * An example unary call.
     *
     * @generated from protobuf rpc: Unary
     */
    unary: grpc.handleUnaryCall<ExampleRequest, ExampleResponse>;
    /**
     * An example server-streaming call.
     *
     * @generated from protobuf rpc: ServerStream
     */
    serverStream: grpc.handleServerStreamingCall<ExampleRequest, ExampleResponse>;
    /**
     * An example client-streaming call.
     *
     * @generated from protobuf rpc: ClientStream
     */
    clientStream: grpc.handleClientStreamingCall<ExampleRequest, ExampleResponse>;
    /**
     * An example bidi-streaming call.
     *
     * @generated from protobuf rpc: Bidi
     */
    bidi: grpc.handleBidiStreamingCall<ExampleRequest, ExampleResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service spec.ExampleService.
 *
 * Usage: Implement the interface IExampleService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IExampleService = ...
 * server.addService(exampleServiceDefinition, service);
 * ```
 */
export const exampleServiceDefinition: grpc.ServiceDefinition<IExampleService> = {
    unary: {
        path: "/spec.ExampleService/Unary",
        originalName: "Unary",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ExampleResponse.fromBinary(bytes),
        requestDeserialize: bytes => ExampleRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ExampleResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ExampleRequest.toBinary(value))
    },
    serverStream: {
        path: "/spec.ExampleService/ServerStream",
        originalName: "ServerStream",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => ExampleResponse.fromBinary(bytes),
        requestDeserialize: bytes => ExampleRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ExampleResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ExampleRequest.toBinary(value))
    },
    clientStream: {
        path: "/spec.ExampleService/ClientStream",
        originalName: "ClientStream",
        requestStream: true,
        responseStream: false,
        responseDeserialize: bytes => ExampleResponse.fromBinary(bytes),
        requestDeserialize: bytes => ExampleRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ExampleResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ExampleRequest.toBinary(value))
    },
    bidi: {
        path: "/spec.ExampleService/Bidi",
        originalName: "Bidi",
        requestStream: true,
        responseStream: true,
        responseDeserialize: bytes => ExampleResponse.fromBinary(bytes),
        requestDeserialize: bytes => ExampleRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ExampleResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ExampleRequest.toBinary(value))
    }
};
