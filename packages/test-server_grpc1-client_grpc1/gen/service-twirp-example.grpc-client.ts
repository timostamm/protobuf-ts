// @generated by protobuf-ts 2.11.1 with parameter server_grpc1,client_grpc1,optimize_code_size
// @generated from protobuf file "service-twirp-example.proto" (package "spec.haberdasher", syntax proto3)
// tslint:disable
//
// Twirp example RPC
// https://github.com/twitchtv/twirp-example/blob/c1501aeb89609a522db7d79d4c2e71b6c032af28/rpc/haberdasher/haberdasher.proto
//
import { Haberdasher } from "./service-twirp-example";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { Hat } from "./service-twirp-example";
import type { Size } from "./service-twirp-example";
import * as grpc from "@grpc/grpc-js";
/**
 * A Haberdasher makes hats for clients.
 *
 * @generated from protobuf service spec.haberdasher.Haberdasher
 */
export interface IHaberdasherClient {
    /**
     * MakeHat produces a hat of mysterious, randomly-selected color!
     *
     * @generated from protobuf rpc: MakeHat
     */
    makeHat(input: Size, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Hat) => void): grpc.ClientUnaryCall;
    makeHat(input: Size, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Hat) => void): grpc.ClientUnaryCall;
    makeHat(input: Size, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Hat) => void): grpc.ClientUnaryCall;
    makeHat(input: Size, callback: (err: grpc.ServiceError | null, value?: Hat) => void): grpc.ClientUnaryCall;
}
/**
 * A Haberdasher makes hats for clients.
 *
 * @generated from protobuf service spec.haberdasher.Haberdasher
 */
export class HaberdasherClient extends grpc.Client implements IHaberdasherClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * MakeHat produces a hat of mysterious, randomly-selected color!
     *
     * @generated from protobuf rpc: MakeHat
     */
    makeHat(input: Size, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Hat) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Hat) => void), callback?: ((err: grpc.ServiceError | null, value?: Hat) => void)): grpc.ClientUnaryCall {
        const method = Haberdasher.methods[0];
        return this.makeUnaryRequest<Size, Hat>(`/${Haberdasher.typeName}/${method.name}`, (value: Size): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Hat => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
