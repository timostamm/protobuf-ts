// @generated by protobuf-ts 2.11.0 with parameter server_grpc1,client_grpc1,optimize_code_size
// @generated from protobuf file "service-style-all.proto" (package "spec", syntax proto3)
// tslint:disable
import { Int32Value } from "./google/protobuf/wrappers";
import { StringValue } from "./google/protobuf/wrappers";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service spec.AllStyleService
 */
export interface IAllStyleService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: Unary
     */
    unary: grpc.handleUnaryCall<StringValue, Int32Value>;
    /**
     * @generated from protobuf rpc: ServerStream
     */
    serverStream: grpc.handleServerStreamingCall<StringValue, Int32Value>;
    /**
     * @generated from protobuf rpc: ClientStream
     */
    clientStream: grpc.handleClientStreamingCall<StringValue, Int32Value>;
    /**
     * @generated from protobuf rpc: Bidi
     */
    bidi: grpc.handleBidiStreamingCall<StringValue, Int32Value>;
}
/**
 * @grpc/grpc-js definition for the protobuf service spec.AllStyleService.
 *
 * Usage: Implement the interface IAllStyleService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IAllStyleService = ...
 * server.addService(allStyleServiceDefinition, service);
 * ```
 */
export const allStyleServiceDefinition: grpc.ServiceDefinition<IAllStyleService> = {
    unary: {
        path: "/spec.AllStyleService/Unary",
        originalName: "Unary",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Int32Value.fromBinary(bytes),
        requestDeserialize: bytes => StringValue.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Int32Value.toBinary(value)),
        requestSerialize: value => Buffer.from(StringValue.toBinary(value))
    },
    serverStream: {
        path: "/spec.AllStyleService/ServerStream",
        originalName: "ServerStream",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => Int32Value.fromBinary(bytes),
        requestDeserialize: bytes => StringValue.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Int32Value.toBinary(value)),
        requestSerialize: value => Buffer.from(StringValue.toBinary(value))
    },
    clientStream: {
        path: "/spec.AllStyleService/ClientStream",
        originalName: "ClientStream",
        requestStream: true,
        responseStream: false,
        responseDeserialize: bytes => Int32Value.fromBinary(bytes),
        requestDeserialize: bytes => StringValue.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Int32Value.toBinary(value)),
        requestSerialize: value => Buffer.from(StringValue.toBinary(value))
    },
    bidi: {
        path: "/spec.AllStyleService/Bidi",
        originalName: "Bidi",
        requestStream: true,
        responseStream: true,
        responseDeserialize: bytes => Int32Value.fromBinary(bytes),
        requestDeserialize: bytes => StringValue.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Int32Value.toBinary(value)),
        requestSerialize: value => Buffer.from(StringValue.toBinary(value))
    }
};
