// @generated by protobuf-ts 2.9.6 with parameter server_grpc1,client_grpc1,optimize_code_size
// @generated from protobuf file "service-twirp-example.proto" (package "spec.haberdasher", syntax proto3)
// tslint:disable
//
// Twirp example RPC
// https://github.com/twitchtv/twirp-example/blob/c1501aeb89609a522db7d79d4c2e71b6c032af28/rpc/haberdasher/haberdasher.proto
//
import { Hat } from "./service-twirp-example";
import { Size } from "./service-twirp-example";
import type * as grpc from "@grpc/grpc-js";
/**
 * A Haberdasher makes hats for clients.
 *
 * @generated from protobuf service spec.haberdasher.Haberdasher
 */
export interface IHaberdasher extends grpc.UntypedServiceImplementation {
    /**
     * MakeHat produces a hat of mysterious, randomly-selected color!
     *
     * @generated from protobuf rpc: MakeHat(spec.haberdasher.Size) returns (spec.haberdasher.Hat);
     */
    makeHat: grpc.handleUnaryCall<Size, Hat>;
}
/**
 * @grpc/grpc-js definition for the protobuf service spec.haberdasher.Haberdasher.
 *
 * Usage: Implement the interface IHaberdasher and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IHaberdasher = ...
 * server.addService(haberdasherDefinition, service);
 * ```
 */
export const haberdasherDefinition: grpc.ServiceDefinition<IHaberdasher> = {
    makeHat: {
        path: "/spec.haberdasher.Haberdasher/MakeHat",
        originalName: "MakeHat",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Hat.fromBinary(bytes),
        requestDeserialize: bytes => Size.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Hat.toBinary(value)),
        requestSerialize: value => Buffer.from(Size.toBinary(value))
    }
};
